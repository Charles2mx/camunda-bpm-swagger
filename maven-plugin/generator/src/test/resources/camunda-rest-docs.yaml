---
restOperations:
- method: "DELETE"
  path: "/authorization/{id}"
  description: "Deletes an authorization by id."
  resultDescription: "Deletes an authorization by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the authorization to be deleted."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "If the authenticated user is unauthorized to delete the resource\
        \ instance. See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Authorization cannot be found. See the Introduction for the error\
        \ response format."
- method: "GET"
  path: "/authorization/check"
  description: "Performs an authorization check for the currently authenticated user."
  resultDescription: "Performs an authorization check for the currently authenticated\
    \ user."
  queryParameters:
    permissionValue:
      id: "permissionValue"
      type: null
      description: "Yes"
    resourceId:
      id: "resourceId"
      type: null
      description: "No"
    resourceName:
      id: "resourceName"
      type: null
      description: "Yes"
    permissionName:
      id: "permissionName"
      type: null
      description: "Yes"
    resourceType:
      id: "resourceType"
      type: null
      description: "Yes"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Authorization with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/authorization/count"
  description: "Queries for authorizations using a list of parameters and retrieves\
    \ the count."
  resultDescription: "Queries for authorizations using a list of parameters and retrieves\
    \ the count."
  queryParameters:
    resourceId:
      id: "resourceId"
      type: null
      description: "Filter by resource Id."
    userIdIn:
      id: "userIdIn"
      type: null
      description: "Filter by a comma-seperated list of userIds."
    groupIdIn:
      id: "groupIdIn"
      type: null
      description: "Filter by a comma-seperated list of groupIds."
    id:
      id: "id"
      type: null
      description: "Filter by the id of the authorization."
    type:
      id: "type"
      type: null
      description: "Filter by authorization type. (0=global, 1=grant, 2=revoke). See\
        \ the User Guide for more information about authorization types."
    resourceType:
      id: "resourceType"
      type: null
      description: "Filter by an integer representation of the resource type. See\
        \ the User Guide for a list of integer representations of resource types."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy is specified. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/authorization"
  description: "Queries for a list of authorizations using a list of parameters.\n\
    The size of the result set can be retrieved by using the Get Authorization Count"
  resultDescription: "Queries for a list of authorizations using a list of parameters.\n\
    The size of the result set can be retrieved by using the Get Authorization Count"
  queryParameters:
    resourceId:
      id: "resourceId"
      type: null
      description: "Filter by resource id."
    userIdIn:
      id: "userIdIn"
      type: null
      description: "Filter by a comma-separated list of userIds."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    groupIdIn:
      id: "groupIdIn"
      type: null
      description: "Filter by a comma-separated list of groupIds."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are resourceType and resourceId. Must be used in conjunction with\
        \ the sortOrder parameter."
    id:
      id: "id"
      type: null
      description: "Filter by the id of the authorization."
    type:
      id: "type"
      type: null
      description: "Filter by authorization type. (0=global, 1=grant, 2=revoke). See\
        \ the User Guide for more information about authorization types."
    resourceType:
      id: "resourceType"
      type: null
      description: "Filter by an integer representation of the resource type. See\
        \ the User Guide for a list of integer representations of resource types."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy is specified. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/authorization/{id}"
  description: "Retrieves an authorization by id."
  resultDescription: "Retrieves an authorization by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the authorization to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Authorization with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "OPTIONS"
  path: "/authorization"
  description: "The `/authorization` resource supports two custom OPTIONS requests,\
    \ one for the resource as such and one for individual authorization instances.\
    \ The OPTIONS request allows you to check for the set of available operations\
    \ that the currently authenticated user can perform on the `/authorization` resource.\
    \ Whether the user can perform an operation or not may depend on various factors,\
    \ including the users authorizations to interact with this resource and the internal\
    \ configuration of the process engine."
  resultDescription: "The `/authorization` resource supports two custom OPTIONS requests,\
    \ one for the resource as such and one for individual authorization instances.\
    \ The OPTIONS request allows you to check for the set of available operations\
    \ that the currently authenticated user can perform on the `/authorization` resource.\
    \ Whether the user can perform an operation or not may depend on various factors,\
    \ including the users authorizations to interact with this resource and the internal\
    \ configuration of the process engine."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/authorization/create"
  description: "Creates a new authorization."
  resultDescription: "Creates a new authorization."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "The authorization could not be updated due to an internal server\
        \ error. See the Introduction for the error response format."
    403:
      id: "403"
      type: null
      description: "The authenticated user is unauthorized to create an instance of\
        \ this resource. See the Introduction for the error response format."
- method: "PUT"
  path: "/authorization/{id}"
  description: "Updates an authorization by id."
  resultDescription: "Updates an authorization by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the authorization to be updated."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The authorization could not be updated due to an internal server\
        \ error. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The authenticated user is unauthorized to update this resource.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "The authorization with the requested Id cannot be found."
- method: "DELETE"
  path: "/batch/{id}"
  description: "Deletes a batch by id, including all related jobs and job definitions.\
    \ Optionally also\ndeletes the batch history."
  resultDescription: "Deletes a batch by id, including all related jobs and job definitions.\
    \ Optionally also\ndeletes the batch history."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the batch to be deleted."
  queryParameters:
    cascade:
      id: "cascade"
      type: null
      description: "true, if the historic batch and historic job logs for this batch\
        \ should also be deleted."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Deployment with id 'aDeploymentId' does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/batch/count"
  description: "Requests the number of batches that fulfill the query criteria.\n\
    Takes the same filtering parameters as the Get Batches\n\"reference/rest/batch/get-query.md\"\
    \ >}}) method."
  resultDescription: "Requests the number of batches that fulfill the query criteria.\n\
    Takes the same filtering parameters as the Get Batches\n\"reference/rest/batch/get-query.md\"\
    \ >}}) method."
  queryParameters:
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A batch matches\
        \ if it has one of the given tenant ids."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include batches which belong to no tenant. Value can effectively\
        \ only be true, as false is the default behavior."
    batchId:
      id: "batchId"
      type: null
      description: "Filter by batch id."
    type:
      id: "type"
      type: null
      description: "Filter by batch type. See the User Guide for more information\
        \ about batch types."
    suspended:
      id: "suspended"
      type: null
      description: "A Boolean value which indicates whether only active or suspended\
        \ batches should be included. When the value is set to true, only suspended\
        \ batches will be returned and when the value is set to false, only active\
        \ batches will be returned."
- method: "GET"
  path: "/batch"
  description: "Queries for batches that fulfill given parameters. Parameters may\
    \ be\nthe properties of batches, such as the id or type.  The\nsize of the result\
    \ set can be retrieved by using the Get Batch Count\nrelref \"reference/rest/batch/get-query-count.md\"\
    \ >}}) method."
  resultDescription: "Queries for batches that fulfill given parameters. Parameters\
    \ may be\nthe properties of batches, such as the id or type.  The\nsize of the\
    \ result set can be retrieved by using the Get Batch Count\nrelref \"reference/rest/batch/get-query-count.md\"\
    \ >}}) method."
  queryParameters:
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A batch matches\
        \ if it has one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include batches which belong to no tenant. Value can effectively\
        \ only be true, as false is the default behavior."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are batchId and tenantId. Must be used in conjunction with the sortOrder\
        \ parameter."
    batchId:
      id: "batchId"
      type: null
      description: "Filter by batch id."
    type:
      id: "type"
      type: null
      description: "Filter by batch type. See the User Guide for more information\
        \ about batch types."
    suspended:
      id: "suspended"
      type: null
      description: "A Boolean value which indicates whether only active or suspended\
        \ batches should be included. When the value is set to true, only suspended\
        \ batches will be returned and when the value is set to false, only active\
        \ batches will be returned."
- method: "GET"
  path: "/batch/statistics/count"
  description: "Requests the number of batch statistics that fulfill the query criteria.\
    \  Takes\nthe same filtering parameters as the Get Batch Statistics\n\"reference/rest/batch/get-statistics-query.md\"\
    \ >}}) method."
  resultDescription: "Requests the number of batch statistics that fulfill the query\
    \ criteria.  Takes\nthe same filtering parameters as the Get Batch Statistics\n\
    \"reference/rest/batch/get-statistics-query.md\" >}}) method."
  queryParameters:
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A batch matches\
        \ if it has one of the given tenant ids."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include batches which belong to no tenant. Value can effectively\
        \ only be true, as false is the default behavior."
    batchId:
      id: "batchId"
      type: null
      description: "Filter by batch id."
    type:
      id: "type"
      type: null
      description: "Filter by batch type. See the User Guide for more information\
        \ about batch types."
    suspended:
      id: "suspended"
      type: null
      description: "A Boolean value which indicates whether only active or suspended\
        \ batches should be included. When the value is set to true, only suspended\
        \ batches will be returned and when the value is set to false, only active\
        \ batches will be returned."
- method: "GET"
  path: "/batch/statistics"
  description: "Queries for batch statistics that fulfill given parameters. Parameters\
    \ may be the\nproperties of batches, such as the id or type.  The size of the\
    \ result set can\nbe retrieved by using the Get Batch Statistics Count\n\"reference/rest/batch/get-statistics-query-count.md\"\
    \ >}}) method."
  resultDescription: "Queries for batch statistics that fulfill given parameters.\
    \ Parameters may be the\nproperties of batches, such as the id or type.  The size\
    \ of the result set can\nbe retrieved by using the Get Batch Statistics Count\n\
    \"reference/rest/batch/get-statistics-query-count.md\" >}}) method."
  queryParameters:
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A batch matches\
        \ if it has one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include batches which belong to no tenant. Value can effectively\
        \ only be true, as false is the default behavior."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are batchId and tenantId. Must be used in conjunction with the sortOrder\
        \ parameter."
    batchId:
      id: "batchId"
      type: null
      description: "Filter by batch id."
    type:
      id: "type"
      type: null
      description: "Filter by batch type. See the User Guide for more information\
        \ about batch types."
    suspended:
      id: "suspended"
      type: null
      description: "A Boolean value which indicates whether only active or suspended\
        \ batches should be included. When the value is set to true, only suspended\
        \ batches will be returned and when the value is set to false, only active\
        \ batches will be returned."
- method: "GET"
  path: "/batch/{id}"
  description: "Retrieves a batch by id, according to the `Batch` interface in the\
    \ engine."
  resultDescription: "Retrieves a batch by id, according to the `Batch` interface\
    \ in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the batch to be retrieved."
- method: "PUT"
  path: "/batch/{id}/suspended"
  description: "Activates or suspends a batch by id."
  resultDescription: "Activates or suspends a batch by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the batch to activate or suspend."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if the batch cannot be suspended or activated. See the\
        \ Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/case-definition/{id}/diagram"
  description: "Retrieves the diagram of a case definition."
  resultDescription: "Retrieves the diagram of a case definition."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case definition."
    key:
      id: "key"
      type: null
      description: "The key of the case definition (the latest version thereof) to\
        \ be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the case definition belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    204:
      id: "204"
      type: null
      description: "The case definition doesn't have an associated diagram."
    404:
      id: "404"
      type: null
      description: "Case definition with given id or key does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/case-definition/count"
  description: "Requests the number of case definitions that fulfill the query criteria.\
    \ Takes the same filtering parameters as the\nGet Case Definitions"
  resultDescription: "Requests the number of case definitions that fulfill the query\
    \ criteria. Takes the same filtering parameters as the\nGet Case Definitions"
  queryParameters:
    resourceNameLike:
      id: "resourceNameLike"
      type: null
      description: "Filter by names of those case definition resources that the parameter\
        \ is a substring of."
    caseDefinitionIdIn:
      id: "caseDefinitionIdIn"
      type: null
      description: "Filter by case definition ids."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by case definition id."
    resourceName:
      id: "resourceName"
      type: null
      description: "Filter by the name of the case definition resource. Exact match."
    includeCaseDefinitionsWithoutTenantId:
      id: "includeCaseDefinitionsWithoutTenantId"
      type: null
      description: "Include case definitions which belong to no tenant. Can be used\
        \ in combination with tenantIdIn. Value may only be true, as false is the\
        \ default behavior."
    version:
      id: "version"
      type: null
      description: "Filter by case definition version."
    categoryLike:
      id: "categoryLike"
      type: null
      description: "Filter by case definition categories that the parameter is a substring\
        \ of."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by case definition names that the parameter is a substring\
        \ of."
    latestVersion:
      id: "latestVersion"
      type: null
      description: "Only include those case definitions that are latest versions.\
        \ Value may only be true, as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A case definition\
        \ must have one of the given tenant ids."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    keyLike:
      id: "keyLike"
      type: null
      description: "Filter by case definition keys that the parameter is a substring\
        \ of."
    name:
      id: "name"
      type: null
      description: "Filter by case definition name."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include case definitions which belong to no tenant. Value\
        \ may only be true, as false is the default behavior."
    category:
      id: "category"
      type: null
      description: "Filter by case definition category. Exact match."
    key:
      id: "key"
      type: null
      description: "Filter by case definition key, i.e., the id in the CMMN XML. Exact\
        \ match."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/case-definition"
  description: "Queries for case definitions that fulfill given parameters. Parameters\
    \ may be the properties of case definitions, such as the name, key or version.\n\
    The size of the result set can be retrieved by using the Get Case Definition Count"
  resultDescription: "Queries for case definitions that fulfill given parameters.\
    \ Parameters may be the properties of case definitions, such as the name, key\
    \ or version.\nThe size of the result set can be retrieved by using the Get Case\
    \ Definition Count"
  queryParameters:
    resourceNameLike:
      id: "resourceNameLike"
      type: null
      description: "Filter by names of those case definition resources that the parameter\
        \ is a substring of."
    caseDefinitionIdIn:
      id: "caseDefinitionIdIn"
      type: null
      description: "Filter by case definition ids."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by case definition id."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    resourceName:
      id: "resourceName"
      type: null
      description: "Filter by the name of the case definition resource. Exact match."
    includeCaseDefinitionsWithoutTenantId:
      id: "includeCaseDefinitionsWithoutTenantId"
      type: null
      description: "Include case definitions which belong to no tenant. Can be used\
        \ in combination with tenantIdIn. Value may only be true, as false is the\
        \ default behavior."
    version:
      id: "version"
      type: null
      description: "Filter by case definition version."
    categoryLike:
      id: "categoryLike"
      type: null
      description: "Filter by case definition categories that the parameter is a substring\
        \ of."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by case definition names that the parameter is a substring\
        \ of."
    latestVersion:
      id: "latestVersion"
      type: null
      description: "Only include those case definitions that are latest versions.\
        \ Value may only be true, as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A case definition\
        \ must have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    keyLike:
      id: "keyLike"
      type: null
      description: "Filter by case definition keys that the parameter is a substring\
        \ of."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    name:
      id: "name"
      type: null
      description: "Filter by case definition name."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include case definitions which belong to no tenant. Value\
        \ may only be true, as false is the default behavior."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are category, key, id, name, version, deploymentId and tenantId.\
        \ Must be used in conjunction with the sortOrder parameter."
    category:
      id: "category"
      type: null
      description: "Filter by case definition category. Exact match."
    key:
      id: "key"
      type: null
      description: "Filter by case definition key, i.e., the id in the CMMN XML. Exact\
        \ match."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/case-definition/{id}/xml"
  description: "Retrieves the CMMN XML of a case definition."
  resultDescription: "Retrieves the CMMN XML of a case definition."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case definition."
    key:
      id: "key"
      type: null
      description: "The key of the case definition (the latest version thereof) to\
        \ be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the case definition belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Case definition with given id or key does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/case-definition/{id}"
  description: "Retrieves a case definition according to the `CaseDefinition` interface\
    \ in the engine."
  resultDescription: "Retrieves a case definition according to the `CaseDefinition`\
    \ interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case definition to be retrieved."
    key:
      id: "key"
      type: null
      description: "The key of the case definition (the latest version thereof) to\
        \ be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the case definition belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Case definition with given id or key does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-definition/{id}/create"
  description: "Instantiates a given case definition. Case variables and business\
    \ key may be supplied in the request body."
  resultDescription: "Instantiates a given case definition. Case variables and business\
    \ key may be supplied in the request body."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case definition to be retrieved."
    key:
      id: "key"
      type: null
      description: "The key of the case definition (the latest version thereof) to\
        \ be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the case definition belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "The case instance could not be created due to an invalid variable\
        \ value, for example if the value could not be parsed to an Integer value\
        \ or the passed variable type is not supported. See the Introduction for the\
        \ error response format."
    500:
      id: "500"
      type: null
      description: "The case instance could not be created successfully. See the Introduction\
        \ for the error response format."
    403:
      id: "403"
      type: null
      description: "The case execution cannot be instantiated because of CMMN restrictions.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "The case instance could not be created due to a nonexistent case\
        \ definition. See the Introduction for the error response format."
- method: "PUT"
  path: "/case-definition/{id}/history-time-to-live"
  description: "Updates history time to live for case definition with given id. The\
    \ field is used within History cleanup"
  resultDescription: "Updates history time to live for case definition with given\
    \ id. The field is used within History cleanup"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case definition to change history time to live."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "case definition with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/case-execution/count"
  description: "Queries for the number of case executions that fulfill given parameters.\n\
    Takes the same parameters as the Get Case Executions"
  resultDescription: "Queries for the number of case executions that fulfill given\
    \ parameters.\nTakes the same parameters as the Get Case Executions"
  queryParameters:
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Filter by a case execution id."
    variables:
      id: "variables"
      type: null
      description: "Only include case executions that have variables with certain\
        \ values. Variable filtering expressions are comma-separated and are structured\
        \ as follows: A valid parameter value has the form key_operator_value. key\
        \ is the variable name, operator is the comparison operator to be used and\
        \ value the variable value. Note: Values are always treated as String objects\
        \ on server side. Valid operator values are: eq - equal to; neq - not equal\
        \ to; gt - greater than; gteq - greater than or equal to; lt - lower than;\
        \ lteq - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by the case definition the case executions run on."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by a case instance id."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Filter by the key of the case definition the case executions run\
        \ on."
    active:
      id: "active"
      type: null
      description: "Only include active case executions. Value may only be true, as\
        \ false is the default behavior."
    repetition:
      id: "repetition"
      type: null
      description: "Only include case executions which are repetitions. Value may\
        \ only be true, as false is the default behavior."
    required:
      id: "required"
      type: null
      description: "Only include required case executions. Value may only be true,\
        \ as false is the default behavior."
    enabled:
      id: "enabled"
      type: null
      description: "Only include enabled case executions. Value may only be true,\
        \ as false is the default behavior."
    activityId:
      id: "activityId"
      type: null
      description: "Filter by the id of the activity the case execution currently\
        \ executes."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A case execution\
        \ must have one of the given tenant ids."
    repeatable:
      id: "repeatable"
      type: null
      description: "Only include repeatable case executions. Value may only be true,\
        \ as false is the default behavior."
    businessKey:
      id: "businessKey"
      type: null
      description: "Filter by the business key of the case instances the case executions\
        \ belong to."
    caseInstanceVariables:
      id: "caseInstanceVariables"
      type: null
      description: "Only include case executions that belong to a case instance with\
        \ variables with certain values. Variable filtering expressions are comma-separated\
        \ and are structured as follows: A valid parameter value has the form key_operator_value.\
        \ key is the variable name, operator is the comparison operator to be used\
        \ and value the variable value. Note: Values are always treated as String\
        \ objects on server side. Valid operator values are: eq - equal to; neq -\
        \ not equal to; gt - greater than; gteq - greater than or equal to; lt - lower\
        \ than; lteq - lower than or equal to; like. key and value may not contain\
        \ underscore or comma characters."
    disabled:
      id: "disabled"
      type: null
      description: "Only include disabled case executions. Value may only be true,\
        \ as false is the default behavior."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if an invalid operator for variable comparison is used. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/case-execution"
  description: "Queries for case executions that fulfill given parameters.\nParameters\
    \ may be static as well as dynamic runtime properties of case executions.\nThe\
    \ size of the result set can be retrieved by using the Get Case Execution Count"
  resultDescription: "Queries for case executions that fulfill given parameters.\n\
    Parameters may be static as well as dynamic runtime properties of case executions.\n\
    The size of the result set can be retrieved by using the Get Case Execution Count"
  queryParameters:
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Filter by a case execution id."
    variables:
      id: "variables"
      type: null
      description: "Only include case executions that have variables with certain\
        \ values. Variable filtering expressions are comma-separated and are structured\
        \ as follows: A valid parameter value has the form key_operator_value. key\
        \ is the variable name, operator is the comparison operator to be used and\
        \ value the variable value. Note: Values are always treated as String objects\
        \ on server side. Valid operator values are: eq - equal to; neq - not equal\
        \ to; gt - greater than; gteq - greater than or equal to; lt - lower than;\
        \ lteq - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by the case definition the case executions run on."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by a case instance id."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Filter by the key of the case definition the case executions run\
        \ on."
    active:
      id: "active"
      type: null
      description: "Only include active case executions. Value may only be true, as\
        \ false is the default behavior."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    repetition:
      id: "repetition"
      type: null
      description: "Only include case executions which are repetitions. Value may\
        \ only be true, as false is the default behavior."
    required:
      id: "required"
      type: null
      description: "Only include required case executions. Value may only be true,\
        \ as false is the default behavior."
    enabled:
      id: "enabled"
      type: null
      description: "Only include enabled case executions. Value may only be true,\
        \ as false is the default behavior."
    activityId:
      id: "activityId"
      type: null
      description: "Filter by the id of the activity the case execution currently\
        \ executes."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A case execution\
        \ must have one of the given tenant ids."
    repeatable:
      id: "repeatable"
      type: null
      description: "Only include repeatable case executions. Value may only be true,\
        \ as false is the default behavior."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    businessKey:
      id: "businessKey"
      type: null
      description: "Filter by the business key of the case instances the case executions\
        \ belong to."
    caseInstanceVariables:
      id: "caseInstanceVariables"
      type: null
      description: "Only include case executions that belong to a case instance with\
        \ variables with certain values. Variable filtering expressions are comma-separated\
        \ and are structured as follows: A valid parameter value has the form key_operator_value.\
        \ key is the variable name, operator is the comparison operator to be used\
        \ and value the variable value. Note: Values are always treated as String\
        \ objects on server side. Valid operator values are: eq - equal to; neq -\
        \ not equal to; gt - greater than; gteq - greater than or equal to; lt - lower\
        \ than; lteq - lower than or equal to; like. key and value may not contain\
        \ underscore or comma characters."
    disabled:
      id: "disabled"
      type: null
      description: "Only include disabled case executions. Value may only be true,\
        \ as false is the default behavior."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are caseExecutionId, caseDefinitionKey, caseDefinitionId and tenantId.\
        \ Must be used in conjunction with the sortOrder parameter."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/case-execution/{id}"
  description: "Retrieves a case execution by id, according to the `CaseExecution`\
    \ interface in the engine."
  resultDescription: "Retrieves a case execution by id, according to the `CaseExecution`\
    \ interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case execution to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Case execution with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "DELETE"
  path: "/case-execution/{id}/localVariables/{varName}"
  description: "Deletes a variable in the context of a given case execution. Deletion\
    \ does not propagate upwards in the case execution hierarchy."
  resultDescription: "Deletes a variable in the context of a given case execution.\
    \ Deletion does not propagate upwards in the case execution hierarchy."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to delete."
    id:
      id: "id"
      type: null
      description: "The id of the case execution to delete the variable from."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/case-execution/{id}/localVariables/{varName}/data"
  description: "Retrieves a binary variable from the context of a given case execution.\
    \ Does not traverse the parent case execution hierarchy. Applicable for byte array\
    \ and file variables."
  resultDescription: "Retrieves a binary variable from the context of a given case\
    \ execution. Does not traverse the parent case execution hierarchy. Applicable\
    \ for byte array and file variables."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the case execution to retrieve the variable from."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Variable with given id exists but is not a binary variable. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/case-execution/{id}/localVariables/{varName}"
  description: "Retrieves a variable from the context of a given case execution. Does\
    \ not traverse the parent case execution hierarchy."
  resultDescription: "Retrieves a variable from the context of a given case execution.\
    \ Does not traverse the parent case execution hierarchy."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the case execution to retrieve the variable from."
  queryParameters:
    deserializeValue:
      id: "deserializeValue"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/case-execution/{id}/localVariables"
  description: "Retrieves all variables of a given case execution."
  resultDescription: "Retrieves all variables of a given case execution."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case execution to retrieve the variables from."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "Case execution with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-execution/{id}/localVariables"
  description: "Updates or deletes the variables in the context of a case execution.\
    \ The updates do not propagate upwards in the case execution hierarchy.\nPlease\
    \ note: deletion precedes update."
  resultDescription: "Updates or deletes the variables in the context of a case execution.\
    \ The updates do not propagate upwards in the case execution hierarchy.\nPlease\
    \ note: deletion precedes update."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case execution to set variables for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "Update or deletion could not be executed, for example because\
        \ the case execution does not exist."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/case-execution/{id}/localVariables/{varName}/data"
  description: "Sets the serialized value for a binary variable or the binary value\
    \ for a file variable."
  resultDescription: "Sets the serialized value for a binary variable or the binary\
    \ value for a file variable."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the case execution to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if no filename\
        \ is set. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/case-execution/{id}/localVariables/{varName}"
  description: "Sets a variable in the context of a given case execution. Update does\
    \ not propagate upwards in the case execution hierarchy."
  resultDescription: "Sets a variable in the context of a given case execution. Update\
    \ does not propagate upwards in the case execution hierarchy."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the case execution to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/case-execution/{id}/complete"
  description: "title: \"Complete Case Execution\"\nweight: 70"
  resultDescription: "title: \"Complete Case Execution\"\nweight: 70"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case execution to complete."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The state transition is not allowed to be performed, for example\
        \ when the case execution is enabled or is already completed. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The case execution cannot be completed because of CMMN restrictions.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "The case execution with given id is not found. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-execution/{id}/disable"
  description: "Performs a transition from ENABLED state to DISABLED state. In relation\
    \ to the state transition, it is possible to update or delete case instance variables\
    \ (please note: deletion precedes update)."
  resultDescription: "Performs a transition from ENABLED state to DISABLED state.\
    \ In relation to the state transition, it is possible to update or delete case\
    \ instance variables (please note: deletion precedes update)."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case execution to disable."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The state transition is not allowed to be performed, for example\
        \ when the case execution is active or is already disabled. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The case execution cannot be disabled because of CMMN restrictions.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "The case execution with given id is not found. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-execution/{id}/manual-start"
  description: "Performs a transition from ENABLED state to ACTIVE state. In relation\
    \ to the state transition, it is possible to update or delete case instance variables\
    \ (please note: deletion precedes update)."
  resultDescription: "Performs a transition from ENABLED state to ACTIVE state. In\
    \ relation to the state transition, it is possible to update or delete case instance\
    \ variables (please note: deletion precedes update)."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case execution to start manually."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The state transition is not allowed to be performed, for example\
        \ when the case execution is disabled or is already active. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The case execution cannot be started because of CMMN restrictions.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "The case execution with given id is not found. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-instance/count"
  description: "Queries for the number of case executions that fulfill the given parameters.\n\
    This method takes the same message body as the Get Case Executions (POST)\nand\
    \ therefore it is slightly more powerful than the Get Case Execution Count"
  resultDescription: "Queries for the number of case executions that fulfill the given\
    \ parameters.\nThis method takes the same message body as the Get Case Executions\
    \ (POST)\nand therefore it is slightly more powerful than the Get Case Execution\
    \ Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if an invalid operator for variable comparison is used. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-execution"
  description: "Queries for case executions that fulfill given parameters through\
    \ a JSON object.\nThis method is slightly more powerful than the Get Case Executions\n\
    filtering by multiple case variables of types `String`, `Number` or `Boolean`."
  resultDescription: "Queries for case executions that fulfill given parameters through\
    \ a JSON object.\nThis method is slightly more powerful than the Get Case Executions\n\
    filtering by multiple case variables of types `String`, `Number` or `Boolean`."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/case-execution/{id}/reenable"
  description: "Performs a transition from DISABLED state to ENABLED state. In relation\
    \ to the state transition, it is possible to update or delete case instance variables\
    \ (please note: deletion precedes update)."
  resultDescription: "Performs a transition from DISABLED state to ENABLED state.\
    \ In relation to the state transition, it is possible to update or delete case\
    \ instance variables (please note: deletion precedes update)."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case execution to re-enable."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The state transition is not allowed to be performed, for example\
        \ when the case execution is active or is already enabled. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The case execution cannot be reenabled because of CMMN restrictions.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "The case execution with given id is not found. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-execution/{id}/terminate"
  description: "title: \"Terminate Case Execution\"\nweight: 90"
  resultDescription: "title: \"Terminate Case Execution\"\nweight: 90"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case execution to terminate."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The state transition is not allowed to be performed, for example\
        \ when the case execution is not in the active state. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The case execution cannot be terminated because of CMMN restrictions.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "The case execution with given id is not found. See the Introduction\
        \ for the error response format."
- method: "DELETE"
  path: "/case-execution/{id}/variables/{varName}"
  description: "Deletes a variable of a given case execution by id."
  resultDescription: "Deletes a variable of a given case execution by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to delete."
    id:
      id: "id"
      type: null
      description: "The id of the case execution to delete the variable from."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/case-execution/{id}/variables/{varName}/data"
  description: "Retrieves a binary variable of a given case execution by id. Applicable\
    \ for byte array and file variables."
  resultDescription: "Retrieves a binary variable of a given case execution by id.\
    \ Applicable for byte array and file variables."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the case execution to retrieve the variable from."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Variable with given id exists but is not a binary variable. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/case-execution/{id}/variables/{varName}"
  description: "Retrieves a variable of a given case execution by id."
  resultDescription: "Retrieves a variable of a given case execution by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the case execution to retrieve the variable from."
  queryParameters:
    deserializeValue:
      id: "deserializeValue"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/case-execution/{id}/variables"
  description: "Retrieves all variables of a given case execution by id."
  resultDescription: "Retrieves all variables of a given case execution by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case execution to retrieve the variables from."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "Case execution with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-execution/{id}/variables/{varName}/data"
  description: "Sets the serialized value for a binary variable or the binary value\
    \ for a file variable."
  resultDescription: "Sets the serialized value for a binary variable or the binary\
    \ value for a file variable."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the case execution to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if no filename\
        \ is set. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/case-execution/{id}/variables"
  description: "Updates or deletes the variables of a case execution by id. Please\
    \ note: deletion precedes update."
  resultDescription: "Updates or deletes the variables of a case execution by id.\
    \ Please note: deletion precedes update."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case execution to set variables for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "Update or deletion could not be executed, for example because\
        \ the case execution does not exist."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/case-execution/{id}/variables/{varName}"
  description: "Sets a variable of a given case execution by id."
  resultDescription: "Sets a variable of a given case execution by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the case execution to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/case-instance/count"
  description: "Queries for the number of case instances that fulfill given parameters.\n\
    Takes the same parameters as the Get Case Instances"
  resultDescription: "Queries for the number of case instances that fulfill given\
    \ parameters.\nTakes the same parameters as the Get Case Instances"
  queryParameters:
    variables:
      id: "variables"
      type: null
      description: "Only include case instances that have variables with certain values.\
        \ Variable filtering expressions are comma-separated and are structured as\
        \ follows: A valid parameter value has the form key_operator_value. key is\
        \ the variable name, operator is the comparison operator to be used and value\
        \ the variable value. Note: Values are always treated as String objects on\
        \ server side. Valid operator values are: eq - equal to; neq - not equal to;\
        \ gt - greater than; gteq - greater than or equal to; lt - lower than; lteq\
        \ - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    subProcessInstance:
      id: "subProcessInstance"
      type: null
      description: "Restrict query to all case instances that have the given process\
        \ instance as a sub process instance. Takes a process instance id."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by the case definition the case instances run on."
    superCaseInstance:
      id: "superCaseInstance"
      type: null
      description: "Restrict query to all case instances that are sub case instances\
        \ of the given case instance. Takes a case instance id."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by a case instance id."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Filter by the key of the case definition the case instances run\
        \ on."
    active:
      id: "active"
      type: null
      description: "Only include active case instances. Value may only be true, as\
        \ false is the default behavior."
    completed:
      id: "completed"
      type: null
      description: "Only include completed case instances. Value may only be true,\
        \ as false is the default behavior."
    subCaseInstance:
      id: "subCaseInstance"
      type: null
      description: "Restrict query to all case instances that have the given case\
        \ instance as a sub case instance. Takes a case instance id."
    superProcessInstance:
      id: "superProcessInstance"
      type: null
      description: "Restrict query to all case instances that are sub case instances\
        \ of the given process instance. Takes a process instance id."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A case instance\
        \ must have one of the given tenant ids."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    businessKey:
      id: "businessKey"
      type: null
      description: "Filter by case instance business key."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include case instances which belong to no tenant. Value may\
        \ only be true, as false is the default behavior."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if an invalid operator for variable comparison is used. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/case-instance"
  description: "Queries for case instances that fulfill given parameters.\nParameters\
    \ may be static as well as dynamic runtime properties of case instances.\nThe\
    \ size of the result set can be retrieved by using the Get Case Instance Count"
  resultDescription: "Queries for case instances that fulfill given parameters.\n\
    Parameters may be static as well as dynamic runtime properties of case instances.\n\
    The size of the result set can be retrieved by using the Get Case Instance Count"
  queryParameters:
    variables:
      id: "variables"
      type: null
      description: "Only include case instances that have variables with certain values.\
        \ Variable filtering expressions are comma-separated and are structured as\
        \ follows: A valid parameter value has the form key_operator_value. key is\
        \ the variable name, operator is the comparison operator to be used and value\
        \ the variable value. Note: Values are always treated as String objects on\
        \ server side. Valid operator values are: eq - equal to; neq - not equal to;\
        \ gt - greater than; gteq - greater than or equal to; lt - lower than; lteq\
        \ - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    subProcessInstance:
      id: "subProcessInstance"
      type: null
      description: "Restrict query to all case instances that have the given process\
        \ instance as a sub process instance. Takes a process instance id."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by the case definition the case instances run on."
    superCaseInstance:
      id: "superCaseInstance"
      type: null
      description: "Restrict query to all case instances that are sub case instances\
        \ of the given case instance. Takes a case instance id."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by a case instance id."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Filter by the key of the case definition the case instances run\
        \ on."
    active:
      id: "active"
      type: null
      description: "Only include active case instances. Value may only be true, as\
        \ false is the default behavior."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    completed:
      id: "completed"
      type: null
      description: "Only include completed case instances. Value may only be true,\
        \ as false is the default behavior."
    subCaseInstance:
      id: "subCaseInstance"
      type: null
      description: "Restrict query to all case instances that have the given case\
        \ instance as a sub case instance. Takes a case instance id."
    superProcessInstance:
      id: "superProcessInstance"
      type: null
      description: "Restrict query to all case instances that are sub case instances\
        \ of the given process instance. Takes a process instance id."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A case instance\
        \ must have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    businessKey:
      id: "businessKey"
      type: null
      description: "Filter by case instance business key."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include case instances which belong to no tenant. Value may\
        \ only be true, as false is the default behavior."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are caseInstanceId, casedefinitionKey, caseDefinitionId and tenantId.\
        \ Must be used in conjunction with the sortOrder parameter."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/case-instance/{id}"
  description: "Retrieves a case instance by id, according to the `CaseInstance` interface\
    \ in the engine."
  resultDescription: "Retrieves a case instance by id, according to the `CaseInstance`\
    \ interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case instance to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Case instance with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-instance/{id}/close"
  description: "Performs a transition from COMPLETED state to CLOSED state. In relation\
    \ to the state transition, it is possible to update or delete case instance variables\
    \ (please note: deletion precedes update)."
  resultDescription: "Performs a transition from COMPLETED state to CLOSED state.\
    \ In relation to the state transition, it is possible to update or delete case\
    \ instance variables (please note: deletion precedes update)."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case instance to close."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The state transition is not allowed to be performed, for example\
        \ when the case instance is active. See the Introduction for the error response\
        \ format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The case instance cannot be closed because of CMMN restrictions.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "The case instance with given id is not found. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-instance/{id}/complete"
  description: "Performs a transition from ACTIVE state to COMPLETED state. In relation\
    \ to the state transition, it is possible to update or delete case instance variables\
    \ (please note: deletion precedes update)."
  resultDescription: "Performs a transition from ACTIVE state to COMPLETED state.\
    \ In relation to the state transition, it is possible to update or delete case\
    \ instance variables (please note: deletion precedes update)."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case instance to complete."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The state transition is not allowed to be performed, for example\
        \ when the case instance is already completed. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The case instance cannot be completed because of CMMN restrictions.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "The case instance with given id is not found. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-instance/count"
  description: "Queries for the number of case instances that fulfill the given parameters.\n\
    This method takes the same message body as the Get Case Instance (POST)\nand therefore\
    \ it is slightly more powerful than the Get Case Instance Count"
  resultDescription: "Queries for the number of case instances that fulfill the given\
    \ parameters.\nThis method takes the same message body as the Get Case Instance\
    \ (POST)\nand therefore it is slightly more powerful than the Get Case Instance\
    \ Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if an invalid operator for variable comparison is used. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-instance"
  description: "Queries for case instances that fulfill given parameters through a\
    \ JSON object.\nThis method is slightly more powerful than the Get Case Instances\n\
    to filter by multiple case variables of types `String`, `Number` or `Boolean`."
  resultDescription: "Queries for case instances that fulfill given parameters through\
    \ a JSON object.\nThis method is slightly more powerful than the Get Case Instances\n\
    to filter by multiple case variables of types `String`, `Number` or `Boolean`."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/case-instance/{id}/terminate"
  description: "Performs a transition from ACTIVE state to TERMINATED state. In relation\
    \ to the state transition, it is possible to update or delete case instance variables\
    \ (please note: deletion precedes update)."
  resultDescription: "Performs a transition from ACTIVE state to TERMINATED state.\
    \ In relation to the state transition, it is possible to update or delete case\
    \ instance variables (please note: deletion precedes update)."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case instance to terminate."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The state transition is not allowed to be performed, for example\
        \ when the case instance is not in the active state. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The case instance cannot be terminated because of CMMN restrictions.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "The case instance with given id is not found. See the Introduction\
        \ for the error response format."
- method: "DELETE"
  path: "/case-instance/{id}/variables/{varName}"
  description: "Deletes a variable of a given case instance by id."
  resultDescription: "Deletes a variable of a given case instance by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to delete."
    id:
      id: "id"
      type: null
      description: "The id of the case instance to delete the variable from."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/case-instance/{id}/variables/{varName}/data"
  description: "Retrieves a binary variable of a given case instance by id. Applicable\
    \ for byte array and file variables."
  resultDescription: "Retrieves a binary variable of a given case instance by id.\
    \ Applicable for byte array and file variables."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the case instance to retrieve the variable from."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Variable with given id exists but is not a binary variable. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/case-instance/{id}/variables/{varName}"
  description: "Retrieves a variable of a given case instance by id."
  resultDescription: "Retrieves a variable of a given case instance by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the case instance to retrieve the variable from."
  queryParameters:
    deserializeValue:
      id: "deserializeValue"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/case-instance/{id}/variables"
  description: "Retrieves all variables of a given case instance by id."
  resultDescription: "Retrieves all variables of a given case instance by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case instance to retrieve the variables from."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "Case instance with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/case-instance/{id}/variables/{varName}/data"
  description: "Sets the serialized value for a binary variable or the binary value\
    \ for a file variable."
  resultDescription: "Sets the serialized value for a binary variable or the binary\
    \ value for a file variable."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the case instance to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if no filename\
        \ is set. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/case-instance/{id}/variables"
  description: "Updates or deletes the variables of a case instance. Please note:\
    \ deletion precedes update."
  resultDescription: "Updates or deletes the variables of a case instance. Please\
    \ note: deletion precedes update."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case instance to set variables for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "Update or delete could not be executed, for example because the\
        \ case instance does not exist."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/case-instance/{id}/variables/{varName}"
  description: "Sets a variable of a given case instance by id."
  resultDescription: "Sets a variable of a given case instance by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the case instance to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/decision-definition/{id}/diagram"
  description: "Retrieves the diagram of a decision definition."
  resultDescription: "Retrieves the diagram of a decision definition."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the decision definition."
    key:
      id: "key"
      type: null
      description: "The key of the decision definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the decision definition belongs to."
- method: "GET"
  path: "/decision-definition/count"
  description: "Requests the number of decision definitions that fulfill the query\
    \ criteria.\nTakes the same filtering parameters as the Get Decision Definitions\n\
    \"reference/rest/decision-definition/get-query.md\" >}}) method."
  resultDescription: "Requests the number of decision definitions that fulfill the\
    \ query criteria.\nTakes the same filtering parameters as the Get Decision Definitions\n\
    \"reference/rest/decision-definition/get-query.md\" >}}) method."
  queryParameters:
    resourceNameLike:
      id: "resourceNameLike"
      type: null
      description: "Filter by names of those decision definition resources that the\
        \ parameter is a substring of."
    decisionDefinitionIdIn:
      id: "decisionDefinitionIdIn"
      type: null
      description: "Filter by decision definition ids."
    resourceName:
      id: "resourceName"
      type: null
      description: "Filter by the name of the decision definition resource. Exact\
        \ match."
    version:
      id: "version"
      type: null
      description: "Filter by decision definition version."
    categoryLike:
      id: "categoryLike"
      type: null
      description: "Filter by decision definition categories that the parameter is\
        \ a substring of."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by decision definition names that the parameter is a substring\
        \ of."
    includeDecisionDefinitionsWithoutTenantId:
      id: "includeDecisionDefinitionsWithoutTenantId"
      type: null
      description: "Include decision definitions which belong to no tenant. Can be\
        \ used in combination with tenantIdIn. Value may only be true, as false is\
        \ the default behavior."
    decisionDefinitionId:
      id: "decisionDefinitionId"
      type: null
      description: "Filter by decision definition id."
    latestVersion:
      id: "latestVersion"
      type: null
      description: "Only include those decision definitions that are latest versions.\
        \ Value may only be true, as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A decision definition\
        \ must have one of the given tenant ids."
    decisionRequirementsDefinitionId:
      id: "decisionRequirementsDefinitionId"
      type: null
      description: "Filter by the id of the decision requirements definition this\
        \ decision definition belongs to."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    keyLike:
      id: "keyLike"
      type: null
      description: "Filter by decision definition keys that the parameter is a substring\
        \ of."
    name:
      id: "name"
      type: null
      description: "Filter by decision definition name."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include decision definitions which belong to no tenant. Value\
        \ may only be true, as false is the default behavior."
    category:
      id: "category"
      type: null
      description: "Filter by decision definition category. Exact match."
    withoutDecisionRequirementsDefinition:
      id: "withoutDecisionRequirementsDefinition"
      type: null
      description: "Only include decision definitions which does not belongs to any\
        \ decision requirements definition. Value may only be true, as false is the\
        \ default behavior."
    key:
      id: "key"
      type: null
      description: "Filter by decision definition key, i.e., the id in the DMN 1.0\
        \ XML. Exact match."
    decisionRequirementsDefinitionKey:
      id: "decisionRequirementsDefinitionKey"
      type: null
      description: "Filter by the key of the decision requirements definition this\
        \ decision definition belongs to."
- method: "GET"
  path: "/decision-definition"
  description: "Queries for decision definitions that fulfill given parameters. Parameters\
    \ may be\nthe properties of decision definitions, such as the name, key or version.\
    \  The\nsize of the result set can be retrieved by using the Get Decision Definition\
    \ Count\nrelref \"reference/rest/decision-definition/get-query-count.md\" >}})\
    \ method."
  resultDescription: "Queries for decision definitions that fulfill given parameters.\
    \ Parameters may be\nthe properties of decision definitions, such as the name,\
    \ key or version.  The\nsize of the result set can be retrieved by using the Get\
    \ Decision Definition Count\nrelref \"reference/rest/decision-definition/get-query-count.md\"\
    \ >}}) method."
  queryParameters:
    resourceNameLike:
      id: "resourceNameLike"
      type: null
      description: "Filter by names of those decision definition resources that the\
        \ parameter is a substring of."
    decisionDefinitionIdIn:
      id: "decisionDefinitionIdIn"
      type: null
      description: "Filter by decision definition ids."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    resourceName:
      id: "resourceName"
      type: null
      description: "Filter by the name of the decision definition resource. Exact\
        \ match."
    version:
      id: "version"
      type: null
      description: "Filter by decision definition version."
    categoryLike:
      id: "categoryLike"
      type: null
      description: "Filter by decision definition categories that the parameter is\
        \ a substring of."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by decision definition names that the parameter is a substring\
        \ of."
    includeDecisionDefinitionsWithoutTenantId:
      id: "includeDecisionDefinitionsWithoutTenantId"
      type: null
      description: "Include decision definitions which belong to no tenant. Can be\
        \ used in combination with tenantIdIn. Value may only be true, as false is\
        \ the default behavior."
    decisionDefinitionId:
      id: "decisionDefinitionId"
      type: null
      description: "Filter by decision definition id."
    latestVersion:
      id: "latestVersion"
      type: null
      description: "Only include those decision definitions that are latest versions.\
        \ Value may only be true, as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A decision definition\
        \ must have one of the given tenant ids."
    decisionRequirementsDefinitionId:
      id: "decisionRequirementsDefinitionId"
      type: null
      description: "Filter by the id of the decision requirements definition this\
        \ decision definition belongs to."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    keyLike:
      id: "keyLike"
      type: null
      description: "Filter by decision definition keys that the parameter is a substring\
        \ of."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    name:
      id: "name"
      type: null
      description: "Filter by decision definition name."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include decision definitions which belong to no tenant. Value\
        \ may only be true, as false is the default behavior."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are category, key, id, name, version, deploymentId and tenantId.\
        \ Must be used in conjunction with the sortOrder parameter."
    category:
      id: "category"
      type: null
      description: "Filter by decision definition category. Exact match."
    withoutDecisionRequirementsDefinition:
      id: "withoutDecisionRequirementsDefinition"
      type: null
      description: "Only include decision definitions which does not belongs to any\
        \ decision requirements definition. Value may only be true, as false is the\
        \ default behavior."
    key:
      id: "key"
      type: null
      description: "Filter by decision definition key, i.e., the id in the DMN 1.0\
        \ XML. Exact match."
    decisionRequirementsDefinitionKey:
      id: "decisionRequirementsDefinitionKey"
      type: null
      description: "Filter by the key of the decision requirements definition this\
        \ decision definition belongs to."
- method: "GET"
  path: "/decision-definition/{id}/xml"
  description: "Retrieves the DMN XML of a decision definition."
  resultDescription: "Retrieves the DMN XML of a decision definition."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the decision definition."
    key:
      id: "key"
      type: null
      description: "The key of the decision definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the decision definition belongs to."
- method: "GET"
  path: "/decision-definition/{id}"
  description: "Retrieves a decision definition by id, according to the `DecisionDefinition`\
    \ interface in the engine."
  resultDescription: "Retrieves a decision definition by id, according to the `DecisionDefinition`\
    \ interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the decision definition to be retrieved."
    key:
      id: "key"
      type: null
      description: "The key of the decision definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the decision definition belongs to."
- method: "POST"
  path: "/decision-definition/{id}/evaluate"
  description: "Evaluates a given decision and returns the result. The input values\
    \ of the decision have to be supplied in the request body."
  resultDescription: "Evaluates a given decision and returns the result. The input\
    \ values of the decision have to be supplied in the request body."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the decision definition to be evaluated."
    key:
      id: "key"
      type: null
      description: "The key of the decision definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the decision definition belongs to."
- method: "PUT"
  path: "/decision-definition/{id}/history-time-to-live"
  description: "Updates history time to live for decision definition. The field is\
    \ used within History cleanup"
  resultDescription: "Updates history time to live for decision definition. The field\
    \ is used within History cleanup"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the decision definition to change history time to live."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Decision definition with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/decision-requirements-definition/{id}/diagram"
  description: "Retrieves the diagram of a decision requirements definition."
  resultDescription: "Retrieves the diagram of a decision requirements definition."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the decision requirements definition."
    key:
      id: "key"
      type: null
      description: "The key of the decision requirements definition (the latest version\
        \ thereof) to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant to which the decision requirements definition\
        \ belongs to."
- method: "GET"
  path: "/decision-requirements-definition/count"
  description: "Requests the number of decision requirements definitions that fulfill\
    \ the query criteria.\nTakes the same filtering parameters as the Get Decision\
    \ Requirements Definitions\n\"reference/rest/decision-requirements-definition/get-query.md\"\
    \ >}}) method."
  resultDescription: "Requests the number of decision requirements definitions that\
    \ fulfill the query criteria.\nTakes the same filtering parameters as the Get\
    \ Decision Requirements Definitions\n\"reference/rest/decision-requirements-definition/get-query.md\"\
    \ >}}) method."
  queryParameters:
    resourceNameLike:
      id: "resourceNameLike"
      type: null
      description: "Filter by names of those decision requirements definition resources\
        \ that the parameter is a substring of."
    resourceName:
      id: "resourceName"
      type: null
      description: "Filter by the name of the decision requirements definition resource.\
        \ Exact match."
    version:
      id: "version"
      type: null
      description: "Filter by decision requirements definition version."
    includeDecisionRequirementsDefinitionsWithoutTenantId:
      id: "includeDecisionRequirementsDefinitionsWithoutTenantId"
      type: null
      description: "Include decision requirements definitions which belong to no tenant.\
        \ Can be used in combination with tenantIdIn. Value may only be true, as false\
        \ is the default behavior."
    decisionRequirementsDefinitionIdIn:
      id: "decisionRequirementsDefinitionIdIn"
      type: null
      description: "Filter by decision requirements definition ids."
    categoryLike:
      id: "categoryLike"
      type: null
      description: "Filter by decision requirements definition categories that the\
        \ parameter is a substring of."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by decision requirements definition names that the parameter\
        \ is a substring of."
    latestVersion:
      id: "latestVersion"
      type: null
      description: "Only include those decision requirements definitions that are\
        \ latest versions. Value may only be true, as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A decision requirements\
        \ definition must have one of the given tenant ids."
    decisionRequirementsDefinitionId:
      id: "decisionRequirementsDefinitionId"
      type: null
      description: "Filter by decision requirements definition id."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    keyLike:
      id: "keyLike"
      type: null
      description: "Filter by decision requirements definition keys that the parameter\
        \ is a substring of."
    name:
      id: "name"
      type: null
      description: "Filter by decision requirements definition name."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include decision requirements definitions which belong to\
        \ no tenant. Value may only be true, as false is the default behavior."
    category:
      id: "category"
      type: null
      description: "Filter by decision requirements definition category. Exact match."
    key:
      id: "key"
      type: null
      description: "Filter by decision requirements definition key, i.e., the id in\
        \ the DMN 1.1 XML. Exact match."
- method: "GET"
  path: "/decision-requirements-definition"
  description: "Queries for decision requirements definitions that fulfill given parameters.\
    \ Parameters may be\nthe properties of decision requirements definitions, such\
    \ as the name, key or version.  The\nsize of the result set can be retrieved by\
    \ using the Get Decision Requirements Definition Count\nrelref \"reference/rest/decision-requirements-definition/get-query-count.md\"\
    \ >}}) method."
  resultDescription: "Queries for decision requirements definitions that fulfill given\
    \ parameters. Parameters may be\nthe properties of decision requirements definitions,\
    \ such as the name, key or version.  The\nsize of the result set can be retrieved\
    \ by using the Get Decision Requirements Definition Count\nrelref \"reference/rest/decision-requirements-definition/get-query-count.md\"\
    \ >}}) method."
  queryParameters:
    resourceNameLike:
      id: "resourceNameLike"
      type: null
      description: "Filter by names of those decision requirements definition resources\
        \ that the parameter is a substring of."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    resourceName:
      id: "resourceName"
      type: null
      description: "Filter by the name of the decision requirements definition resource.\
        \ Exact match."
    version:
      id: "version"
      type: null
      description: "Filter by decision requirements definition version."
    includeDecisionRequirementsDefinitionsWithoutTenantId:
      id: "includeDecisionRequirementsDefinitionsWithoutTenantId"
      type: null
      description: "Include decision requirements definitions which belong to no tenant.\
        \ Can be used in combination with tenantIdIn. Value may only be true, as false\
        \ is the default behavior."
    decisionRequirementsDefinitionIdIn:
      id: "decisionRequirementsDefinitionIdIn"
      type: null
      description: "Filter by decision requirements definition ids."
    categoryLike:
      id: "categoryLike"
      type: null
      description: "Filter by decision requirements definition categories that the\
        \ parameter is a substring of."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by decision requirements definition names that the parameter\
        \ is a substring of."
    latestVersion:
      id: "latestVersion"
      type: null
      description: "Only include those decision requirements definitions that are\
        \ latest versions. Value may only be true, as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A decision requirements\
        \ definition must have one of the given tenant ids."
    decisionRequirementsDefinitionId:
      id: "decisionRequirementsDefinitionId"
      type: null
      description: "Filter by decision requirements definition id."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    keyLike:
      id: "keyLike"
      type: null
      description: "Filter by decision requirements definition keys that the parameter\
        \ is a substring of."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    name:
      id: "name"
      type: null
      description: "Filter by decision requirements definition name."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include decision requirements definitions which belong to\
        \ no tenant. Value may only be true, as false is the default behavior."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are category, key, id, name, version, deploymentId and tenantId.\
        \ Must be used in conjunction with the sortOrder parameter."
    category:
      id: "category"
      type: null
      description: "Filter by decision requirements definition category. Exact match."
    key:
      id: "key"
      type: null
      description: "Filter by decision requirements definition key, i.e., the id in\
        \ the DMN 1.1 XML. Exact match."
- method: "GET"
  path: "/decision-requirements-definition/{id}/xml"
  description: "Retrieves the DMN XML of a decision requirements definition."
  resultDescription: "Retrieves the DMN XML of a decision requirements definition."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the decision requirements definition."
    key:
      id: "key"
      type: null
      description: "The key of the decision requirements definition (the latest version\
        \ thereof) to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant to which the decision requirements definition\
        \ belongs to."
- method: "GET"
  path: "/decision-requirements-definition/{id}"
  description: "Retrieves a decision requirements definition according to the `DecisionRequirementsDefinition`\
    \ interface in the engine."
  resultDescription: "Retrieves a decision requirements definition according to the\
    \ `DecisionRequirementsDefinition` interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the decision requirements definition to be retrieved."
    key:
      id: "key"
      type: null
      description: "The key of the decision requirements definition (the latest version\
        \ thereof) to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant to which the decision requirements definition\
        \ belongs to."
- method: "DELETE"
  path: "/deployment/{id}"
  description: "Deletes a deployment by id."
  resultDescription: "Deletes a deployment by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the deployment to be deleted."
  queryParameters:
    skipIoMappings:
      id: "skipIoMappings"
      type: null
      description: "true, if all input/output mappings should not be invoked."
    cascade:
      id: "cascade"
      type: null
      description: "true, if all process instances, historic process instances and\
        \ jobs for this deployment should be deleted."
    skipCustomListeners:
      id: "skipCustomListeners"
      type: null
      description: "true, if only the built-in ExecutionListeners should be notified\
        \ with the end event."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Deployment with id 'aDeploymentId' does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/deployment/count"
  description: "Queries for the number of deployments that fulfill given parameters.\
    \ Takes the same parameters as the Get Deployments"
  resultDescription: "Queries for the number of deployments that fulfill given parameters.\
    \ Takes the same parameters as the Get Deployments"
  queryParameters:
    before:
      id: "before"
      type: null
      description: "Restricts to all deployments before the given date. The date must\
        \ have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    source:
      id: "source"
      type: null
      description: "Filter by the deployment source."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by the deployment name that the parameter is a substring\
        \ of. The parameter can include the wildcard % to express like-strategy such\
        \ as: starts with (%name), ends with (name%) or contains (%name%)."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A deployment must\
        \ have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    name:
      id: "name"
      type: null
      description: "Filter by the deployment name. Exact match."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include deployments which belong to no tenant. Value may\
        \ only be true, as false is the default behavior."
    withoutSource:
      id: "withoutSource"
      type: null
      description: "Filter by the deployment source whereby source is equal to null."
    includeDeploymentsWithoutTenantId:
      id: "includeDeploymentsWithoutTenantId"
      type: null
      description: "Include deployments which belong to no tenant. Can be used in\
        \ combination with tenantIdIn. Value may only be true, as false is the default\
        \ behavior."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are id, name and deploymentTime. Must be used in conjunction with\
        \ the sortOrder parameter."
    id:
      id: "id"
      type: null
      description: "Filter by deployment id."
    after:
      id: "after"
      type: null
      description: "Restricts to all deployments after the given date. The date must\
        \ have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/deployment"
  description: "Queries for deployments that fulfill given parameters. Parameters\
    \ may be the\nproperties of deployments, such as the id or name or a range of\
    \ the deployment time.\nThe size of the result set\ncan be retrieved by using\
    \ the Get Deployment count"
  resultDescription: "Queries for deployments that fulfill given parameters. Parameters\
    \ may be the\nproperties of deployments, such as the id or name or a range of\
    \ the deployment time.\nThe size of the result set\ncan be retrieved by using\
    \ the Get Deployment count"
  queryParameters:
    before:
      id: "before"
      type: null
      description: "Restricts to all deployments before the given date. The date must\
        \ have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    source:
      id: "source"
      type: null
      description: "Filter by the deployment source."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by the deployment name that the parameter is a substring\
        \ of. The parameter can include the wildcard % to express like-strategy such\
        \ as: starts with (%name), ends with (name%) or contains (%name%)."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A deployment must\
        \ have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    name:
      id: "name"
      type: null
      description: "Filter by the deployment name. Exact match."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include deployments which belong to no tenant. Value may\
        \ only be true, as false is the default behavior."
    withoutSource:
      id: "withoutSource"
      type: null
      description: "Filter by the deployment source whereby source is equal to null."
    includeDeploymentsWithoutTenantId:
      id: "includeDeploymentsWithoutTenantId"
      type: null
      description: "Include deployments which belong to no tenant. Can be used in\
        \ combination with tenantIdIn. Value may only be true, as false is the default\
        \ behavior."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are id, name, deploymentTime and tenantId. Must be used in conjunction\
        \ with the sortOrder parameter."
    id:
      id: "id"
      type: null
      description: "Filter by deployment id."
    after:
      id: "after"
      type: null
      description: "Restricts to all deployments after the given date. The date must\
        \ have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/deployment/{id}/resources/{resourceId}/data"
  description: "Retrieves the binary content of a deployment resource for the given\
    \ deployment by id."
  resultDescription: "Retrieves the binary content of a deployment resource for the\
    \ given deployment by id."
  pathParameters:
    resourceId:
      id: "resourceId"
      type: null
      description: "The id of the deployment resource."
    id:
      id: "id"
      type: null
      description: "The id of the deployment."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful. The media type of the response depends on\
        \ the filename. For example a process.bpmn resource will have the media type\
        \ application/xml. If the filetype is unknown it defaults to application/octet-stream."
    404:
      id: "404"
      type: null
      description: "Deployment Resource with given resource id or deployment id does\
        \ not exist. See the Introduction for the error response format."
- method: "GET"
  path: "/deployment/{id}/resources/{resourceId}"
  description: "Retrieves a deployment resource by resource id for the given deployment."
  resultDescription: "Retrieves a deployment resource by resource id for the given\
    \ deployment."
  pathParameters:
    resourceId:
      id: "resourceId"
      type: null
      description: "The id of the deployment resource."
    id:
      id: "id"
      type: null
      description: "The id of the deployment."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Deployment Resource with given resource id or deployment id does\
        \ not exist. See the Introduction for the error response format."
- method: "GET"
  path: "/deployment/{id}/resources"
  description: "Retrieves all deployment resources of a given deployment."
  resultDescription: "Retrieves all deployment resources of a given deployment."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the deployment to retrieve the deployment resources\
        \ for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Deployment resources for the given deployment do not exist. See\
        \ the Introduction for the error response format."
- method: "GET"
  path: "/deployment/{id}"
  description: "Retrieves a deployment by id, according to the `Deployment` interface\
    \ of the engine."
  resultDescription: "Retrieves a deployment by id, according to the `Deployment`\
    \ interface of the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the deployment."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Deployment with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/deployment/create"
  description: "Creates a deployment."
  resultDescription: "Creates a deployment."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/deployment/{id}/redeploy"
  description: "Re-deploys an existing deployment."
  resultDescription: "Re-deploys an existing deployment."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the deployment to re-deploy."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Deployment or a deployment resource for the given deployment does\
        \ not exist. See the Introduction for the error response format."
- method: "GET"
  path: "/engine"
  description: "Retrieves the names of all process engines available on your platform."
  resultDescription: "Retrieves the names of all process engines available on your\
    \ platform."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/execution/count"
  description: "Queries for the number of executions that fulfill given parameters.\n\
    Takes the same parameters as the Get Executions"
  resultDescription: "Queries for the number of executions that fulfill given parameters.\n\
    Takes the same parameters as the Get Executions"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the process definition the executions run on."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by the id of the process instance the execution belongs\
        \ to."
    variables:
      id: "variables"
      type: null
      description: "Only include executions that have variables with certain values.\
        \ Variable filtering expressions are comma-separated and are structured as\
        \ follows: A valid parameter value has the form key_operator_value. key is\
        \ the variable name, operator is the comparison operator to be used and value\
        \ the variable value. Note: Values are always treated as String objects on\
        \ server side. Valid operator values are: eq - equal to; neq - not equal to;\
        \ gt - greater than; gteq - greater than or equal to; lt - lower than; lteq\
        \ - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Filter by the incident message. Exact match."
    incidentType:
      id: "incidentType"
      type: null
      description: "Filter by the incident type. See the User Guide for a list of\
        \ incident types."
    active:
      id: "active"
      type: null
      description: "Only include active executions. Value may only be true, as false\
        \ is the default behavior."
    signalEventSubscriptionName:
      id: "signalEventSubscriptionName"
      type: null
      description: "Select only those executions that expect a signal of the given\
        \ name."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended executions. Value may only be true, as\
        \ false is the default behavior."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by the key of the process definition the executions run\
        \ on."
    messageEventSubscriptionName:
      id: "messageEventSubscriptionName"
      type: null
      description: "Select only those executions that expect a message of the given\
        \ name."
    activityId:
      id: "activityId"
      type: null
      description: "Filter by the id of the activity the execution currently executes."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. An execution must\
        \ have one of the given tenant ids."
    businessKey:
      id: "businessKey"
      type: null
      description: "Filter by the business key of the process instances the executions\
        \ belong to."
    incidentId:
      id: "incidentId"
      type: null
      description: "Filter by the incident id."
    processVariables:
      id: "processVariables"
      type: null
      description: "Only include executions that belong to a process instance with\
        \ variables with certain values. Variable filtering expressions are comma-separated\
        \ and are structured as follows: A valid parameter value has the form key_operator_value.\
        \ key is the variable name, operator is the comparison operator to be used\
        \ and value the variable value. Note: Values are always treated as String\
        \ objects on server side. Valid operator values are: eq - equal to; neq -\
        \ not equal to. key and value may not contain underscore or comma characters."
    incidentMessageLike:
      id: "incidentMessageLike"
      type: null
      description: "Filter by the incident message that the parameter is a substring\
        \ of."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/execution"
  description: "Queries for the executions that fulfill given parameters.\nParameters\
    \ may be static as well as dynamic runtime properties of executions.\nThe size\
    \ of the result set can be retrieved by using the Get Execution Count"
  resultDescription: "Queries for the executions that fulfill given parameters.\n\
    Parameters may be static as well as dynamic runtime properties of executions.\n\
    The size of the result set can be retrieved by using the Get Execution Count"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the process definition the executions run on."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by the id of the process instance the execution belongs\
        \ to."
    variables:
      id: "variables"
      type: null
      description: "Only include executions that have variables with certain values.\
        \ Variable filtering expressions are comma-separated and are structured as\
        \ follows: A valid parameter value has the form key_operator_value. key is\
        \ the variable name, operator is the comparison operator to be used and value\
        \ the variable value. Note: Values are always treated as String objects on\
        \ server side. Valid operator values are: eq - equal to; neq - not equal to;\
        \ gt - greater than; gteq - greater than or equal to; lt - lower than; lteq\
        \ - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Filter by the incident message. Exact match."
    incidentType:
      id: "incidentType"
      type: null
      description: "Filter by the incident type. See the User Guide for a list of\
        \ incident types."
    active:
      id: "active"
      type: null
      description: "Only include active executions. Value may only be true, as false\
        \ is the default behavior."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    signalEventSubscriptionName:
      id: "signalEventSubscriptionName"
      type: null
      description: "Select only those executions that expect a signal of the given\
        \ name."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended executions. Value may only be true, as\
        \ false is the default behavior."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by the key of the process definition the executions run\
        \ on."
    messageEventSubscriptionName:
      id: "messageEventSubscriptionName"
      type: null
      description: "Select only those executions that expect a message of the given\
        \ name."
    activityId:
      id: "activityId"
      type: null
      description: "Filter by the id of the activity the execution currently executes."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. An execution must\
        \ have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    businessKey:
      id: "businessKey"
      type: null
      description: "Filter by the business key of the process instances the executions\
        \ belong to."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are instanceId, definitionKey, definitionId and tenantId. Must be\
        \ used in conjunction with the sortOrder parameter."
    incidentId:
      id: "incidentId"
      type: null
      description: "Filter by the incident id."
    processVariables:
      id: "processVariables"
      type: null
      description: "Only include executions that belong to a process instance with\
        \ variables with certain values. Variable filtering expressions are comma-separated\
        \ and are structured as follows: A valid parameter value has the form key_operator_value.\
        \ key is the variable name, operator is the comparison operator to be used\
        \ and value the variable value. Note: Values are always treated as String\
        \ objects on server side. Valid operator values are: eq - equal to; neq -\
        \ not equal to. key and value may not contain underscore or comma characters."
    incidentMessageLike:
      id: "incidentMessageLike"
      type: null
      description: "Filter by the incident message that the parameter is a substring\
        \ of."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/execution/{id}"
  description: "Retrieves an execution by id, according to the `Execution` interface\
    \ in the engine."
  resultDescription: "Retrieves an execution by id, according to the `Execution` interface\
    \ in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the execution to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Execution with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "DELETE"
  path: "/execution/{id}/localVariables/{varName}"
  description: "Deletes a variable in the context of a given execution by id. Deletion\
    \ does not propagate upwards in the execution hierarchy."
  resultDescription: "Deletes a variable in the context of a given execution by id.\
    \ Deletion does not propagate upwards in the execution hierarchy."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to delete."
    id:
      id: "id"
      type: null
      description: "The id of the execution to delete the variable from."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/execution/{id}/localVariables/{varName}/data"
  description: "Retrieves a binary variable from the context of a given execution\
    \ by id. Does not traverse the parent execution hierarchy. Applicable for byte\
    \ array and file variables."
  resultDescription: "Retrieves a binary variable from the context of a given execution\
    \ by id. Does not traverse the parent execution hierarchy. Applicable for byte\
    \ array and file variables."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the execution to retrieve the variable from."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Variable instance with given id exists but is not a binary variable.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Variable instance with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/execution/{id}/localVariables/{varName}"
  description: "Retrieves a variable from the context of a given execution by id.\
    \ Does not traverse the parent execution hierarchy."
  resultDescription: "Retrieves a variable from the context of a given execution by\
    \ id. Does not traverse the parent execution hierarchy."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the execution to retrieve the variable from."
  queryParameters:
    deserializeValue:
      id: "deserializeValue"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/execution/{id}/localVariables"
  description: "Retrieves all variables of a given execution by id."
  resultDescription: "Retrieves all variables of a given execution by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the execution to retrieve the variables from."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "Execution with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "POST"
  path: "/execution/{id}/localVariables"
  description: "Updates or deletes the variables in the context of an execution by\
    \ id. The updates do not propagate upwards in the execution hierarchy.\nUpdates\
    \ precede deletions. So, if a variable is updated AND deleted, the deletion overrides\
    \ the update."
  resultDescription: "Updates or deletes the variables in the context of an execution\
    \ by id. The updates do not propagate upwards in the execution hierarchy.\nUpdates\
    \ precede deletions. So, if a variable is updated AND deleted, the deletion overrides\
    \ the update."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the execution to set variables for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "Update or delete could not be executed, for example because the\
        \ execution does not exist."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/execution/{id}/localVariables/{varName}/data"
  description: "Sets the serialized value for a binary variable or the binary value\
    \ for a file variable in the context of a given execution by id."
  resultDescription: "Sets the serialized value for a binary variable or the binary\
    \ value for a file variable in the context of a given execution by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the execution to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if no filename\
        \ is set. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/execution/{id}/localVariables/{varName}"
  description: "Sets a variable in the context of a given execution by id. Update\
    \ does not propagate upwards in the execution hierarchy."
  resultDescription: "Sets a variable in the context of a given execution by id. Update\
    \ does not propagate upwards in the execution hierarchy."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the execution to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/execution/{id}/messageSubscriptions/{messageName}"
  description: "Retrieves a message event subscription for a given execution by id\
    \ and a message name."
  resultDescription: "Retrieves a message event subscription for a given execution\
    \ by id and a message name."
  pathParameters:
    messageName:
      id: "messageName"
      type: null
      description: "The name of the message that the subscription corresponds to."
    id:
      id: "id"
      type: null
      description: "The id of the execution that holds the subscription."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "A message subscription for the given name and execution does not\
        \ exist. This may either mean that the execution does not exist, or that it\
        \ is not subscribed on such a message. See the Introduction for the error\
        \ response format."
- method: "POST"
  path: "/execution/{id}/messageSubscriptions/{messageName}/trigger"
  description: "Delivers a message to a specific execution by id, to trigger an existing\
    \ message event subscription. Inject process variables as the message's payload."
  resultDescription: "Delivers a message to a specific execution by id, to trigger\
    \ an existing message event subscription. Inject process variables as the message's\
    \ payload."
  pathParameters:
    messageName:
      id: "messageName"
      type: null
      description: "The name of the message that the addressed subscription corresponds\
        \ to."
    id:
      id: "id"
      type: null
      description: "The id of the execution to submit the message to."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "The addressed execution has no pending message subscriptions for\
        \ the given message. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/execution/count"
  description: "Queries for the number of executions that fulfill given parameters.\
    \ This method takes the same message body as the Get Executions (POST)Get Execution\
    \ Count"
  resultDescription: "Queries for the number of executions that fulfill given parameters.\
    \ This method takes the same message body as the Get Executions (POST)Get Execution\
    \ Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/execution"
  description: "Queries for executions that fulfill given parameters through a JSON\
    \ object.\nThis method is slightly more powerful than the Get Executions\nto filter\
    \ by multiple instance and execution variables of types `String`, `Number` or\
    \ `Boolean`."
  resultDescription: "Queries for executions that fulfill given parameters through\
    \ a JSON object.\nThis method is slightly more powerful than the Get Executions\n\
    to filter by multiple instance and execution variables of types `String`, `Number`\
    \ or `Boolean`."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/execution/{id}/signal"
  description: "Signals an execution by id. Can for example be used to explicitly\
    \ skip user tasks or signal asynchronous continuations."
  resultDescription: "Signals an execution by id. Can for example be used to explicitly\
    \ skip user tasks or signal asynchronous continuations."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the execution to signal."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/external-task/fetchAndLock"
  description: "Fetches and locks a specific number of external tasks for execution\
    \ by a worker. Query can be restricted to specific task topics and for each task\
    \ topic an individual lock time can be provided."
  resultDescription: "Fetches and locks a specific number of external tasks for execution\
    \ by a worker. Query can be restricted to specific task topics and for each task\
    \ topic an individual lock time can be provided."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "Returned if fetching is not successful, for example due to missing\
        \ parameters. See the Introduction for the error response format."
- method: "GET"
  path: "/external-task/count"
  description: "Queries for the number of external tasks that fulfill given parameters.\n\
    Takes the same parameters as the Get External Tasks"
  resultDescription: "Queries for the number of external tasks that fulfill given\
    \ parameters.\nTakes the same parameters as the Get External Tasks"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by the id of the process instance that an external task\
        \ belongs to."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the id of the process definition that an external task\
        \ belongs to."
    workerId:
      id: "workerId"
      type: null
      description: "Filter by the id of the worker that the task was most recently\
        \ locked by."
    withRetriesLeft:
      id: "withRetriesLeft"
      type: null
      description: "Only include external tasks that have a positive (> 0) number\
        \ of retries (or null). Value may only be true, as false matches any external\
        \ task."
    notLocked:
      id: "notLocked"
      type: null
      description: "Only include external tasks that are currently not locked (i.e.,\
        \ they have no lock or it has expired). Value may only be true, as false matches\
        \ any external task."
    lockExpirationAfter:
      id: "lockExpirationAfter"
      type: null
      description: "Restrict to external tasks that have a lock that expires after\
        \ a given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
    active:
      id: "active"
      type: null
      description: "Only include active tasks. Value may only be true, as false matches\
        \ any external task."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended tasks. Value may only be true, as false\
        \ matches any external task."
    activityId:
      id: "activityId"
      type: null
      description: "Filter by the id of the activity that an external task is created\
        \ for."
    executionId:
      id: "executionId"
      type: null
      description: "Filter by the id of the execution that an external task belongs\
        \ to."
    priorityLowerThanOrEquals:
      id: "priorityLowerThanOrEquals"
      type: null
      description: "Only include jobs with a priority lower than or equal to the given\
        \ value. Value must be a valid long value."
    priorityHigherThanOrEquals:
      id: "priorityHigherThanOrEquals"
      type: null
      description: "Only include jobs with a priority higher than or equal to the\
        \ given value. Value must be a valid long value."
    lockExpirationBefore:
      id: "lockExpirationBefore"
      type: null
      description: "Restrict to external tasks that have a lock that expires before\
        \ a given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. An external task\
        \ must have one of the given tenant ids."
    topicName:
      id: "topicName"
      type: null
      description: "Filter by an external task topic."
    noRetriesLeft:
      id: "noRetriesLeft"
      type: null
      description: "Only include external tasks that have 0 retries. Value may only\
        \ be true, as false matches any external task."
    externalTaskId:
      id: "externalTaskId"
      type: null
      description: "Filter by an external task's id."
    locked:
      id: "locked"
      type: null
      description: "Only include external tasks that are currently locked (i.e., they\
        \ have a lock time and it has not expired). Value may only be true, as false\
        \ matches any external task."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Filter by the comma-separated list of ids of the activities that\
        \ an external task is created for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/external-task"
  description: "Queries for the external tasks that fulfill given parameters.\nParameters\
    \ may be static as well as dynamic runtime properties of executions.\nThe size\
    \ of the result set can be retrieved by using the Get External Task Count"
  resultDescription: "Queries for the external tasks that fulfill given parameters.\n\
    Parameters may be static as well as dynamic runtime properties of executions.\n\
    The size of the result set can be retrieved by using the Get External Task Count"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by the id of the process instance that an external task\
        \ belongs to."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the id of the process definition that an external task\
        \ belongs to."
    workerId:
      id: "workerId"
      type: null
      description: "Filter by the id of the worker that the task was most recently\
        \ locked by."
    withRetriesLeft:
      id: "withRetriesLeft"
      type: null
      description: "Only include external tasks that have a positive (> 0) number\
        \ of retries (or null). Value may only be true, as false matches any external\
        \ task."
    notLocked:
      id: "notLocked"
      type: null
      description: "Only include external tasks that are currently not locked (i.e.,\
        \ they have no lock or it has expired). Value may only be true, as false matches\
        \ any external task."
    lockExpirationAfter:
      id: "lockExpirationAfter"
      type: null
      description: "Restrict to external tasks that have a lock that expires after\
        \ a given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
    active:
      id: "active"
      type: null
      description: "Only include active tasks. Value may only be true, as false matches\
        \ any external task."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended tasks. Value may only be true, as false\
        \ matches any external task."
    activityId:
      id: "activityId"
      type: null
      description: "Filter by the id of the activity that an external task is created\
        \ for."
    executionId:
      id: "executionId"
      type: null
      description: "Filter by the id of the execution that an external task belongs\
        \ to."
    priorityLowerThanOrEquals:
      id: "priorityLowerThanOrEquals"
      type: null
      description: "Only include jobs with a priority lower than or equal to the given\
        \ value. Value must be a valid long value."
    priorityHigherThanOrEquals:
      id: "priorityHigherThanOrEquals"
      type: null
      description: "Only include jobs with a priority higher than or equal to the\
        \ given value. Value must be a valid long value."
    lockExpirationBefore:
      id: "lockExpirationBefore"
      type: null
      description: "Restrict to external tasks that have a lock that expires before\
        \ a given date. The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. An external task\
        \ must have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    topicName:
      id: "topicName"
      type: null
      description: "Filter by an external task topic."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are id, lockExpirationTime, processInstanceId, processDefinitionId,\
        \ processDefinitionKey, tenantId and taskPriority. Must be used in conjunction\
        \ with the sortOrder parameter."
    noRetriesLeft:
      id: "noRetriesLeft"
      type: null
      description: "Only include external tasks that have 0 retries. Value may only\
        \ be true, as false matches any external task."
    externalTaskId:
      id: "externalTaskId"
      type: null
      description: "Filter by an external task's id."
    locked:
      id: "locked"
      type: null
      description: "Only include external tasks that are currently locked (i.e., they\
        \ have a lock time and it has not expired). Value may only be true, as false\
        \ matches any external task."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Filter by the comma-separated list of ids of the activities that\
        \ an external task is created for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/external-task/{id}"
  description: "Retrieves an external task by id, corresponding to the `ExternalTask`\
    \ interface in the engine."
  resultDescription: "Retrieves an external task by id, corresponding to the `ExternalTask`\
    \ interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the external task to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "External task with the given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/external-task/{id}/bpmnError"
  description: "Reports a business error in the context of a running external task\
    \ by id. The error code must be specified to identify the BPMN error handler."
  resultDescription: "Reports a business error in the context of a running external\
    \ task by id. The error code must be specified to identify the BPMN error handler."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the external task in which context a BPMN error is reported."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if the task's most recent lock was not acquired by the\
        \ provided worker. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "Returned if the corresponding process instance could not be resumed\
        \ successfully. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Returned if the task does not exist. This could indicate a wrong\
        \ task id as well as a cancelled task, e.g., due to a caught BPMN boundary\
        \ event. See the Introduction for the error response format."
- method: "POST"
  path: "/external-task/{id}/complete"
  description: "Completes an external task by id and updates process variables."
  resultDescription: "Completes an external task by id and updates process variables."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to complete."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if the task's most recent lock was not acquired by the\
        \ provided worker. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "Returned if the corresponding process instance could not be resumed\
        \ successfully. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Returned if the task does not exist. This could indicate a wrong\
        \ task id as well as a cancelled task, e.g., due to a caught BPMN boundary\
        \ event. See the Introduction for the error response format."
- method: "POST"
  path: "/external-task/{id}/failure"
  description: "Reports a failure to execute an external task by id. A number of retries\
    \ and a timeout until the task can be retried can be specified. If retries are\
    \ set to 0, an incident for this task is created."
  resultDescription: "Reports a failure to execute an external task by id. A number\
    \ of retries and a timeout until the task can be retried can be specified. If\
    \ retries are set to 0, an incident for this task is created."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the external task to report a failure for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if the task's most recent lock was not acquired by the\
        \ provided worker. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "Returned if the corresponding process instance could not be resumed\
        \ successfully. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Returned if the task does not exist. This could indicate a wrong\
        \ task id as well as a cancelled task, e.g., due to a caught BPMN boundary\
        \ event. See the Introduction for the error response format."
- method: "POST"
  path: "/external-task/count"
  description: "Queries for the number of external tasks that fulfill given parameters.\
    \ This method takes the same message body as the Get External Tasks (POST)"
  resultDescription: "Queries for the number of external tasks that fulfill given\
    \ parameters. This method takes the same message body as the Get External Tasks\
    \ (POST)"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/external-task"
  description: "Queries for external tasks that fulfill given parameters in the form\
    \ of a JSON object.\nThis method is slightly more powerful than the Get External\
    \ Tasks"
  resultDescription: "Queries for external tasks that fulfill given parameters in\
    \ the form of a JSON object.\nThis method is slightly more powerful than the Get\
    \ External Tasks"
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/external-task/retries-async"
  description: "Sets the number of retries left to execute external tasks by id asynchronously.\
    \ If retries are set to 0, an incident is created."
  resultDescription: "Sets the number of retries left to execute external tasks by\
    \ id asynchronously. If retries are set to 0, an incident is created."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "If neither externalTaskIds nor externalTaskQuery are present or\
        \ externalTaskIds contains null value or the number of retries is negative,\
        \ an exception of type InvalidRequestException is returned. See the Introduction\
        \ for the error response format."
    404:
      id: "404"
      type: null
      description: "Returned if the task does not exist. This could indicate a wrong\
        \ task id as well as a cancelled task, e.g., due to a caught BPMN boundary\
        \ event. See the Introduction for the error response format."
- method: "POST"
  path: "/external-task/{id}/unlock"
  description: "Unlocks an external task by id. Clears the task's lock expiration\
    \ time and worker id."
  resultDescription: "Unlocks an external task by id. Clears the task's lock expiration\
    \ time and worker id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the external task to unlock."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Returned if the task does not exist. This could indicate a wrong\
        \ task id as well as a cancelled task, e.g., due to a caught BPMN boundary\
        \ event. See the Introduction for the error response format."
- method: "PUT"
  path: "/external-task/{id}/priority"
  description: "Sets the priority of an existing external task by id. The default\
    \ value of a priority is 0."
  resultDescription: "Sets the priority of an existing external task by id. The default\
    \ value of a priority is 0."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the external task to set the priority for."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Returned if the task does not exist. This could indicate a wrong\
        \ task id as well as a cancelled task, e.g., due to a caught BPMN boundary\
        \ event. See the Introduction for the error response format."
- method: "PUT"
  path: "/external-task/{id}/retries"
  description: "Sets the number of retries left to execute an external task by id.\
    \ If retries are set to 0, an incident is created."
  resultDescription: "Sets the number of retries left to execute an external task\
    \ by id. If retries are set to 0, an incident is created."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the external task to set the number of retries for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "In case the number of retries is negative, an exception of type\
        \ InvalidRequestException is returned. See the Introduction for the error\
        \ response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Returned if the task does not exist. This could indicate a wrong\
        \ task id as well as a cancelled task, e.g., due to a caught BPMN boundary\
        \ event. See the Introduction for the error response format."
- method: "DELETE"
  path: "/filter/{id}"
  description: "Deletes a filter by id."
  resultDescription: "Deletes a filter by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the filter to be deleted."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The authenticated user is unauthorized to delete this filter.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Filter cannot be found. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/filter/{id}/count"
  description: "Executes the saved query of the filter by id and returns the count."
  resultDescription: "Executes the saved query of the filter by id and returns the\
    \ count."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the filter to execute."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The authenticated user is unauthorized to read this filter. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Filter with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/filter/{id}/list"
  description: "Executes the saved query of the filter by id and returns the result\
    \ list."
  resultDescription: "Executes the saved query of the filter by id and returns the\
    \ result list."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the filter to execute."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful. In case of an expected HAL response."
    403:
      id: "403"
      type: null
      description: "The authenticated user is unauthorized to read this filter. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Filter with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/filter/{id}/singleResult"
  description: "Executes the saved query of the filter by id and returns the single\
    \ result."
  resultDescription: "Executes the saved query of the filter by id and returns the\
    \ single result."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the filter to execute."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful. In case of an expected HAL response."
    400:
      id: "400"
      type: null
      description: "The executed filter returned more than one single result. See\
        \ the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful, but the result was empty."
    403:
      id: "403"
      type: null
      description: "The authenticated user is unauthorized to read this filter. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Filter with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/filter/count"
  description: "Retrieves the number of filters that fulfill a provided query. Corresponds\
    \ to the size of the result set\nwhen using the Get Filters"
  resultDescription: "Retrieves the number of filters that fulfill a provided query.\
    \ Corresponds to the size of the result set\nwhen using the Get Filters"
  queryParameters:
    filterId:
      id: "filterId"
      type: null
      description: "Restrict to filters that have the given id."
    owner:
      id: "owner"
      type: null
      description: "Restrict to filters that the given user owns."
    nameLike:
      id: "nameLike"
      type: null
      description: "Restrict to filters that have a name with the given parameter\
        \ value as substring."
    name:
      id: "name"
      type: null
      description: "Restrict to filters that have the given name."
    resourceType:
      id: "resourceType"
      type: null
      description: "Restrict to filters that have the given resource type, e.g., Task."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/filter"
  description: "Queries for a list of filters using a list of parameters. The size\
    \ of the result set can be retrieved\nby using the Get Filter Count"
  resultDescription: "Queries for a list of filters using a list of parameters. The\
    \ size of the result set can be retrieved\nby using the Get Filter Count"
  queryParameters:
    filterId:
      id: "filterId"
      type: null
      description: "Filter by the id of the filter."
    owner:
      id: "owner"
      type: null
      description: "Filter by the user id of the owner of the filter."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by the name that the parameter is a substring of."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    name:
      id: "name"
      type: null
      description: "Filter by the name of the filter."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are filterId, firstName, lastName and email. Must be used in conjunction\
        \ with the sortOrder parameter."
    resourceType:
      id: "resourceType"
      type: null
      description: "Filter by the resource type of the filter, e.g., Task."
    itemCount:
      id: "itemCount"
      type: null
      description: "If set to true, each filter result will contain an itemCount property\
        \ with the number of items matched by the filter itself."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy is specified. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/filter/{id}"
  description: "Retrieves a single filter by id, according to the `Filter` interface\
    \ in the engine."
  resultDescription: "Retrieves a single filter by id, according to the `Filter` interface\
    \ in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the filter to be retrieved."
  queryParameters:
    itemCount:
      id: "itemCount"
      type: null
      description: "If set to true, each filter result will contain an itemCount property\
        \ with the number of items matched by the filter itself."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The authenticated user is unauthorized to read this filter. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Filter with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "OPTIONS"
  path: "/filter"
  description: "The `/filter` resource supports two custom OPTIONS requests, one for\
    \ the resource as such and one for individual filter instances. The OPTIONS request\
    \ allows you to check for the set of available operations that the currently authenticated\
    \ user can perform on the `/filter` resource. Whether the user can perform an\
    \ operation or not may depend on various factors, including the users authorizations\
    \ to interact with this resource and the internal configuration of the process\
    \ engine."
  resultDescription: "The `/filter` resource supports two custom OPTIONS requests,\
    \ one for the resource as such and one for individual filter instances. The OPTIONS\
    \ request allows you to check for the set of available operations that the currently\
    \ authenticated user can perform on the `/filter` resource. Whether the user can\
    \ perform an operation or not may depend on various factors, including the users\
    \ authorizations to interact with this resource and the internal configuration\
    \ of the process engine."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/filter/create"
  description: "Creates a new filter."
  resultDescription: "Creates a new filter."
- method: "POST"
  path: "/filter/{id}/count"
  description: "Executes the saved query of the filter by id and returns the count.\
    \ This method is slightly more\npowerful then the Get Execute Filter Count\nthe\
    \ saved query of the filter."
  resultDescription: "Executes the saved query of the filter by id and returns the\
    \ count. This method is slightly more\npowerful then the Get Execute Filter Count\n\
    the saved query of the filter."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the filter to execute."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "The extending query was invalid. See the Introduction for the\
        \ error response format."
    403:
      id: "403"
      type: null
      description: "The authenticated user is unauthorized to read this filter. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Filter with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "POST"
  path: "/filter/{id}/list"
  description: "Executes the saved query of the filter by id and returns the result\
    \ list. This method is slightly more\npowerful then the Get Execute Filter List\n\
    query of the filter."
  resultDescription: "Executes the saved query of the filter by id and returns the\
    \ result list. This method is slightly more\npowerful then the Get Execute Filter\
    \ List\nquery of the filter."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the filter to execute."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
- method: "POST"
  path: "/filter/{id}/singleResult"
  description: "Executes the saved query of the filter by id and returns the single\
    \ result. This method is slightly more\npowerful then the Get Execute Filter Single\
    \ Result\nthe saved query of the filter."
  resultDescription: "Executes the saved query of the filter by id and returns the\
    \ single result. This method is slightly more\npowerful then the Get Execute Filter\
    \ Single Result\nthe saved query of the filter."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the filter to execute."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful. In case of an expected HAL response."
    400:
      id: "400"
      type: null
      description: "The executed filter returned more than one single result or the\
        \ extending query was invalid. See the Introduction for the error response\
        \ format."
    204:
      id: "204"
      type: null
      description: "Request successful, but the result was empty."
    403:
      id: "403"
      type: null
      description: "The authenticated user is unauthorized to read this filter. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Filter with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "PUT"
  path: "/filter/{id}"
  description: "Updates an existing filter."
  resultDescription: "Updates an existing filter."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Filter was invalid. See Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The authenticated user is unauthorized to update this filter.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Filter cannot be found. See the Introduction for the error response\
        \ format."
- method: "DELETE"
  path: "/group/{id}"
  description: "Deletes a group by id."
  resultDescription: "Deletes a group by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the group to be deleted."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only (Cannot modify users / groups /\
        \ memberships)."
    404:
      id: "404"
      type: null
      description: "Group cannot be found. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/group/count"
  description: "Queries for groups using a list of parameters and retrieves the count."
  resultDescription: "Queries for groups using a list of parameters and retrieves\
    \ the count."
  queryParameters:
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by the name that the parameter is a substring of."
    name:
      id: "name"
      type: null
      description: "Filter by the name of the group."
    member:
      id: "member"
      type: null
      description: "Only retrieve groups where the given user id is a member of."
    id:
      id: "id"
      type: null
      description: "Filter by the id of the group."
    type:
      id: "type"
      type: null
      description: "Filter by the type of the group."
    memberOfTenant:
      id: "memberOfTenant"
      type: null
      description: "Only retrieve groups which are members of the given tenant."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy is specified. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/group"
  description: "Queries for a list of groups using a list of parameters.\nThe size\
    \ of the result set can be retrieved by using the Get Group Count"
  resultDescription: "Queries for a list of groups using a list of parameters.\nThe\
    \ size of the result set can be retrieved by using the Get Group Count"
  queryParameters:
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by the name that the parameter is a substring of."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    name:
      id: "name"
      type: null
      description: "Filter by the name of the group."
    member:
      id: "member"
      type: null
      description: "Only retrieve groups which the given user id is a member of."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are id, name and type. Must be used in conjunction with the sortOrder\
        \ parameter."
    id:
      id: "id"
      type: null
      description: "Filter by the id of the group."
    type:
      id: "type"
      type: null
      description: "Filter by the type of the group."
    memberOfTenant:
      id: "memberOfTenant"
      type: null
      description: "Only retrieve groups which are members of the given tenant."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy is specified. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/group/{id}"
  description: "Retrieves a group by id."
  resultDescription: "Retrieves a group by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the group to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Group with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "DELETE"
  path: "/group/{id}/members/{userId}"
  description: "Removes a member from a group."
  resultDescription: "Removes a member from a group."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the group."
    userId:
      id: "userId"
      type: null
      description: "The id of user to remove from the group."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "In case an error occurs. See the Introduction for the error response\
        \ format."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only (Cannot modify users / groups /\
        \ memberships)."
- method: "OPTIONS"
  path: "/group/{id}/members"
  description: "The OPTIONS request allows checking for the set of available operations\
    \ that the currently authenticated user can perform on the resource. If the user\
    \ can perform an operation or not may depend on various things, including the\
    \ users authorizations to interact with this resource and the internal configuration\
    \ of the process engine."
  resultDescription: "The OPTIONS request allows checking for the set of available\
    \ operations that the currently authenticated user can perform on the resource.\
    \ If the user can perform an operation or not may depend on various things, including\
    \ the users authorizations to interact with this resource and the internal configuration\
    \ of the process engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the group."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/group/{id}/members/{userId}"
  description: "Adds a member to a group."
  resultDescription: "Adds a member to a group."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the group."
    userId:
      id: "userId"
      type: null
      description: "The id of user to add to the group."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "In case an internal error occurs. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only (Cannot modify users / groups /\
        \ memberships)."
- method: "OPTIONS"
  path: "/group"
  description: "The `/group` resource supports two custom OPTIONS requests, one for\
    \ the resource as such and one for individual group instances. The OPTIONS request\
    \ allows checking for the set of available operations that the currently authenticated\
    \ user can perform on the `/group` resource. If the user can perform an operation\
    \ or not may depend on various things, including the users authorizations to interact\
    \ with this resource and the internal configuration of the process engine."
  resultDescription: "The `/group` resource supports two custom OPTIONS requests,\
    \ one for the resource as such and one for individual group instances. The OPTIONS\
    \ request allows checking for the set of available operations that the currently\
    \ authenticated user can perform on the `/group` resource. If the user can perform\
    \ an operation or not may depend on various things, including the users authorizations\
    \ to interact with this resource and the internal configuration of the process\
    \ engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the group."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/group/create"
  description: "Creates a new group."
  resultDescription: "Creates a new group."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The group could not be created due to an internal server error.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only (Cannot modify users / groups /\
        \ memberships)."
- method: "PUT"
  path: "/group/{id}"
  description: "Updates a given group by id."
  resultDescription: "Updates a given group by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the group."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The group could not be updated due to an internal server error.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only (Cannot modify users / groups /\
        \ memberships)."
    404:
      id: "404"
      type: null
      description: "If the group with the requested Id cannot be found."
- method: "GET"
  path: "/history/activity-instance/count"
  description: "Queries for the number of historic activity instances that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get Historic Activity\
    \ Instances"
  resultDescription: "Queries for the number of historic activity instances that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get Historic Activity\
    \ Instances"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    finishedAfter:
      id: "finishedAfter"
      type: null
      description: "Restrict to instances that were finished after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    activityName:
      id: "activityName"
      type: null
      description: "Filter by the activity name (according to BPMN 2.0 XML)."
    finished:
      id: "finished"
      type: null
      description: "Only include finished activity instances. Value may only be true,\
        \ as false is the default behavior."
    activityInstanceId:
      id: "activityInstanceId"
      type: null
      description: "Filter by activity instance id."
    completeScope:
      id: "completeScope"
      type: null
      description: "Only include activity instances which completed a scope. Value\
        \ may only be true, as false is the default behavior."
    executionId:
      id: "executionId"
      type: null
      description: "Filter by the id of the execution that executed the activity instance."
    activityId:
      id: "activityId"
      type: null
      description: "Filter by the activity id (according to BPMN 2.0 XML)."
    canceled:
      id: "canceled"
      type: null
      description: "Only include canceled activity instances. Value may only be true,\
        \ as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a list of tenant ids. An activity instance must have\
        \ one of the given tenant ids."
    taskAssignee:
      id: "taskAssignee"
      type: null
      description: "Only include activity instances that are user tasks and assigned\
        \ to a given user."
    unfinished:
      id: "unfinished"
      type: null
      description: "Only include unfinished activity instances. Value may only be\
        \ true, as false is the default behavior."
    startedAfter:
      id: "startedAfter"
      type: null
      description: "Restrict to instances that were started after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    activityType:
      id: "activityType"
      type: null
      description: "Filter by activity type."
    startedBefore:
      id: "startedBefore"
      type: null
      description: "Restrict to instances that were started before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    finishedBefore:
      id: "finishedBefore"
      type: null
      description: "Restrict to instances that were finished before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/history/activity-instance"
  description: "Queries for historic activity instances that fulfill the given parameters.\n\
    The size of the result set can be retrieved by using the Get Historic Activity\
    \ Instance Count"
  resultDescription: "Queries for historic activity instances that fulfill the given\
    \ parameters.\nThe size of the result set can be retrieved by using the Get Historic\
    \ Activity Instance Count"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    finishedAfter:
      id: "finishedAfter"
      type: null
      description: "Restrict to instances that were finished after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    activityName:
      id: "activityName"
      type: null
      description: "Filter by the activity name (according to BPMN 2.0 XML)."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    finished:
      id: "finished"
      type: null
      description: "Only include finished activity instances. Value may only be true,\
        \ as false is the default behavior."
    activityInstanceId:
      id: "activityInstanceId"
      type: null
      description: "Filter by activity instance id."
    completeScope:
      id: "completeScope"
      type: null
      description: "Only include activity instances which completed a scope. Value\
        \ may only be true, as false is the default behavior."
    executionId:
      id: "executionId"
      type: null
      description: "Filter by the id of the execution that executed the activity instance."
    activityId:
      id: "activityId"
      type: null
      description: "Filter by the activity id (according to BPMN 2.0 XML)."
    canceled:
      id: "canceled"
      type: null
      description: "Only include canceled activity instances. Value may only be true,\
        \ as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. An activity instance\
        \ must have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    taskAssignee:
      id: "taskAssignee"
      type: null
      description: "Only include activity instances that are user tasks and assigned\
        \ to a given user."
    unfinished:
      id: "unfinished"
      type: null
      description: "Only include unfinished activity instances. Value may only be\
        \ true, as false is the default behavior."
    startedAfter:
      id: "startedAfter"
      type: null
      description: "Restrict to instances that were started after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are activityInstanceID,\
        \ instanceId, executionId, activityId, activityName, activityType, startTime,\
        \ endTime, duration, definitionId, occurrence and tenantId. Must be used in\
        \ conjunction with the sortOrder parameter."
    activityType:
      id: "activityType"
      type: null
      description: "Filter by activity type."
    startedBefore:
      id: "startedBefore"
      type: null
      description: "Restrict to instances that were started before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    finishedBefore:
      id: "finishedBefore"
      type: null
      description: "Restrict to instances that were finished before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/activity-instance/{id}"
  description: "Retrieves a historic activity instance by id, according to the `HistoricActivityInstance`\
    \ interface\nin the engine."
  resultDescription: "Retrieves a historic activity instance by id, according to the\
    \ `HistoricActivityInstance` interface\nin the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the historic activity instance to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Historic activity instance with given id does not exist. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/history/activity-instance/count"
  description: "Queries for the number of historic activity instances that fulfill\
    \ the given parameters."
  resultDescription: "Queries for the number of historic activity instances that fulfill\
    \ the given parameters."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/history/activity-instance"
  description: "Queries for historic activity instances that fulfill the given parameters."
  resultDescription: "Queries for historic activity instances that fulfill the given\
    \ parameters."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "DELETE"
  path: "/history/batch/{id}"
  description: "Deletes a historic batch by id, including related historic job logs."
  resultDescription: "Deletes a historic batch by id, including related historic job\
    \ logs."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the batch to be deleted."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Deployment with id 'aDeploymentId' does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/batch/count"
  description: "Requests the number of historic batches that fulfill the query criteria.\n\
    Takes the same filtering parameters as the Get Historic Batches\n\"reference/rest/history/batch/get-query.md\"\
    \ >}}) method."
  resultDescription: "Requests the number of historic batches that fulfill the query\
    \ criteria.\nTakes the same filtering parameters as the Get Historic Batches\n\
    \"reference/rest/history/batch/get-query.md\" >}}) method."
  queryParameters:
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A batch matches\
        \ if it has one of the given tenant ids."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include batches which belong to no tenant. Value can effectively\
        \ only be true, as false is the default behavior."
    completed:
      id: "completed"
      type: null
      description: "Filter completed or not completed batches. If the value is true,\
        \ only completed batches, i.e., end time is set, are counted. Otherwise, if\
        \ the value is false, only running batches, i.e., end time is null, are counted."
    batchId:
      id: "batchId"
      type: null
      description: "Filter by batch id."
    type:
      id: "type"
      type: null
      description: "Filter by batch type. See the User Guide for more information\
        \ about batch types."
- method: "GET"
  path: "/history/batch"
  description: "Queries for historic batches that fulfill given parameters. Parameters\
    \ may be\nthe properties of batches, such as the id or type. The\nsize of the\
    \ result set can be retrieved by using the Get Historic Batch Count\nrelref \"\
    reference/rest/history/batch/get-query-count.md\" >}}) method."
  resultDescription: "Queries for historic batches that fulfill given parameters.\
    \ Parameters may be\nthe properties of batches, such as the id or type. The\n\
    size of the result set can be retrieved by using the Get Historic Batch Count\n\
    relref \"reference/rest/history/batch/get-query-count.md\" >}}) method."
  queryParameters:
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A batch matches\
        \ if it has one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include batches which belong to no tenant. Value can effectively\
        \ only be true, as false is the default behavior."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are batchId, startTime, endTime, and tenantId. Must be used in conjunction\
        \ with the sortOrder parameter."
    completed:
      id: "completed"
      type: null
      description: "Filter completed or not completed batches. If the value is true,\
        \ only completed batches, i.e., end time is set, are returned. Otherwise,\
        \ if the value is false, only running batches, i.e., end time is null, are\
        \ returned."
    batchId:
      id: "batchId"
      type: null
      description: "Filter by batch id."
    type:
      id: "type"
      type: null
      description: "Filter by batch type. See the User Guide for more information\
        \ about batch types."
- method: "GET"
  path: "/history/batch/{id}"
  description: "Retrieves a historic batch by id, according to the `HistoricBatch`\
    \ interface in the engine."
  resultDescription: "Retrieves a historic batch by id, according to the `HistoricBatch`\
    \ interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the historic batch to be retrieved."
- method: "GET"
  path: "/history/case-activity-instance/count"
  description: "Queries for the number of historic case activity instances that fulfill\
    \ the given parameters. Takes\nthe same parameters as the Get Historic Case Activity\
    \ Instances"
  resultDescription: "Queries for the number of historic case activity instances that\
    \ fulfill the given parameters. Takes\nthe same parameters as the Get Historic\
    \ Case Activity Instances"
  queryParameters:
    caseActivityId:
      id: "caseActivityId"
      type: null
      description: "Filter by the case activity id (according to CMMN XML)."
    available:
      id: "available"
      type: null
      description: "Only include available case activity instances. Value may only\
        \ be true, as false is the default behavior."
    repetition:
      id: "repetition"
      type: null
      description: "Only include case activity instances which are repetitions. Value\
        \ may only be true, as false is the default behavior."
    required:
      id: "required"
      type: null
      description: "Only include required case activity instances. Value may only\
        \ be true, as false is the default behavior."
    enabled:
      id: "enabled"
      type: null
      description: "Only include enabled case activity instances. Value may only be\
        \ true, as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a list of tenant ids. A case activity instance must\
        \ have one of the given tenant ids."
    endedAfter:
      id: "endedAfter"
      type: null
      description: "Restrict to instances that ended after the given date. The date\
        \ must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    repeatable:
      id: "repeatable"
      type: null
      description: "Only include repeatable case activity instances. Value may only\
        \ be true, as false is the default behavior."
    unfinished:
      id: "unfinished"
      type: null
      description: "Only include unfinished case activity instances. Value may only\
        \ be true, as false is the default behavior."
    disabled:
      id: "disabled"
      type: null
      description: "Only include disabled case activity instances. Value may only\
        \ be true, as false is the default behavior."
    caseActivityInstanceIdIn:
      id: "caseActivityInstanceIdIn"
      type: null
      description: "Only include case activity instances which belong to one of the\
        \ passed and comma-separated activity instance ids."
    terminated:
      id: "terminated"
      type: null
      description: "Only include terminated case activity instances. Value may only\
        \ be true, as false is the default behavior."
    caseActivityInstanceId:
      id: "caseActivityInstanceId"
      type: null
      description: "Filter by case activity instance id."
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Filter by the id of the case execution that executed the case\
        \ activity instance."
    caseActivityIdIn:
      id: "caseActivityIdIn"
      type: null
      description: "Only include case activity instances which belong to one of the\
        \ passed and comma-separated activity ids."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by case definition id."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    active:
      id: "active"
      type: null
      description: "Only include active case activity instances. Value may only be\
        \ true, as false is the default behavior."
    finished:
      id: "finished"
      type: null
      description: "Only include finished case activity instances. Value may only\
        \ be true, as false is the default behavior."
    completed:
      id: "completed"
      type: null
      description: "Only include completed case activity instances. Value may only\
        \ be true, as false is the default behavior."
    createdAfter:
      id: "createdAfter"
      type: null
      description: "Restrict to instances that were created after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    endedBefore:
      id: "endedBefore"
      type: null
      description: "Restrict to instances that ended before the given date. The date\
        \ must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    caseActivityName:
      id: "caseActivityName"
      type: null
      description: "Filter by the case activity name (according to CMMN XML)."
    caseActivityType:
      id: "caseActivityType"
      type: null
      description: "Filter by the case activity type (according to CMMN XML)."
    createdBefore:
      id: "createdBefore"
      type: null
      description: "Restrict to instances that were created before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/history/case-activity-instance"
  description: "Queries for historic case activity instances that fulfill the given\
    \ parameters. The size of the\nresult set can be retrieved by using the Get Historic\
    \ Case Activity Instance Count"
  resultDescription: "Queries for historic case activity instances that fulfill the\
    \ given parameters. The size of the\nresult set can be retrieved by using the\
    \ Get Historic Case Activity Instance Count"
  queryParameters:
    caseActivityId:
      id: "caseActivityId"
      type: null
      description: "Filter by the case activity id (according to CMMN XML)."
    available:
      id: "available"
      type: null
      description: "Only include available case activity instances. Value may only\
        \ be true, as false is the default behavior."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    repetition:
      id: "repetition"
      type: null
      description: "Only include case activity instances which are repetitions. Value\
        \ may only be true, as false is the default behavior."
    required:
      id: "required"
      type: null
      description: "Only include required case activity instances. Value may only\
        \ be true, as false is the default behavior."
    enabled:
      id: "enabled"
      type: null
      description: "Only include enabled case activity instances. Value may only be\
        \ true, as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A case activity\
        \ instance must have one of the given tenant ids."
    endedAfter:
      id: "endedAfter"
      type: null
      description: "Restrict to instances that ended after the given date. The date\
        \ must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    repeatable:
      id: "repeatable"
      type: null
      description: "Only include repeatable case activity instances. Value may only\
        \ be true, as false is the default behavior."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    unfinished:
      id: "unfinished"
      type: null
      description: "Only include unfinished case activity instances. Value may only\
        \ be true, as false is the default behavior."
    disabled:
      id: "disabled"
      type: null
      description: "Only include disabled case activity instances. Value may only\
        \ be true, as false is the default behavior."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are caseActivityInstanceID,\
        \ caseInstanceId, caseExecutionId, caseActivityId, caseActivityName, createTime,\
        \ endTime, duration, caseDefinitionId and tenantId. Must be used in conjunction\
        \ with the sortOrder parameter."
    caseActivityInstanceIdIn:
      id: "caseActivityInstanceIdIn"
      type: null
      description: "Only include case activity instances which belong to one of the\
        \ passed and comma-separated activity instance ids."
    terminated:
      id: "terminated"
      type: null
      description: "Only include terminated case activity instances. Value may only\
        \ be true, as false is the default behavior."
    caseActivityInstanceId:
      id: "caseActivityInstanceId"
      type: null
      description: "Filter by case activity instance id."
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Filter by the id of the case execution that executed the case\
        \ activity instance."
    caseActivityIdIn:
      id: "caseActivityIdIn"
      type: null
      description: "Only include case activity instances which belong to one of the\
        \ passed and comma-separated activity ids."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by case definition id."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    active:
      id: "active"
      type: null
      description: "Only include active case activity instances. Value may only be\
        \ true, as false is the default behavior."
    finished:
      id: "finished"
      type: null
      description: "Only include finished case activity instances. Value may only\
        \ be true, as false is the default behavior."
    completed:
      id: "completed"
      type: null
      description: "Only include completed case activity instances. Value may only\
        \ be true, as false is the default behavior."
    createdAfter:
      id: "createdAfter"
      type: null
      description: "Restrict to instances that were created after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    endedBefore:
      id: "endedBefore"
      type: null
      description: "Restrict to instances that ended before the given date. The date\
        \ must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    caseActivityName:
      id: "caseActivityName"
      type: null
      description: "Filter by the case activity name (according to CMMN XML)."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    caseActivityType:
      id: "caseActivityType"
      type: null
      description: "Filter by the case activity type (according to CMMN XML)."
    createdBefore:
      id: "createdBefore"
      type: null
      description: "Restrict to instances that were created before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/case-activity-instance/{id}"
  description: "Retrieves a historic case activity instance by id, according to the\
    \ `HistoricCaseActivityInstance`\ninterface in the engine."
  resultDescription: "Retrieves a historic case activity instance by id, according\
    \ to the `HistoricCaseActivityInstance`\ninterface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the historic case activity instance to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Historic case activity instance with given id does not exist.\
        \ See the Introduction for the error response format."
- method: "GET"
  path: "/history/case-definition/{id}/statistics"
  description: "Retrieves historic statistics of a given case definition grouped by\
    \ activities.\nThese statistics include the number of active, available, completed,\
    \ disabled, enabled and completed case activity instances."
  resultDescription: "Retrieves historic statistics of a given case definition grouped\
    \ by activities.\nThese statistics include the number of active, available, completed,\
    \ disabled, enabled and completed case activity instances."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the case definition."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "See the Introduction for the error response format."
- method: "GET"
  path: "/history/case-instance/count"
  description: "Queries for the number of historic case instances that fulfill the\
    \ given parameters.  Takes the same\nparameters as the Get Historic Case Instances"
  resultDescription: "Queries for the number of historic case instances that fulfill\
    \ the given parameters.  Takes the same\nparameters as the Get Historic Case Instances"
  queryParameters:
    subCaseInstanceId:
      id: "subCaseInstanceId"
      type: null
      description: "Restrict query to one case instance that has a sub case instance\
        \ with the given id."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Filter by the key of the case definition the instances run on."
    notClosed:
      id: "notClosed"
      type: null
      description: "Only include not closed case instances. Value may only be true,\
        \ as false is the default behavior."
    caseDefinitionName:
      id: "caseDefinitionName"
      type: null
      description: "Filter by the name of the case definition the instances run on."
    subProcessInstanceId:
      id: "subProcessInstanceId"
      type: null
      description: "Restrict query to one case instance that has a sub process instance\
        \ with the given id."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A case instance\
        \ must have one of the given tenant ids."
    caseInstanceBusinessKeyLike:
      id: "caseInstanceBusinessKeyLike"
      type: null
      description: "Filter by case instance business key that the parameter is a substring\
        \ of."
    caseDefinitionNameLike:
      id: "caseDefinitionNameLike"
      type: null
      description: "Filter by case definition names that the parameter is a substring\
        \ of."
    terminated:
      id: "terminated"
      type: null
      description: "Only include terminated case instances. Value may only be true,\
        \ as false is the default behavior."
    superProcessInstanceId:
      id: "superProcessInstanceId"
      type: null
      description: "Restrict query to all case instances that are sub case instances\
        \ of the given process instance. Takes a process instance id."
    caseInstanceBusinessKey:
      id: "caseInstanceBusinessKey"
      type: null
      description: "Filter by case instance business key."
    closedBefore:
      id: "closedBefore"
      type: null
      description: "Restrict to instances that were closed before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    variables:
      id: "variables"
      type: null
      description: "Only include process instances that have/had variables with certain\
        \ values. Variable filtering expressions are comma-separated and are structured\
        \ as follows: A valid parameter value has the form key_operator_value. key\
        \ is the variable name, operator is the comparison operator to be used and\
        \ value the variable value. Note: Values are always treated as String objects\
        \ on server side. Valid operator values are: eq - equal to; neq - not equal\
        \ to; gt - greater than; gteq - greater than or equal to; lt - lower than;\
        \ lteq - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    caseActivityIdIn:
      id: "caseActivityIdIn"
      type: null
      description: "Filter by a comma-separated list of case activity ids. A historic\
        \ case instance must have historic case activity instances in at least one\
        \ of the given case activity ids."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by the case definition the instances run on."
    caseInstanceIds:
      id: "caseInstanceIds"
      type: null
      description: "Filter by case instance ids. Must be a comma-separated list of\
        \ case instance ids."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    active:
      id: "active"
      type: null
      description: "Only include active case instances. Value may only be true, as\
        \ false is the default behavior."
    caseDefinitionKeyNotIn:
      id: "caseDefinitionKeyNotIn"
      type: null
      description: "Exclude instances that belong to a set of case definitions. Must\
        \ be a comma-separated list of case definition keys."
    completed:
      id: "completed"
      type: null
      description: "Only include completed case instances. Value may only be true,\
        \ as false is the default behavior."
    createdAfter:
      id: "createdAfter"
      type: null
      description: "Restrict to instances that were created after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    superCaseInstanceId:
      id: "superCaseInstanceId"
      type: null
      description: "Restrict query to all case instances that are sub case instances\
        \ of the given case instance. Takes a case instance id."
    closedAfter:
      id: "closedAfter"
      type: null
      description: "Restrict to instances that were closed after the given date. The\
        \ date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    createdBy:
      id: "createdBy"
      type: null
      description: "Only include case instances that were created by the given user."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include historic case instances which belong to no tenant.\
        \ Value may only be true, as false is the default behavior."
    closed:
      id: "closed"
      type: null
      description: "Only include closed case instances. Value may only be true, as\
        \ false is the default behavior."
    createdBefore:
      id: "createdBefore"
      type: null
      description: "Restrict to instances that were created before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/history/case-instance"
  description: "Queries for historic case instances that fulfill the given parameters.\
    \  The size of the result set can\nbe retrieved by using the Get Historic Case\
    \ Instance Count"
  resultDescription: "Queries for historic case instances that fulfill the given parameters.\
    \  The size of the result set can\nbe retrieved by using the Get Historic Case\
    \ Instance Count"
  queryParameters:
    subCaseInstanceId:
      id: "subCaseInstanceId"
      type: null
      description: "Restrict query to one case instance that has a sub case instance\
        \ with the given id."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Filter by the key of the case definition the instances run on."
    notClosed:
      id: "notClosed"
      type: null
      description: "Only include not closed case instances. Value may only be true,\
        \ as false is the default behavior."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    caseDefinitionName:
      id: "caseDefinitionName"
      type: null
      description: "Filter by the name of the case definition the instances run on."
    subProcessInstanceId:
      id: "subProcessInstanceId"
      type: null
      description: "Restrict query to one case instance that has a sub process instance\
        \ with the given id."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A case instance\
        \ must have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    caseInstanceBusinessKeyLike:
      id: "caseInstanceBusinessKeyLike"
      type: null
      description: "Filter by case instance business key that the parameter is a substring\
        \ of."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are instanceId,\
        \ definitionId, businessKey, createTime, closeTime, duration and tenantId.\
        \ Must be used in conjunction with the sortOrder parameter."
    caseDefinitionNameLike:
      id: "caseDefinitionNameLike"
      type: null
      description: "Filter by case definition names that the parameter is a substring\
        \ of."
    terminated:
      id: "terminated"
      type: null
      description: "Only include terminated case instances. Value may only be true,\
        \ as false is the default behavior."
    superProcessInstanceId:
      id: "superProcessInstanceId"
      type: null
      description: "Restrict query to all case instances that are sub case instances\
        \ of the given process instance. Takes a process instance id."
    caseInstanceBusinessKey:
      id: "caseInstanceBusinessKey"
      type: null
      description: "Filter by case instance business key."
    closedBefore:
      id: "closedBefore"
      type: null
      description: "Restrict to instances that were closed before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    variables:
      id: "variables"
      type: null
      description: "Only include process instances that have/had variables with certain\
        \ values. Variable filtering expressions are comma-separated and are structured\
        \ as follows: A valid parameter value has the form key_operator_value. key\
        \ is the variable name, operator is the comparison operator to be used and\
        \ value the variable value. Note: Values are always treated as String objects\
        \ on server side. Valid operator values are: eq - equal to; neq - not equal\
        \ to; gt - greater than; gteq - greater than or equal to; lt - lower than;\
        \ lteq - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    caseActivityIdIn:
      id: "caseActivityIdIn"
      type: null
      description: "Filter by a comma-separated list of case activity ids. A historic\
        \ case instance must have historic case activity instances in at least one\
        \ of the given case activity ids."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by the case definition the instances run on."
    caseInstanceIds:
      id: "caseInstanceIds"
      type: null
      description: "Filter by case instance ids. Must be a comma-separated list of\
        \ case instance ids."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    active:
      id: "active"
      type: null
      description: "Only include active case instances. Value may only be true, as\
        \ false is the default behavior."
    caseDefinitionKeyNotIn:
      id: "caseDefinitionKeyNotIn"
      type: null
      description: "Exclude instances that belong to a set of case definitions. Must\
        \ be a comma-separated list of case definition keys."
    completed:
      id: "completed"
      type: null
      description: "Only include completed case instances. Value may only be true,\
        \ as false is the default behavior."
    createdAfter:
      id: "createdAfter"
      type: null
      description: "Restrict to instances that were created after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    superCaseInstanceId:
      id: "superCaseInstanceId"
      type: null
      description: "Restrict query to all case instances that are sub case instances\
        \ of the given case instance. Takes a case instance id."
    closedAfter:
      id: "closedAfter"
      type: null
      description: "Restrict to instances that were closed after the given date. The\
        \ date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    createdBy:
      id: "createdBy"
      type: null
      description: "Only include case instances that were created by the given user."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include historic case instances which belong to no tenant.\
        \ Value may only be true, as false is the default behavior."
    closed:
      id: "closed"
      type: null
      description: "Only include closed case instances. Value may only be true, as\
        \ false is the default behavior."
    createdBefore:
      id: "createdBefore"
      type: null
      description: "Restrict to instances that were created before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/case-instance/{id}"
  description: "Retrieves a historic case instance by id, according to the `HistoricCaseInstance`\
    \ interface in the engine."
  resultDescription: "Retrieves a historic case instance by id, according to the `HistoricCaseInstance`\
    \ interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the historic case instance to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Historic case instance with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/history/case-instance/count"
  description: "Queries for the number of historic case instances that fulfill the\
    \ given parameters.\nThis method takes the same message body as the Get Historic\
    \ Case Instances (POST)Get Historic Case Instance Count"
  resultDescription: "Queries for the number of historic case instances that fulfill\
    \ the given parameters.\nThis method takes the same message body as the Get Historic\
    \ Case Instances (POST)Get Historic Case Instance Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/history/case-instance"
  description: "Queries for historic case instances that fulfill the given parameters."
  resultDescription: "Queries for historic case instances that fulfill the given parameters."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/decision-instance/count"
  description: "Queries for the number of historic decision instances that fulfill\
    \ the given\nparameters. Takes the same parameters as the Get Historic Decision\
    \ Instances"
  resultDescription: "Queries for the number of historic decision instances that fulfill\
    \ the given\nparameters. Takes the same parameters as the Get Historic Decision\
    \ Instances"
  queryParameters:
    decisionInstanceIdIn:
      id: "decisionInstanceIdIn"
      type: null
      description: "Filter by decision instance ids. Must be a comma-separated list\
        \ of decision instance ids."
    decisionDefinitionKeyIn:
      id: "decisionDefinitionKeyIn"
      type: null
      description: "Filter by the keys of the decision definition the instances belongs\
        \ to. Must be a comma-separated list of decision definition keys."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the process definition the instances belongs to."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by the process instance the instances belongs to."
    rootDecisionInstanceId:
      id: "rootDecisionInstanceId"
      type: null
      description: "Restrict to instances that have a given root decision instance\
        \ id. This also includes the decision instance with the given id."
    decisionInstanceId:
      id: "decisionInstanceId"
      type: null
      description: "Filter by decision instance id."
    decisionDefinitionIdIn:
      id: "decisionDefinitionIdIn"
      type: null
      description: "Filter by the decision definitions the instances belongs to. Must\
        \ be a comma-separated list of decision definition ids."
    evaluatedAfter:
      id: "evaluatedAfter"
      type: null
      description: "Restrict to instances that were evaluated after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by the case definition the instances belongs to."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Filter by the key of the case definition the instances belongs\
        \ to."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by the case instance the instances belongs to."
    evaluatedBefore:
      id: "evaluatedBefore"
      type: null
      description: "Restrict to instances that were evaluated before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    decisionDefinitionKey:
      id: "decisionDefinitionKey"
      type: null
      description: "Filter by the key of the decision definition the instances belongs\
        \ to."
    userId:
      id: "userId"
      type: null
      description: "Restrict to instances that were evaluated by the given user."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by the key of the process definition the instances belongs\
        \ to."
    decisionDefinitionId:
      id: "decisionDefinitionId"
      type: null
      description: "Filter by the decision definition the instances belongs to."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A historic decision\
        \ instance must have one of the given tenant ids."
    decisionRequirementsDefinitionId:
      id: "decisionRequirementsDefinitionId"
      type: null
      description: "Filter by the decision requirements definition the instances belongs\
        \ to."
    decisionDefinitionName:
      id: "decisionDefinitionName"
      type: null
      description: "Filter by the name of the decision definition the instances belongs\
        \ to."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Filter by the activity instance ids the instances belongs to.\
        \ Must be a comma-separated list of acitvity instance ids."
    rootDecisionInstancesOnly:
      id: "rootDecisionInstancesOnly"
      type: null
      description: "Restrict to instances those are the root decision instance of\
        \ an evaluation. Value may only be true, as false is the default behavior."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Filter by the activity ids the instances belongs to. Must be a\
        \ comma-separated list of acitvity ids."
    decisionRequirementsDefinitionKey:
      id: "decisionRequirementsDefinitionKey"
      type: null
      description: "Filter by the key of the decision requirements definition the\
        \ instances belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/history/decision-instance"
  description: "Queries for historic decision instances that fulfill the given parameters.\
    \ The\nsize of the result set can be retrieved by using the Get Historic Decision\
    \ Instance Count"
  resultDescription: "Queries for historic decision instances that fulfill the given\
    \ parameters. The\nsize of the result set can be retrieved by using the Get Historic\
    \ Decision Instance Count"
  queryParameters:
    decisionInstanceIdIn:
      id: "decisionInstanceIdIn"
      type: null
      description: "Filter by decision instance ids. Must be a comma-separated list\
        \ of decision instance ids."
    decisionDefinitionKeyIn:
      id: "decisionDefinitionKeyIn"
      type: null
      description: "Filter by the keys of the decision definition the instances belongs\
        \ to. Must be a comma-separated list of decision definition keys."
    evaluatedAfter:
      id: "evaluatedAfter"
      type: null
      description: "Restrict to instances that were evaluated after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Filter by the key of the case definition the instances belongs\
        \ to."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    decisionDefinitionKey:
      id: "decisionDefinitionKey"
      type: null
      description: "Filter by the key of the decision definition the instances belongs\
        \ to."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by the key of the process definition the instances belongs\
        \ to."
    disableCustomObjectDeserialization:
      id: "disableCustomObjectDeserialization"
      type: null
      description: "Disables deserialization of input and output values that are custom\
        \ objects. Value may only be true, as false is the default behavior."
    includeInputs:
      id: "includeInputs"
      type: null
      description: "Include input values in the result. Value may only be true, as\
        \ false is the default behavior."
    disableBinaryFetching:
      id: "disableBinaryFetching"
      type: null
      description: "Disables fetching of byte array input and output values. Value\
        \ may only be true, as false is the default behavior."
    decisionDefinitionId:
      id: "decisionDefinitionId"
      type: null
      description: "Filter by the decision definition the instances belongs to."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A historic decision\
        \ instance must have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    decisionDefinitionName:
      id: "decisionDefinitionName"
      type: null
      description: "Filter by the name of the decision definition the instances belongs\
        \ to."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are evaluationTime\
        \ and tenantId. Must be used in conjunction with the sortOrder parameter."
    rootDecisionInstancesOnly:
      id: "rootDecisionInstancesOnly"
      type: null
      description: "Restrict to instances those are the root decision instance of\
        \ an evaluation. Value may only be true, as false is the default behavior."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Filter by the activity ids the instances belongs to. Must be a\
        \ comma-separated list of acitvity ids."
    decisionRequirementsDefinitionKey:
      id: "decisionRequirementsDefinitionKey"
      type: null
      description: "Filter by the key of the decision requirements definition the\
        \ instances belongs to."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the process definition the instances belongs to."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by the process instance the instances belongs to."
    rootDecisionInstanceId:
      id: "rootDecisionInstanceId"
      type: null
      description: "Restrict to instances that have a given root decision instance\
        \ id. This also includes the decision instance with the given id."
    decisionInstanceId:
      id: "decisionInstanceId"
      type: null
      description: "Filter by decision instance id."
    decisionDefinitionIdIn:
      id: "decisionDefinitionIdIn"
      type: null
      description: "Filter by the decision definitions the instances belongs to. Must\
        \ be a comma-separated list of decision definition ids."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by the case definition the instances belongs to."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by the case instance the instances belongs to."
    evaluatedBefore:
      id: "evaluatedBefore"
      type: null
      description: "Restrict to instances that were evaluated before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    includeOutputs:
      id: "includeOutputs"
      type: null
      description: "Include output values in the result. Value may only be true, as\
        \ false is the default behavior."
    userId:
      id: "userId"
      type: null
      description: "Restrict to instances that were evaluated by the given user."
    decisionRequirementsDefinitionId:
      id: "decisionRequirementsDefinitionId"
      type: null
      description: "Filter by the decision requirements definition the instances belongs\
        \ to."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Filter by the activity instance ids the instances belongs to.\
        \ Must be a comma-separated list of acitvity instance ids."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/decision-instance/{id}"
  description: "Retrieves a historic decision instance by id, according to the\n`HistoricDecisionInstance`\
    \ interface in the engine."
  resultDescription: "Retrieves a historic decision instance by id, according to the\n\
    `HistoricDecisionInstance` interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the historic decision instance to be retrieved."
  queryParameters:
    disableCustomObjectDeserialization:
      id: "disableCustomObjectDeserialization"
      type: null
      description: "Disables deserialization of input and output values that are custom\
        \ objects. Value may only be true, as false is the default behavior."
    includeInputs:
      id: "includeInputs"
      type: null
      description: "Include input values in the result. Value may only be true, as\
        \ false is the default behavior."
    disableBinaryFetching:
      id: "disableBinaryFetching"
      type: null
      description: "Disables fetching of byte array input and output values. Value\
        \ may only be true, as false is the default behavior."
    includeOutputs:
      id: "includeOutputs"
      type: null
      description: "Include output values in the result. Value may only be true, as\
        \ false is the default behavior."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Historic decision instance with given id does not exist. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/history/decision-requirements-definition/{id}/statistics"
  description: "title: \"Get DRD Statistics\"\nweight: 60"
  resultDescription: "title: \"Get DRD Statistics\"\nweight: 60"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the decision requirements definition."
  queryParameters:
    decisionInstanceId:
      id: "decisionInstanceId"
      type: null
      description: "Restrict query results to be based only on specific evaluation\
        \ instance of a given decision requirements definition."
- method: "GET"
  path: "/history/detail/{id}/data"
  description: "Retrieves the content of a historic variable update by id. Applicable\
    \ for byte array and file variables."
  resultDescription: "Retrieves the content of a historic variable update by id. Applicable\
    \ for byte array and file variables."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the historic variable update."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Detail with given id exists but is not a binary variable. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Detail with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/history/detail/count"
  description: "Queries for the number of historic details that fulfill the given\
    \ parameters.\nTakes the same parameters as the Get Historic Details"
  resultDescription: "Queries for the number of historic details that fulfill the\
    \ given parameters.\nTakes the same parameters as the Get Historic Details"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    executionId:
      id: "executionId"
      type: null
      description: "Filter by execution id."
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Filter by case execution id."
    variableUpdates:
      id: "variableUpdates"
      type: null
      description: "Only include HistoricVariableUpdates. Value may only be true,\
        \ as false is the default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids."
    excludeTaskDetails:
      id: "excludeTaskDetails"
      type: null
      description: "Excludes all task-related HistoricDetails, so only items which\
        \ have no task id set will be selected. When this parameter is used together\
        \ with taskId, this call is ignored and task details are not excluded. Value\
        \ may only be true, as false is the default behavior."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    activityInstanceId:
      id: "activityInstanceId"
      type: null
      description: "Filter by activity instance id."
    formFields:
      id: "formFields"
      type: null
      description: "Only include HistoricFormFields. Value may only be true, as false\
        \ is the default behavior."
    userOperationId:
      id: "userOperationId"
      type: null
      description: "Filter by a user operation id"
    variableInstanceId:
      id: "variableInstanceId"
      type: null
      description: "Filter by variable instance id."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid."
- method: "GET"
  path: "/history/detail"
  description: "Queries for historic details that fulfill the given parameters.\n\
    The size of the result set can be retrieved by using the Get Historic Detail Count"
  resultDescription: "Queries for historic details that fulfill the given parameters.\n\
    The size of the result set can be retrieved by using the Get Historic Detail Count"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Filter by case execution id."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    activityInstanceId:
      id: "activityInstanceId"
      type: null
      description: "Filter by activity instance id."
    userOperationId:
      id: "userOperationId"
      type: null
      description: "Filter by a user operation id"
    variableInstanceId:
      id: "variableInstanceId"
      type: null
      description: "Filter by variable instance id."
    executionId:
      id: "executionId"
      type: null
      description: "Filter by execution id."
    variableUpdates:
      id: "variableUpdates"
      type: null
      description: "Only include HistoricVariableUpdates. Value may only be true,\
        \ as false is the default behavior."
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids."
    excludeTaskDetails:
      id: "excludeTaskDetails"
      type: null
      description: "Excludes all task-related HistoricDetails, so only items which\
        \ have no task id set will be selected. When this parameter is used together\
        \ with taskId, this call is ignored and task details are not excluded. Value\
        \ may only be true, as false is the default behavior."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are processInstanceId,\
        \ variableName, variableType, variableRevision, formPropertyId, time or occurrence\
        \ and tenantId. Must be used in conjunction with the sortOrder parameter."
    formFields:
      id: "formFields"
      type: null
      description: "Only include HistoricFormFields. Value may only be true, as false\
        \ is the default behavior."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/detail/{id}"
  description: "Retrieves a historic detail by id."
  resultDescription: "Retrieves a historic detail by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the detail."
  queryParameters:
    deserializeValue:
      id: "deserializeValue"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/history/external-task-log/{id}/error-details"
  description: "Retrieves the corresponding error details of the passed historic external\
    \ task log by id."
  resultDescription: "Retrieves the corresponding error details of the passed historic\
    \ external task log by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the historic external task log to get the error details\
        \ for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Historic external task log with given id does not exist. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/history/external-task-log/count"
  description: "Queries for the number of historic external task logs that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get External Task Logs"
  resultDescription: "Queries for the number of historic external task logs that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get External Task Logs"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    workerId:
      id: "workerId"
      type: null
      description: "Filter by the id of the worker that the task was most recently\
        \ locked by."
    deletionLog:
      id: "deletionLog"
      type: null
      description: "Only include deletion logs. Value may only be true, as false is\
        \ the default behavior."
    creationLog:
      id: "creationLog"
      type: null
      description: "Only include creation logs. Value may only be true, as false is\
        \ the default behavior."
    successLog:
      id: "successLog"
      type: null
      description: "Only include success logs. Value may only be true, as false is\
        \ the default behavior."
    errorMessage:
      id: "errorMessage"
      type: null
      description: "Filter by external task exception message."
    executionIdIn:
      id: "executionIdIn"
      type: null
      description: "Only include historic external task logs which belong to one of\
        \ the passed execution ids."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by process definition key."
    failureLog:
      id: "failureLog"
      type: null
      description: "Only include failure logs. Value may only be true, as false is\
        \ the default behavior."
    priorityLowerThanOrEquals:
      id: "priorityLowerThanOrEquals"
      type: null
      description: "Only include logs for which the associated external task had a\
        \ priority lower than or equal to the given value. Value must be a valid long\
        \ value."
    priorityHigherThanOrEquals:
      id: "priorityHigherThanOrEquals"
      type: null
      description: "Only include logs for which the associated external task had a\
        \ priority higher than or equal to the given value. Value must be a valid\
        \ long value."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include historic external task log entries which belong to\
        \ one of the passed and comma-separated tenant ids."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include historic external task logs which belong to one of\
        \ the passed activity instance ids."
    topicName:
      id: "topicName"
      type: null
      description: "Filter by an external task topic."
    logId:
      id: "logId"
      type: null
      description: "Filter by historic external task log id."
    externalTaskId:
      id: "externalTaskId"
      type: null
      description: "Filter by external task id."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Only include historic external task logs which belong to one of\
        \ the passed activity ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid."
- method: "GET"
  path: "/history/external-task-log"
  description: "Queries for historic external task logs that fulfill the given parameters.\n\
    The size of the result set can be retrieved by using the Get External Task Log\
    \ Count"
  resultDescription: "Queries for historic external task logs that fulfill the given\
    \ parameters.\nThe size of the result set can be retrieved by using the Get External\
    \ Task Log Count"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    workerId:
      id: "workerId"
      type: null
      description: "Filter by the id of the worker that the task was most recently\
        \ locked by."
    deletionLog:
      id: "deletionLog"
      type: null
      description: "Only include deletion logs. Value may only be true, as false is\
        \ the default behavior."
    creationLog:
      id: "creationLog"
      type: null
      description: "Only include creation logs. Value may only be true, as false is\
        \ the default behavior."
    successLog:
      id: "successLog"
      type: null
      description: "Only include success logs. Value may only be true, as false is\
        \ the default behavior."
    errorMessage:
      id: "errorMessage"
      type: null
      description: "Filter by external task exception message."
    executionIdIn:
      id: "executionIdIn"
      type: null
      description: "Only include historic external task logs which belong to one of\
        \ the passed execution ids."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by process definition key."
    failureLog:
      id: "failureLog"
      type: null
      description: "Only include failure logs. Value may only be true, as false is\
        \ the default behavior."
    priorityLowerThanOrEquals:
      id: "priorityLowerThanOrEquals"
      type: null
      description: "Only include logs for which the associated external task had a\
        \ priority lower than or equal to the given value. Value must be a valid long\
        \ value."
    priorityHigherThanOrEquals:
      id: "priorityHigherThanOrEquals"
      type: null
      description: "Only include logs for which the associated external task had a\
        \ priority higher than or equal to the given value. Value must be a valid\
        \ long value."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include historic external task log entries which belong to\
        \ one of the passed and comma-separated tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include historic external task logs which belong to one of\
        \ the passed activity instance ids."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    topicName:
      id: "topicName"
      type: null
      description: "Filter by an external task topic."
    logId:
      id: "logId"
      type: null
      description: "Filter by historic external task log id."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are timestamp,\
        \ taskId, topicName, workerId, retries, priority, activityId, activityInstanceId,\
        \ executionId, processInstanceId, processDefinitionId, processDefinitionKey\
        \ and tenantId. Must be used in conjunction with the sortOrder parameter."
    externalTaskId:
      id: "externalTaskId"
      type: null
      description: "Filter by external task id."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Only include historic external task logs which belong to one of\
        \ the passed activity ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/external-task-log/{id}"
  description: "Retrieves a historic external task log by id."
  resultDescription: "Retrieves a historic external task log by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the log entry."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Historic external task log with given id does not exist. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/history/external-task-log/count"
  description: "Queries for the number of historic external task logs that fulfill\
    \ the given parameters.\nThis method takes the same message body as the Get External\
    \ Task Logs (POST)Get External Task Log Count"
  resultDescription: "Queries for the number of historic external task logs that fulfill\
    \ the given parameters.\nThis method takes the same message body as the Get External\
    \ Task Logs (POST)Get External Task Log Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/history/external-task-log"
  description: "Queries for historic external task logs that fulfill the given parameters.\n\
    This method is slightly more powerful than the Get External Task Logs`String`,\
    \ `Number` or `Boolean`."
  resultDescription: "Queries for historic external task logs that fulfill the given\
    \ parameters.\nThis method is slightly more powerful than the Get External Task\
    \ Logs`String`, `Number` or `Boolean`."
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    workerId:
      id: "workerId"
      type: null
      description: "Filter by the id of the worker that the task was most recently\
        \ locked by."
    deletionLog:
      id: "deletionLog"
      type: null
      description: "Only include deletion logs. Value may only be true, as false is\
        \ the default behavior."
    creationLog:
      id: "creationLog"
      type: null
      description: "Only include creation logs. Value may only be true, as false is\
        \ the default behavior."
    successLog:
      id: "successLog"
      type: null
      description: "Only include success logs. Value may only be true, as false is\
        \ the default behavior."
    errorMessage:
      id: "errorMessage"
      type: null
      description: "Filter by external task exception message."
    executionIdIn:
      id: "executionIdIn"
      type: null
      description: "Only include historic external task logs which belong to one of\
        \ the passed execution ids."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by process definition key."
    failureLog:
      id: "failureLog"
      type: null
      description: "Only include failure logs. Value may only be true, as false is\
        \ the default behavior."
    priorityLowerThanOrEquals:
      id: "priorityLowerThanOrEquals"
      type: null
      description: "Only include logs for which the associated external task had a\
        \ priority lower than or equal to the given value. Value must be a valid long\
        \ value."
    priorityHigherThanOrEquals:
      id: "priorityHigherThanOrEquals"
      type: null
      description: "Only include logs for which the associated external task had a\
        \ priority higher than or equal to the given value. Value must be a valid\
        \ long value."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include historic external task log entries which belong to\
        \ one of the passed and comma-separated tenant ids."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include historic external task logs which belong to one of\
        \ the passed activity instance ids."
    sorting:
      id: "sorting"
      type: null
      description: "sortBy"
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Mandatory. Sort the results in a given order. Values may be asc\
        \ for ascending order or desc for descending order."
    topicName:
      id: "topicName"
      type: null
      description: "Filter by an external task topic."
    logId:
      id: "logId"
      type: null
      description: "Filter by historic external task log id."
    sortBy:
      id: "sortBy"
      type: null
      description: "Mandatory. Sort the results by a given criterion. Valid values\
        \ are timestamp, taskId, topicName, workerId, retries, priority, activityId,\
        \ activityInstanceId, executionId, processInstanceId, processDefinitionId,\
        \ processDefinitionKey and tenantId."
    externalTaskId:
      id: "externalTaskId"
      type: null
      description: "Filter by external task id."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Only include historic external task logs which belong to one of\
        \ the passed activity ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/identity-link-log/count"
  description: "Queries for the number of historic identity link logs that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get Identity-Link-Logs"
  resultDescription: "Queries for the number of historic identity link logs that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get Identity-Link-Logs"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Restricts to identity links that have the given process definition\
        \ id."
    dateAfter:
      id: "dateAfter"
      type: null
      description: "Restricts to identity links that have the time after the given\
        \ time."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids."
    dateBefore:
      id: "dateBefore"
      type: null
      description: "Restricts to identity links that have the time before the given\
        \ time."
    groupId:
      id: "groupId"
      type: null
      description: "Restricts to identity links that have the given group id."
    operationType:
      id: "operationType"
      type: null
      description: "Restricts to identity links that have the given operationType\
        \ (add/delete)."
    type:
      id: "type"
      type: null
      description: "Restricts to identity links that have the given type(candidate/assignee/owner)."
    userId:
      id: "userId"
      type: null
      description: "Restricts to identity links that have the given user id."
    taskId:
      id: "taskId"
      type: null
      description: "Restricts to identity links that have the given task id."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Restricts to identity links that have the given process definition\
        \ key."
    assignerId:
      id: "assignerId"
      type: null
      description: "Restricts to identity links that have the given assigner id."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/identity-link-log"
  description: "Queries for historic identity link logs that fulfill given parameters.\n\
    The size of the result set can be retrieved by using the Get Identity-Link-Log\
    \ Count"
  resultDescription: "Queries for historic identity link logs that fulfill given parameters.\n\
    The size of the result set can be retrieved by using the Get Identity-Link-Log\
    \ Count"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Restricts to identity links that have the given process definition\
        \ id."
    groupId:
      id: "groupId"
      type: null
      description: "Restricts to identity links that have the given group id."
    type:
      id: "type"
      type: null
      description: "Restricts to identity links that have the given type (candidate/assignee/owner)."
    userId:
      id: "userId"
      type: null
      description: "Restricts to identity links that have the given user id."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Restricts to identity links that have the given process definition\
        \ key."
    dateAfter:
      id: "dateAfter"
      type: null
      description: "Restricts to identity links that have the time after the given\
        \ time."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids."
    dateBefore:
      id: "dateBefore"
      type: null
      description: "Restricts to identity links that have the time before the given\
        \ time."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    operationType:
      id: "operationType"
      type: null
      description: "Restricts to identity links that have the given operationType\
        \ (add/delete)."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are time, type, userId, groupId, taskId, processDefinitionId, processDefinitionKey,\
        \ operationType, assignerId, tenantId. Must be used in conjunction with the\
        \ sortOrder parameter."
    taskId:
      id: "taskId"
      type: null
      description: "Restricts to identity links that have the given task id."
    assignerId:
      id: "assignerId"
      type: null
      description: "Restricts to identity links that have the given assigner id."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/incident/count"
  description: "Queries for the number of historic incidents that fulfill the given\
    \ parameters.\nTakes the same parameters as the Get Incidents"
  resultDescription: "Queries for the number of historic incidents that fulfill the\
    \ given parameters.\nTakes the same parameters as the Get Incidents"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Restricts to incidents that belong to a process definition with\
        \ the given id."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Restricts to incidents that belong to a process instance with\
        \ the given id."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Restricts to incidents that have the given incident message."
    configuration:
      id: "configuration"
      type: null
      description: "Restricts to incidents that have the given parameter set as configuration."
    jobDefinitionIdIn:
      id: "jobDefinitionIdIn"
      type: null
      description: "Restricts to incidents that have one of the given comma-separated\
        \ job definition ids."
    causeIncidentId:
      id: "causeIncidentId"
      type: null
      description: "Restricts to incidents that have the given incident id as cause\
        \ incident."
    incidentType:
      id: "incidentType"
      type: null
      description: "Restricts to incidents that belong to the given incident type.\
        \ See the User Guide for a list of incident types."
    executionId:
      id: "executionId"
      type: null
      description: "Restricts to incidents that belong to an execution with the given\
        \ id."
    activityId:
      id: "activityId"
      type: null
      description: "Restricts to incidents that belong to an activity with the given\
        \ id."
    deleted:
      id: "deleted"
      type: null
      description: "Restricts to incidents that are deleted."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Restricts to incidents that have one of the given comma-separated\
        \ tenant ids."
    rootCauseIncidentId:
      id: "rootCauseIncidentId"
      type: null
      description: "Restricts to incidents that have the given incident id as root\
        \ cause incident."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are incidentId, createTime, endTime, incidentType, executionId, activityId,\
        \ processInstanceId, processDefinitionId, causeIncidentId, rootCauseIncidentId,\
        \ configuration and tenantId. Must be used in conjunction with the sortOrder\
        \ parameter."
    incidentId:
      id: "incidentId"
      type: null
      description: "Restricts to incidents that have the given id."
    open:
      id: "open"
      type: null
      description: "Restricts to incidents that are open."
    resolved:
      id: "resolved"
      type: null
      description: "Restricts to incidents that are resolved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/incident"
  description: "Queries for historic incidents that fulfill given parameters.\nThe\
    \ size of the result set can be retrieved by using the Get Incident Count"
  resultDescription: "Queries for historic incidents that fulfill given parameters.\n\
    The size of the result set can be retrieved by using the Get Incident Count"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Restricts to incidents that belong to a process definition with\
        \ the given id."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Restricts to incidents that belong to a process instance with\
        \ the given id."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Restricts to incidents that have the given incident message."
    configuration:
      id: "configuration"
      type: null
      description: "Restricts to incidents that have the given parameter set as configuration."
    jobDefinitionIdIn:
      id: "jobDefinitionIdIn"
      type: null
      description: "Restricts to incidents that have one of the given comma-separated\
        \ job definition ids."
    causeIncidentId:
      id: "causeIncidentId"
      type: null
      description: "Restricts to incidents that have the given incident id as cause\
        \ incident."
    incidentType:
      id: "incidentType"
      type: null
      description: "Restricts to incidents that belong to the given incident type.\
        \ See the User Guide for a list of incident types."
    executionId:
      id: "executionId"
      type: null
      description: "Restricts to incidents that belong to an execution with the given\
        \ id."
    activityId:
      id: "activityId"
      type: null
      description: "Restricts to incidents that belong to an activity with the given\
        \ id."
    deleted:
      id: "deleted"
      type: null
      description: "Restricts to incidents that are deleted."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Restricts to incidents that have one of the given comma-separated\
        \ tenant ids."
    rootCauseIncidentId:
      id: "rootCauseIncidentId"
      type: null
      description: "Restricts to incidents that have the given incident id as root\
        \ cause incident."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are incidentId, createTime, endTime, incidentType, executionId, activityId,\
        \ processInstanceId, processDefinitionId, causeIncidentId, rootCauseIncidentId,\
        \ configuration, tenantId and incidentState. Must be used in conjunction with\
        \ the sortOrder parameter."
    incidentId:
      id: "incidentId"
      type: null
      description: "Restricts to incidents that have the given id."
    open:
      id: "open"
      type: null
      description: "Restricts to incidents that are open."
    resolved:
      id: "resolved"
      type: null
      description: "Restricts to incidents that are resolved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/job-log/count"
  description: "Queries for the number of historic job logs that fulfill the given\
    \ parameters.\nTakes the same parameters as the Get Job Logs"
  resultDescription: "Queries for the number of historic job logs that fulfill the\
    \ given parameters.\nTakes the same parameters as the Get Job Logs"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    jobDefinitionId:
      id: "jobDefinitionId"
      type: null
      description: "Filter by job definition id."
    deletionLog:
      id: "deletionLog"
      type: null
      description: "Only include deletion logs. Value may only be true, as false is\
        \ the default behavior."
    creationLog:
      id: "creationLog"
      type: null
      description: "Only include creation logs. Value may only be true, as false is\
        \ the default behavior."
    jobPriorityHigherThanOrEquals:
      id: "jobPriorityHigherThanOrEquals"
      type: null
      description: "Only include logs for which the associated job had a priority\
        \ higher than or equal to the given value. Value must be a valid long value."
    successLog:
      id: "successLog"
      type: null
      description: "Only include success logs. Value may only be true, as false is\
        \ the default behavior."
    jobDefinitionConfiguration:
      id: "jobDefinitionConfiguration"
      type: null
      description: "Filter by job definition configuration."
    executionIdIn:
      id: "executionIdIn"
      type: null
      description: "Only include historic job logs which belong to one of the passed\
        \ execution ids."
    jobExceptionMessage:
      id: "jobExceptionMessage"
      type: null
      description: "Filter by job exception message."
    jobPriorityLowerThanOrEquals:
      id: "jobPriorityLowerThanOrEquals"
      type: null
      description: "Only include logs for which the associated job had a priority\
        \ lower than or equal to the given value. Value must be a valid long value."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by process definition key."
    jobDefinitionType:
      id: "jobDefinitionType"
      type: null
      description: "Filter by job definition type. See the User Guide for more information\
        \ about job definition types."
    failureLog:
      id: "failureLog"
      type: null
      description: "Only include failure logs. Value may only be true, as false is\
        \ the default behavior."
    jobId:
      id: "jobId"
      type: null
      description: "Filter by job id."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include historic job log entries which belong to one of the\
        \ passed and comma-separated tenant ids."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by deployment id."
    logId:
      id: "logId"
      type: null
      description: "Filter by historic job log id."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Only include historic job logs which belong to one of the passed\
        \ activity ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid."
- method: "GET"
  path: "/history/job-log"
  description: "Queries for historic job logs that fulfill the given parameters.\n\
    The size of the result set can be retrieved by using the Get Job Log Count"
  resultDescription: "Queries for historic job logs that fulfill the given parameters.\n\
    The size of the result set can be retrieved by using the Get Job Log Count"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    jobDefinitionId:
      id: "jobDefinitionId"
      type: null
      description: "Filter by job definition id."
    deletionLog:
      id: "deletionLog"
      type: null
      description: "Only include deletion logs. Value may only be true, as false is\
        \ the default behavior."
    creationLog:
      id: "creationLog"
      type: null
      description: "Only include creation logs. Value may only be true, as false is\
        \ the default behavior."
    jobPriorityHigherThanOrEquals:
      id: "jobPriorityHigherThanOrEquals"
      type: null
      description: "Only include logs for which the associated job had a priority\
        \ higher than or equal to the given value. Value must be a valid long value."
    successLog:
      id: "successLog"
      type: null
      description: "Only include success logs. Value may only be true, as false is\
        \ the default behavior."
    jobDefinitionConfiguration:
      id: "jobDefinitionConfiguration"
      type: null
      description: "Filter by job definition configuration."
    executionIdIn:
      id: "executionIdIn"
      type: null
      description: "Only include historic job logs which belong to one of the passed\
        \ execution ids."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    jobExceptionMessage:
      id: "jobExceptionMessage"
      type: null
      description: "Filter by job exception message."
    jobPriorityLowerThanOrEquals:
      id: "jobPriorityLowerThanOrEquals"
      type: null
      description: "Only include logs for which the associated job had a priority\
        \ lower than or equal to the given value. Value must be a valid long value."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by process definition key."
    jobDefinitionType:
      id: "jobDefinitionType"
      type: null
      description: "Filter by job definition type. See the User Guide for more information\
        \ about job definition types."
    failureLog:
      id: "failureLog"
      type: null
      description: "Only include failure logs. Value may only be true, as false is\
        \ the default behavior."
    jobId:
      id: "jobId"
      type: null
      description: "Filter by job id."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include historic job log entries which belong to one of the\
        \ passed and comma-separated tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by deployment id."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    logId:
      id: "logId"
      type: null
      description: "Filter by historic job log id."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are timestamp,\
        \ jobId, jobDefinitionId, jobDueDate, jobRetries, jobPriority, activityId,\
        \ executionId, processInstanceId, processDefinitionId, processDefinitionKey,\
        \ deploymentId, occurrence and tenantId. Must be used in conjunction with\
        \ the sortOrder parameter."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Only include historic job logs which belong to one of the passed\
        \ activity ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/job-log/{id}/stacktrace"
  description: "Retrieves the corresponding exception stacktrace to the passed historic\
    \ job log by id."
  resultDescription: "Retrieves the corresponding exception stacktrace to the passed\
    \ historic job log by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the historic job log to get the exception stacktrace\
        \ for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Historic job log with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/job-log/{id}"
  description: "Retrieves a historic job log by id."
  resultDescription: "Retrieves a historic job log by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the log entry."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Historic job log with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/history/job-log/count"
  description: "Queries for the number of historic job logs that fulfill the given\
    \ parameters.\nThis method takes the same message body as the Get Job Logs (POST)Get\
    \ Job Log Count"
  resultDescription: "Queries for the number of historic job logs that fulfill the\
    \ given parameters.\nThis method takes the same message body as the Get Job Logs\
    \ (POST)Get Job Log Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/history/job-log"
  description: "Queries for historic job logs that fulfill the given parameters.\n\
    This method is slightly more powerful than the Get Job Logs`String`, `Number`\
    \ or `Boolean`."
  resultDescription: "Queries for historic job logs that fulfill the given parameters.\n\
    This method is slightly more powerful than the Get Job Logs`String`, `Number`\
    \ or `Boolean`."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/history/cleanup"
  description: "Schedules asynchronous history cleanup (See History cleanup"
  resultDescription: "Schedules asynchronous history cleanup (See History cleanup"
  queryParameters:
    executeAtOnce:
      id: "executeAtOnce"
      type: null
      description: "When true the job will be scheduled for nearest future. When false,\
        \ the job will be scheduled for next batch window start time. Default is `true`."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid."
- method: "GET"
  path: "/history/process-definition/{id}/statistics"
  description: "Retrieves historic statistics of a given process definition, grouped\
    \ by activities.\nThese statistics include the number of running activity instances\
    \ and, optionally, the number of canceled activity instances, finished activity\
    \ instances and activity instances which completed a scope (i.e., in BPMN 2.0\
    \ manner: a scope is completed by an activity instance when the activity instance\
    \ consumed a token but did not emit a new token).\n This only includes historic\
    \ data."
  resultDescription: "Retrieves historic statistics of a given process definition,\
    \ grouped by activities.\nThese statistics include the number of running activity\
    \ instances and, optionally, the number of canceled activity instances, finished\
    \ activity instances and activity instances which completed a scope (i.e., in\
    \ BPMN 2.0 manner: a scope is completed by an activity instance when the activity\
    \ instance consumed a token but did not emit a new token).\n This only includes\
    \ historic data."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition."
  queryParameters:
    canceled:
      id: "canceled"
      type: null
      description: "Whether to include the number of canceled activity instances in\
        \ the result or not. Valid values are true or false."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    finished:
      id: "finished"
      type: null
      description: "Whether to include the number of finished activity instances in\
        \ the result or not. Valid values are true or false."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. A valid value is activityId.\
        \ Must be used in conjunction with the sortOrder parameter."
    completeScope:
      id: "completeScope"
      type: null
      description: "Whether to include the number of activity instances which completed\
        \ a scope in the result or not. Valid values are true or false."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "DELETE"
  path: "/history/process-instance/{id}"
  description: "Deletes a process instance from the history by id."
  resultDescription: "Deletes a process instance from the history by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the historic process instance to be deleted."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Historic process instance with given id does not exist. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/history/process-instance/report?reportType=duration"
  description: "Retrieves a report about the duration of completed process instances,\
    \ grouped by a period. These reports include the maximum, minimum and average\
    \ duration of all completed process instances which were started in a given period."
  resultDescription: "Retrieves a report about the duration of completed process instances,\
    \ grouped by a period. These reports include the maximum, minimum and average\
    \ duration of all completed process instances which were started in a given period."
  queryParameters:
    reportType:
      id: "reportType"
      type: null
      description: "Mandatory. Specifies the type of the report to retrieve. To retrieve\
        \ a report about the duration of process instances, the value must be set\
        \ to duration."
    processDefinitionKeyIn:
      id: "processDefinitionKeyIn"
      type: null
      description: "Filter by process definition keys. Must be a comma-separated list\
        \ of process definition keys."
    processDefinitionIdIn:
      id: "processDefinitionIdIn"
      type: null
      description: "Filter by process definition ids. Must be a comma-separated list\
        \ of process definition ids."
    startedAfter:
      id: "startedAfter"
      type: null
      description: "Restrict to instances that were started after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2016-01-23T14:42:45."
    periodUnit:
      id: "periodUnit"
      type: null
      description: "Mandatory. Specifies the granularity of the report. Valid values\
        \ are month and quarter."
    startedBefore:
      id: "startedBefore"
      type: null
      description: "Restrict to instances that were started before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2016-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful. In case of an expected application/csv or\
        \ text/csv response to retrieve the result as a csv file."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid or mandatory\
        \ parameters are not supplied. See the Introduction for the error response\
        \ format."
    403:
      id: "403"
      type: null
      description: "If the authenticated user is unauthorized to read the history.\
        \ See the Introduction for the error response format."
- method: "GET"
  path: "/history/process-instance/count"
  description: "Queries for the number of historic process instances that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get Process Instances"
  resultDescription: "Queries for the number of historic process instances that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get Process Instances"
  queryParameters:
    subCaseInstanceId:
      id: "subCaseInstanceId"
      type: null
      description: "Restrict query to one process instance that has a sub case instance\
        \ with the given id."
    executedActivityAfter:
      id: "executedActivityAfter"
      type: null
      description: "Restrict to instances that executed an activity after the given\
        \ date (inclusive). The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
    processDefinitionName:
      id: "processDefinitionName"
      type: null
      description: "Filter by the name of the process definition the instances run\
        \ on."
    executedJobAfter:
      id: "executedJobAfter"
      type: null
      description: "Restrict to instances that executed an job after the given date\
        \ (inclusive). The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by the key of the process definition the instances run\
        \ on."
    subProcessInstanceId:
      id: "subProcessInstanceId"
      type: null
      description: "Restrict query to one process instance that has a sub process\
        \ instance with the given id."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A process instance\
        \ must have one of the given tenant ids."
    processInstanceBusinessKey:
      id: "processInstanceBusinessKey"
      type: null
      description: "Filter by process instance business key."
    processDefinitionKeyNotIn:
      id: "processDefinitionKeyNotIn"
      type: null
      description: "Exclude instances that belong to a set of process definitions.\
        \ Must be a comma-separated list of process definition keys."
    unfinished:
      id: "unfinished"
      type: null
      description: "Only include unfinished process instances. Value may only be true,\
        \ as false is the default behavior."
    startedAfter:
      id: "startedAfter"
      type: null
      description: "Restrict to instances that were started after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    executedActivityBefore:
      id: "executedActivityBefore"
      type: null
      description: "Restrict to instances that executed an activity before the given\
        \ date (inclusive). The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
    withIncidents:
      id: "withIncidents"
      type: null
      description: "Only include process instances which have an incident. Value may\
        \ only be true, as false is the default behavior."
    superProcessInstanceId:
      id: "superProcessInstanceId"
      type: null
      description: "Restrict query to all process instances that are sub process instances\
        \ of the given process instance. Takes a process instance id."
    incidentStatus:
      id: "incidentStatus"
      type: null
      description: "Only include process instances which have an incident in status\
        \ either open or resolved. To get all process instances, use the query parameter\
        \ withIncidents."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the process definition the instances run on."
    processDefinitionNameLike:
      id: "processDefinitionNameLike"
      type: null
      description: "Filter by process definition names that the parameter is a substring\
        \ of."
    finishedAfter:
      id: "finishedAfter"
      type: null
      description: "Restrict to instances that were finished after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    variables:
      id: "variables"
      type: null
      description: "Only include process instances that have/had variables with certain\
        \ values. Variable filtering expressions are comma-separated and are structured\
        \ as follows: A valid parameter value has the form key_operator_value. key\
        \ is the variable name, operator is the comparison operator to be used and\
        \ value the variable value. Note: Values are always treated as String objects\
        \ on server side. Valid operator values are: eq - equal to; neq - not equal\
        \ to; gt - greater than; gteq - greater than or equal to; lt - lower than;\
        \ lteq - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Filter by the incident message. Exact match."
    startedBy:
      id: "startedBy"
      type: null
      description: "Only include process instances that were started by the given\
        \ user."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Restrict query to all process instances that are sub process instances\
        \ of the given case instance. Takes a case instance id."
    finished:
      id: "finished"
      type: null
      description: "Only include finished process instances. Value may only be true,\
        \ as false is the default behavior."
    superCaseInstanceId:
      id: "superCaseInstanceId"
      type: null
      description: "Restrict query to all process instances that are sub process instances\
        \ of the given case instance. Takes a case instance id."
    processInstanceIds:
      id: "processInstanceIds"
      type: null
      description: "Filter by process instance ids. Must be a comma-separated list\
        \ of process instance ids."
    processInstanceBusinessKeyLike:
      id: "processInstanceBusinessKeyLike"
      type: null
      description: "Filter by process instance business key that the parameter is\
        \ a substring of."
    startedBefore:
      id: "startedBefore"
      type: null
      description: "Restrict to instances that were started before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    incidentMessageLike:
      id: "incidentMessageLike"
      type: null
      description: "Filter by the incident message that the parameter is a substring\
        \ of."
    finishedBefore:
      id: "finishedBefore"
      type: null
      description: "Restrict to instances that were finished before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    executedJobBefore:
      id: "executedJobBefore"
      type: null
      description: "Restrict to instances that executed an job before the given date\
        \ (inclusive). The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/history/process-instance"
  description: "Queries for historic process instances that fulfill the given parameters.\n\
    The size of the result set can be retrieved by using the Get Process Instance\
    \ Count"
  resultDescription: "Queries for historic process instances that fulfill the given\
    \ parameters.\nThe size of the result set can be retrieved by using the Get Process\
    \ Instance Count"
  queryParameters:
    subCaseInstanceId:
      id: "subCaseInstanceId"
      type: null
      description: "Restrict query to one process instance that has a sub case instance\
        \ with the given id."
    executedActivityAfter:
      id: "executedActivityAfter"
      type: null
      description: "Restrict to instances that executed an activity after the given\
        \ date (inclusive). The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    processDefinitionName:
      id: "processDefinitionName"
      type: null
      description: "Filter by the name of the process definition the instances run\
        \ on."
    executedJobAfter:
      id: "executedJobAfter"
      type: null
      description: "Restrict to instances that executed an job after the given date\
        \ (inclusive). The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by the key of the process definition the instances run\
        \ on."
    subProcessInstanceId:
      id: "subProcessInstanceId"
      type: null
      description: "Restrict query to one process instance that has a sub process\
        \ instance with the given id."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A process instance\
        \ must have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    processInstanceBusinessKey:
      id: "processInstanceBusinessKey"
      type: null
      description: "Filter by process instance business key."
    processDefinitionKeyNotIn:
      id: "processDefinitionKeyNotIn"
      type: null
      description: "Exclude instances that belong to a set of process definitions.\
        \ Must be a comma-separated list of process definition keys."
    unfinished:
      id: "unfinished"
      type: null
      description: "Only include unfinished process instances. Value may only be true,\
        \ as false is the default behavior."
    startedAfter:
      id: "startedAfter"
      type: null
      description: "Restrict to instances that were started after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are instanceId,\
        \ definitionId, definitionKey, definitionName, definitionVersion, businessKey,\
        \ startTime, endTime, duration and tenantId. Must be used in conjunction with\
        \ the sortOrder parameter."
    executedActivityBefore:
      id: "executedActivityBefore"
      type: null
      description: "Restrict to instances that executed an activity before the given\
        \ date (inclusive). The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
    withIncidents:
      id: "withIncidents"
      type: null
      description: "Only include process instances which have an incident. Value may\
        \ only be true, as false is the default behavior."
    superProcessInstanceId:
      id: "superProcessInstanceId"
      type: null
      description: "Restrict query to all process instances that are sub process instances\
        \ of the given process instance. Takes a process instance id."
    incidentStatus:
      id: "incidentStatus"
      type: null
      description: "Only include process instances which have an incident in status\
        \ either open or resolved. To get all process instances, use the query parameter\
        \ withIncidents."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the process definition the instances run on."
    processDefinitionNameLike:
      id: "processDefinitionNameLike"
      type: null
      description: "Filter by process definition names that the parameter is a substring\
        \ of."
    finishedAfter:
      id: "finishedAfter"
      type: null
      description: "Restrict to instances that were finished after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    variables:
      id: "variables"
      type: null
      description: "Only include process instances that have/had variables with certain\
        \ values. Variable filtering expressions are comma-separated and are structured\
        \ as follows: A valid parameter value has the form key_operator_value. key\
        \ is the variable name, operator is the comparison operator to be used and\
        \ value the variable value. Note: Values are always treated as String objects\
        \ on server side. Valid operator values are: eq - equal to; neq - not equal\
        \ to; gt - greater than; gteq - greater than or equal to; lt - lower than;\
        \ lteq - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Filter by the incident message. Exact match."
    startedBy:
      id: "startedBy"
      type: null
      description: "Only include process instances that were started by the given\
        \ user."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Restrict query to all process instances that are sub process instances\
        \ of the given case instance. Takes a case instance id."
    finished:
      id: "finished"
      type: null
      description: "Only include finished process instances. Value may only be true,\
        \ as false is the default behavior."
    superCaseInstanceId:
      id: "superCaseInstanceId"
      type: null
      description: "Restrict query to all process instances that are sub process instances\
        \ of the given case instance. Takes a case instance id."
    processInstanceIds:
      id: "processInstanceIds"
      type: null
      description: "Filter by process instance ids. Must be a comma-separated list\
        \ of process instance ids."
    processInstanceBusinessKeyLike:
      id: "processInstanceBusinessKeyLike"
      type: null
      description: "Filter by process instance business key that the parameter is\
        \ a substring of."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    startedBefore:
      id: "startedBefore"
      type: null
      description: "Restrict to instances that were started before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    incidentMessageLike:
      id: "incidentMessageLike"
      type: null
      description: "Filter by the incident message that the parameter is a substring\
        \ of."
    finishedBefore:
      id: "finishedBefore"
      type: null
      description: "Restrict to instances that were finished before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    executedJobBefore:
      id: "executedJobBefore"
      type: null
      description: "Restrict to instances that executed an job before the given date\
        \ (inclusive). The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g.,\
        \ 2013-01-23T14:42:45."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/process-instance/{id}"
  description: "Retrieves a historic process instance by id, according to the `HistoricProcessInstance`\
    \ interface in the engine."
  resultDescription: "Retrieves a historic process instance by id, according to the\
    \ `HistoricProcessInstance` interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the historic process instance to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Historic process instance with given id does not exist. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/history/process-instance/delete"
  description: "Delete multiple historic process instances asynchronously (batch).\n\
    At least  or  has to be provided. If both are provided\nthen all instances matching\
    \ query criterion and instances from the list will be deleted."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, i.e. neither\
        \ historicProcessInstanceIds, nor historicProcessInstanceQuery is present.\
        \ See the Introduction for the error response format."
- method: "POST"
  path: "/history/process-instance/count"
  description: "Queries for the number of historic process instances that fulfill\
    \ the given parameters.\nThis method takes the same message body as the Get Process\
    \ Instances (POST)Get Process Instance Count"
  resultDescription: "Queries for the number of historic process instances that fulfill\
    \ the given parameters.\nThis method takes the same message body as the Get Process\
    \ Instances (POST)Get Process Instance Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/history/process-instance"
  description: "Queries for historic process instances that fulfill the given parameters.\n\
    This method is slightly more powerful than the Get Process Instances`String`,\
    \ `Number` or `Boolean`."
  resultDescription: "Queries for historic process instances that fulfill the given\
    \ parameters.\nThis method is slightly more powerful than the Get Process Instances`String`,\
    \ `Number` or `Boolean`."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/task/count"
  description: "Queries for the number of historic tasks that fulfill the given parameters.\n\
    Takes the same parameters as the Get Tasks (Historic)"
  resultDescription: "Queries for the number of historic tasks that fulfill the given\
    \ parameters.\nTakes the same parameters as the Get Tasks (Historic)"
  queryParameters:
    taskInvolvedGroup:
      id: "taskInvolvedGroup"
      type: null
      description: "Restrict to tasks with a historic identity link to the given group."
    taskOwner:
      id: "taskOwner"
      type: null
      description: "Restrict to tasks that the given user owns."
    withCandidateGroups:
      id: "withCandidateGroups"
      type: null
      description: "Only include tasks which have a candidate group. Value may only\
        \ be true, as false is the default behavior."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Restrict to tasks that belong to a case definition with the given\
        \ key."
    taskDescription:
      id: "taskDescription"
      type: null
      description: "Restrict to tasks that have the given description."
    processDefinitionName:
      id: "processDefinitionName"
      type: null
      description: "Restrict to tasks that belong to a process definition with the\
        \ given name."
    unassigned:
      id: "unassigned"
      type: null
      description: "If set to true, restricts the query to all tasks that are unassigned."
    caseDefinitionName:
      id: "caseDefinitionName"
      type: null
      description: "Restrict to tasks that belong to a case definition with the given\
        \ name."
    withoutCandidateGroups:
      id: "withoutCandidateGroups"
      type: null
      description: "Only include tasks which have no candidate group. Value may only\
        \ be true, as false is the default behavior."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Restrict to tasks that belong to a process definition with the\
        \ given key."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A task instance\
        \ must have one of the given tenant ids."
    processUnfinished:
      id: "processUnfinished"
      type: null
      description: "Only include tasks of unfinished processes. Value may only be\
        \ true, as false is the default behavior."
    taskVariables:
      id: "taskVariables"
      type: null
      description: "Only include tasks that have variables with certain values. Variable\
        \ filtering expressions are comma-separated and are structured as follows:\
        \ A valid parameter value has the form key_operator_value. key is the variable\
        \ name, operator is the comparison operator to be used and value the variable\
        \ value. Note: Values are always treated as String objects on server side.\
        \ Valid operator values are: eq - equal to; neq - not equal to; gt - greater\
        \ than; gteq - greater than or equal to; lt - lower than; lteq - lower than\
        \ or equal to; like. key and value may not contain underscore or comma characters."
    taskParentTaskId:
      id: "taskParentTaskId"
      type: null
      description: "Filter by parent task id."
    taskFollowUpDateBefore:
      id: "taskFollowUpDateBefore"
      type: null
      description: "Restrict to tasks that have a followUp date before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    unfinished:
      id: "unfinished"
      type: null
      description: "Only include unfinished tasks. Value may only be true, as false\
        \ is the default behavior."
    taskHadCandidateGroup:
      id: "taskHadCandidateGroup"
      type: null
      description: "Restrict to tasks with a historic identity link to the given candidate\
        \ group."
    taskDueDateAfter:
      id: "taskDueDateAfter"
      type: null
      description: "Restrict to tasks that are due after the given date. The date\
        \ must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    taskFollowUpDateAfter:
      id: "taskFollowUpDateAfter"
      type: null
      description: "Restrict to tasks that have a followUp date after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Filter by the id of the case execution that executed the task."
    taskInvolvedUser:
      id: "taskInvolvedUser"
      type: null
      description: "Restrict to tasks with a historic identity link to the given user."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by case definition id."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    taskPriority:
      id: "taskPriority"
      type: null
      description: "Restrict to tasks that have the given priority."
    taskFollowUpDate:
      id: "taskFollowUpDate"
      type: null
      description: "Restrict to tasks that have a followUp date on the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    finished:
      id: "finished"
      type: null
      description: "Only include finished tasks. Value may only be true, as false\
        \ is the default behavior."
    taskNameLike:
      id: "taskNameLike"
      type: null
      description: "Restrict to tasks that have a name with the given parameter value\
        \ as substring."
    processFinished:
      id: "processFinished"
      type: null
      description: "Only include tasks of finished processes. Value may only be true,\
        \ as false is the default behavior."
    taskAssigneeLike:
      id: "taskAssigneeLike"
      type: null
      description: "Restrict to tasks that are assigned to users with the parameter\
        \ value as a substring."
    executionId:
      id: "executionId"
      type: null
      description: "Filter by the id of the execution that executed the task."
    taskDefinitionKey:
      id: "taskDefinitionKey"
      type: null
      description: "Restrict to tasks that have the given key."
    taskDeleteReasonLike:
      id: "taskDeleteReasonLike"
      type: null
      description: "Restrict to tasks that have a delete reason that has the parameter\
        \ value as a substring."
    taskDueDate:
      id: "taskDueDate"
      type: null
      description: "Restrict to tasks that are due on the given date. The date must\
        \ have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include tasks which belong to one of the passed and comma-separated\
        \ activity instance ids."
    taskAssignee:
      id: "taskAssignee"
      type: null
      description: "Restrict to tasks that the given user is assigned to."
    taskName:
      id: "taskName"
      type: null
      description: "Restrict to tasks that have the given name."
    taskDefinitionKeyIn:
      id: "taskDefinitionKeyIn"
      type: null
      description: "Restrict to tasks that have one of the passed and comma-separated\
        \ task definition keys."
    assigned:
      id: "assigned"
      type: null
      description: "If set to true, restricts the query to all tasks that are assigned."
    taskDeleteReason:
      id: "taskDeleteReason"
      type: null
      description: "Restrict to tasks that have the given delete reason."
    taskDueDateBefore:
      id: "taskDueDateBefore"
      type: null
      description: "Restrict to tasks that are due before the given date. The date\
        \ must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    processVariables:
      id: "processVariables"
      type: null
      description: "Only include tasks that belong to process instances that have\
        \ variables with certain values. Variable filtering expressions are comma-separated\
        \ and are structured as follows: A valid parameter value has the form key_operator_value.\
        \ key is the variable name, operator is the comparison operator to be used\
        \ and value the variable value. Note: Values are always treated as String\
        \ objects on server side. Valid operator values are: eq - equal to; neq -\
        \ not equal to; gt - greater than; gteq - greater than or equal to; lt - lower\
        \ than; lteq - lower than or equal to; like. key and value may not contain\
        \ underscore or comma characters."
    taskDescriptionLike:
      id: "taskDescriptionLike"
      type: null
      description: "Restrict to tasks that have a description that has the parameter\
        \ value as a substring."
    taskOwnerLike:
      id: "taskOwnerLike"
      type: null
      description: "Restrict to tasks that are owned by users with the parameter value\
        \ as a substring."
    taskHadCandidateUser:
      id: "taskHadCandidateUser"
      type: null
      description: "Restrict to tasks with a historic identity link to the given candidate\
        \ user."
    taskId:
      id: "taskId"
      type: null
      description: "Filter by task id."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/history/task"
  description: "Queries for historic tasks that fulfill the given parameters.\nThe\
    \ size of the result set can be retrieved by using the Get Task Count"
  resultDescription: "Queries for historic tasks that fulfill the given parameters.\n\
    The size of the result set can be retrieved by using the Get Task Count"
  queryParameters:
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Restrict to tasks that belong to a case definition with the given\
        \ key."
    taskDescription:
      id: "taskDescription"
      type: null
      description: "Restrict to tasks that have the given description."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    processDefinitionName:
      id: "processDefinitionName"
      type: null
      description: "Restrict to tasks that belong to a process definition with the\
        \ given name."
    unassigned:
      id: "unassigned"
      type: null
      description: "If set to true, restricts the query to all tasks that are unassigned."
    caseDefinitionName:
      id: "caseDefinitionName"
      type: null
      description: "Restrict to tasks that belong to a case definition with the given\
        \ name."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A task instance\
        \ must have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    taskParentTaskId:
      id: "taskParentTaskId"
      type: null
      description: "Filter by parent task id."
    taskFollowUpDateBefore:
      id: "taskFollowUpDateBefore"
      type: null
      description: "Restrict to tasks that have a followUp date before the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are taskId,\
        \ activityInstanceID, processDefinitionId, processInstanceId, executionId,\
        \ duration, endTime, startTime, taskName, taskDescription, assignee, owner,\
        \ dueDate, followUpDate, deleteReason, taskDefinitionKey, priority, caseDefinitionId,\
        \ caseInstanceId, caseExecutionId and tenantId. Must be used in conjunction\
        \ with the sortOrder parameter."
    taskHadCandidateGroup:
      id: "taskHadCandidateGroup"
      type: null
      description: "Restrict to tasks with a historic identity link to the given candidate\
        \ group."
    taskDueDateAfter:
      id: "taskDueDateAfter"
      type: null
      description: "Restrict to tasks that are due after the given date. The date\
        \ must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    taskFollowUpDateAfter:
      id: "taskFollowUpDateAfter"
      type: null
      description: "Restrict to tasks that have a followUp date after the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Filter by the id of the case execution that executed the task."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by case definition id."
    taskFollowUpDate:
      id: "taskFollowUpDate"
      type: null
      description: "Restrict to tasks that have a followUp date on the given date.\
        \ The date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    finished:
      id: "finished"
      type: null
      description: "Only include finished tasks. Value may only be true, as false\
        \ is the default behavior."
    taskNameLike:
      id: "taskNameLike"
      type: null
      description: "Restrict to tasks that have a name with the given parameter value\
        \ as substring."
    taskAssigneeLike:
      id: "taskAssigneeLike"
      type: null
      description: "Restrict to tasks that are assigned to users with the parameter\
        \ value as a substring."
    executionId:
      id: "executionId"
      type: null
      description: "Filter by the id of the execution that executed the task."
    taskDefinitionKey:
      id: "taskDefinitionKey"
      type: null
      description: "Restrict to tasks that have the given key."
    taskDeleteReasonLike:
      id: "taskDeleteReasonLike"
      type: null
      description: "Restrict to tasks that have a delete reason that has the parameter\
        \ value as a substring."
    taskDueDate:
      id: "taskDueDate"
      type: null
      description: "Restrict to tasks that are due on the given date. The date must\
        \ have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    taskName:
      id: "taskName"
      type: null
      description: "Restrict to tasks that have the given name."
    taskDefinitionKeyIn:
      id: "taskDefinitionKeyIn"
      type: null
      description: "Restrict to tasks that have one of the passed and comma-separated\
        \ task definition keys."
    assigned:
      id: "assigned"
      type: null
      description: "If set to true, restricts the query to all tasks that are assigned."
    taskDueDateBefore:
      id: "taskDueDateBefore"
      type: null
      description: "Restrict to tasks that are due before the given date. The date\
        \ must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    taskInvolvedGroup:
      id: "taskInvolvedGroup"
      type: null
      description: "Restrict to tasks with a historic identity link to the given group."
    taskOwner:
      id: "taskOwner"
      type: null
      description: "Restrict to tasks that the given user owns."
    withCandidateGroups:
      id: "withCandidateGroups"
      type: null
      description: "Only include tasks which have a candidate group. Value may only\
        \ be true, as false is the default behavior."
    withoutCandidateGroups:
      id: "withoutCandidateGroups"
      type: null
      description: "Only include tasks which have no candidate group. Value may only\
        \ be true, as false is the default behavior."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Restrict to tasks that belong to a process definition with the\
        \ given key."
    processUnfinished:
      id: "processUnfinished"
      type: null
      description: "Only include tasks of unfinished processes. Value may only be\
        \ true, as false is the default behavior."
    taskVariables:
      id: "taskVariables"
      type: null
      description: "Only include tasks that have variables with certain values. Variable\
        \ filtering expressions are comma-separated and are structured as follows:\
        \ A valid parameter value has the form key_operator_value. key is the variable\
        \ name, operator is the comparison operator to be used and value the variable\
        \ value. Note: Values are always treated as String objects on server side.\
        \ Valid operator values are: eq - equal to; neq - not equal to; gt - greater\
        \ than; gteq - greater than or equal to; lt - lower than; lteq - lower than\
        \ or equal to; like. key and value may not contain underscore or comma characters."
    unfinished:
      id: "unfinished"
      type: null
      description: "Only include unfinished tasks. Value may only be true, as false\
        \ is the default behavior."
    taskInvolvedUser:
      id: "taskInvolvedUser"
      type: null
      description: "Restrict to tasks with a historic identity link to the given user."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    taskPriority:
      id: "taskPriority"
      type: null
      description: "Restrict to tasks that have the given priority."
    processFinished:
      id: "processFinished"
      type: null
      description: "Only include tasks of finished processes. Value may only be true,\
        \ as false is the default behavior."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include tasks which belong to one of the passed and comma-separated\
        \ activity instance ids."
    taskAssignee:
      id: "taskAssignee"
      type: null
      description: "Restrict to tasks that the given user is assigned to."
    taskDeleteReason:
      id: "taskDeleteReason"
      type: null
      description: "Restrict to tasks that have the given delete reason."
    processVariables:
      id: "processVariables"
      type: null
      description: "Only include tasks that belong to process instances that have\
        \ variables with certain values. Variable filtering expressions are comma-separated\
        \ and are structured as follows: A valid parameter value has the form key_operator_value.\
        \ key is the variable name, operator is the comparison operator to be used\
        \ and value the variable value. Note: Values are always treated as String\
        \ objects on server side. Valid operator values are: eq - equal to; neq -\
        \ not equal to; gt - greater than; gteq - greater than or equal to; lt - lower\
        \ than; lteq - lower than or equal to; like. key and value may not contain\
        \ underscore or comma characters."
    taskDescriptionLike:
      id: "taskDescriptionLike"
      type: null
      description: "Restrict to tasks that have a description that has the parameter\
        \ value as a substring."
    taskOwnerLike:
      id: "taskOwnerLike"
      type: null
      description: "Restrict to tasks that are owned by users with the parameter value\
        \ as a substring."
    taskHadCandidateUser:
      id: "taskHadCandidateUser"
      type: null
      description: "Restrict to tasks with a historic identity link to the given candidate\
        \ user."
    taskId:
      id: "taskId"
      type: null
      description: "Filter by task id."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/task/report"
  description: "Retrieves a report of completed tasks. When the report type is set\
    \ to count, the report contains a list of\ncompleted task counts where an entry\
    \ contains the task name, the definition key of the task, the process definition\
    \ id,\nthe process definition key, the process definition name and the count of\
    \ how many tasks were completed for the specified\nkey in a given period. When\
    \ the report type is set to duration, the report contains a minimum, maximum and\n\
    average duration value of all completed task instances in a given period."
  queryParameters:
    reportType:
      id: "reportType"
      type: null
      description: "Mandatory. Specifies the kind of the report to execute. To retrieve\
        \ a report about the duration of process instances the value must be set to\
        \ duration. For a report of the completed tasks in a specific timespan the\
        \ value must be set to count."
    completedBefore:
      id: "completedBefore"
      type: null
      description: "Restrict to tasks that were completed before the given date. The\
        \ date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    completedAfter:
      id: "completedAfter"
      type: null
      description: "Restrict to tasks that were completed after the given date. The\
        \ date must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2013-01-23T14:42:45."
    groupBy:
      id: "groupBy"
      type: null
      description: "When the report type is set to count, this parameter is Mandatory.\
        \ Groups the tasks report by a given criterion. Valid values are taskName\
        \ and processDefinition."
    periodUnit:
      id: "periodUnit"
      type: null
      description: "When the report type is set to duration, this parameter is Mandatory.\
        \ Specifies the granularity of the report. Valid values are month and quarter."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a completedAfter parameter is supplied, but the date format is wrong.\
        \ See the Introduction for the error response format."
- method: "POST"
  path: "/history/task/count"
  description: "Queries for the number of historic tasks that fulfill the given parameters.\n\
    Takes the same parameters as the Get Tasks (Historic)\nCorresponds to the size\
    \ of the result set of the Get Tasks (Historic) (POST)"
  resultDescription: "Queries for the number of historic tasks that fulfill the given\
    \ parameters.\nTakes the same parameters as the Get Tasks (Historic)\nCorresponds\
    \ to the size of the result set of the Get Tasks (Historic) (POST)"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/history/task"
  description: "Queries for historic tasks that fulfill the given parameters.\nThis\
    \ method is slightly more powerful than the Get Tasks (Historic)\nfiltering by\
    \ multiple process or task variables of types `String`, `Number` or `Boolean`.\n\
    The size of the result set can be retrieved by using the Get Task Count (POST)"
  resultDescription: "Queries for historic tasks that fulfill the given parameters.\n\
    This method is slightly more powerful than the Get Tasks (Historic)\nfiltering\
    \ by multiple process or task variables of types `String`, `Number` or `Boolean`.\n\
    The size of the result set can be retrieved by using the Get Task Count (POST)"
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results, if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/user-operation/count"
  description: "Queries for the number of user operation log entries that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get User Operation Log\
    \ (Historic)"
  resultDescription: "Queries for the number of user operation log entries that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get User Operation Log\
    \ (Historic)"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Filter by case execution id."
    jobDefinitionId:
      id: "jobDefinitionId"
      type: null
      description: "Filter by job definition id."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by case definition id."
    entityType:
      id: "entityType"
      type: null
      description: "Filter by the type of the entity that was affected by this operation,\
        \ possible values are Task, Attachment or IdentityLink."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    userId:
      id: "userId"
      type: null
      description: "Only include operations of this user."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by process definition key."
    beforeTimestamp:
      id: "beforeTimestamp"
      type: null
      description: "Restrict to entries that were created before the given timestamp.\
        \ The timestamp must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2014-02-25T14:58:37."
    executionId:
      id: "executionId"
      type: null
      description: "Filter by execution id."
    jobId:
      id: "jobId"
      type: null
      description: "Filter by job id."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by deployment id."
    property:
      id: "property"
      type: null
      description: "Only include operations that changed this property, e.g., owner\
        \ or assignee."
    operationId:
      id: "operationId"
      type: null
      description: "Filter by the id of the operation. This allows fetching of multiple\
        \ entries which are part of a composite operation."
    operationType:
      id: "operationType"
      type: null
      description: "Filter by the type of the operation like Claim or Delegate. See\
        \ the for a list of available operation types."
    afterTimestamp:
      id: "afterTimestamp"
      type: null
      description: "Restrict to entries that were created after the given timestamp.\
        \ The timestamp must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2014-02-25T14:58:37."
    taskId:
      id: "taskId"
      type: null
      description: "Only include operations on this task."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/history/user-operation"
  description: "Queries for user operation log entries that fulfill the given parameters.\n\
    The size of the result set can be retrieved by using the Get User Operation Log\
    \ Count"
  resultDescription: "Queries for user operation log entries that fulfill the given\
    \ parameters.\nThe size of the result set can be retrieved by using the Get User\
    \ Operation Log Count"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by process instance id."
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Filter by case execution id."
    jobDefinitionId:
      id: "jobDefinitionId"
      type: null
      description: "Filter by job definition id."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Filter by case definition id."
    entityType:
      id: "entityType"
      type: null
      description: "Filter by the type of the entity that was affected by this operation,\
        \ possible values are Task, Attachment or IdentityLink."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    userId:
      id: "userId"
      type: null
      description: "Only include operations of this user."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by process definition key."
    beforeTimestamp:
      id: "beforeTimestamp"
      type: null
      description: "Restrict to entries that were created before the given timestamp.\
        \ The timestamp must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2014-02-25T14:58:37."
    executionId:
      id: "executionId"
      type: null
      description: "Filter by execution id."
    jobId:
      id: "jobId"
      type: null
      description: "Filter by job id."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by deployment id."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    property:
      id: "property"
      type: null
      description: "Only include operations that changed this property, e.g., owner\
        \ or assignee."
    operationId:
      id: "operationId"
      type: null
      description: "Filter by the id of the operation. This allows fetching of multiple\
        \ entries which are part of a composite operation."
    operationType:
      id: "operationType"
      type: null
      description: "Filter by the type of the operation like Claim or Delegate. See\
        \ the for a list of available operation types."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. At the moment the query\
        \ only supports sorting based on the timestamp."
    afterTimestamp:
      id: "afterTimestamp"
      type: null
      description: "Restrict to entries that were created after the given timestamp.\
        \ The timestamp must have the format yyyy-MM-dd'T'HH:mm:ss, e.g., 2014-02-25T14:58:37."
    taskId:
      id: "taskId"
      type: null
      description: "Only include operations on this task."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/variable-instance/{id}/data"
  description: "Retrieves the content of a historic variable by id. Applicable for\
    \ variables that are serialized as binary data."
  resultDescription: "Retrieves the content of a historic variable by id. Applicable\
    \ for variables that are serialized as binary data."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the variable instance."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Variable with given id exists but is not a binary variable. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/history/variable-instance/count"
  description: "Queries for the number of historic variable instances that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get Variable Instances"
  resultDescription: "Queries for the number of historic variable instances that fulfill\
    \ the given parameters.\nTakes the same parameters as the Get Variable Instances"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by the process instance the variable belongs to."
    variableName:
      id: "variableName"
      type: null
      description: "Filter by variable name."
    caseActivityIdIn:
      id: "caseActivityIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated case activity ids."
    variableValue:
      id: "variableValue"
      type: null
      description: "Filter by variable value. Is treated as a String object on server\
        \ side."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated tenant ids."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by the case instance the variable belongs to."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated activity instance ids."
    executionIdIn:
      id: "executionIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated execution ids."
    variableNameLike:
      id: "variableNameLike"
      type: null
      description: "Restrict to variables with a name like the parameter."
    processInstanceIdIn:
      id: "processInstanceIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed process instance ids."
    taskIdIn:
      id: "taskIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated task ids."
    caseExecutionIdIn:
      id: "caseExecutionIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated case execution ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid."
- method: "GET"
  path: "/history/variable-instance"
  description: "Queries for historic variable instances that fulfill the given parameters.\n\
    The size of the result set can be retrieved by using the Get Variable Instance\
    \ Count"
  resultDescription: "Queries for historic variable instances that fulfill the given\
    \ parameters.\nThe size of the result set can be retrieved by using the Get Variable\
    \ Instance Count"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Filter by the process instance the variable belongs to."
    variableName:
      id: "variableName"
      type: null
      description: "Filter by variable name."
    variableTypeIn:
      id: "variableTypeIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated variable types."
    caseActivityIdIn:
      id: "caseActivityIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated case activity ids."
    variableValue:
      id: "variableValue"
      type: null
      description: "Filter by variable value. Is treated as a String object on server\
        \ side."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by the case instance the variable belongs to."
    executionIdIn:
      id: "executionIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated execution ids."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    processInstanceIdIn:
      id: "processInstanceIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated variable types. A list of all supported variable\
        \ types can be found here. Note: All non-primitive variables are assoziated\
        \ with the type \"serializable\"."
    taskIdIn:
      id: "taskIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated task ids."
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated activity instance ids."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    variableNameLike:
      id: "variableNameLike"
      type: null
      description: "Restrict to variables with a name like the parameter."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are instanceId,\
        \ variableName and tenantId. Must be used in conjunction with the sortOrder\
        \ parameter."
    caseExecutionIdIn:
      id: "caseExecutionIdIn"
      type: null
      description: "Only include historic variable instances which belong to one of\
        \ the passed and comma-separated case execution ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/history/variable-instance/{id}"
  description: "Retrieves a historic variable by id."
  resultDescription: "Retrieves a historic variable by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the variable instance."
  queryParameters:
    deserializeValue:
      id: "deserializeValue"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "POST"
  path: "/history/variable-instance/count"
  description: "Queries for historic variable instances that fulfill the given parameters.\n\
    This method takes the same message body as the Get Variable Instances (POST)Get\
    \ Variable Instance Count"
  resultDescription: "Queries for historic variable instances that fulfill the given\
    \ parameters.\nThis method takes the same message body as the Get Variable Instances\
    \ (POST)Get Variable Instance Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/history/variable-instance"
  description: "Queries for historic variable instances that fulfill the given parameters.\n\
    This method is slightly more powerful than the Get Variable Instances`String`,\
    \ `Number` or `Boolean`."
  resultDescription: "Queries for historic variable instances that fulfill the given\
    \ parameters.\nThis method is slightly more powerful than the Get Variable Instances`String`,\
    \ `Number` or `Boolean`."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/identity/groups"
  description: "Gets the groups of a user by id and includes all users that share\
    \ a group with the given user."
  resultDescription: "Gets the groups of a user by id and includes all users that\
    \ share a group with the given user."
  queryParameters:
    userId:
      id: "userId"
      type: null
      description: "The id of the user to get the groups for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "If the userId query parameter is missing. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/identity/verify"
  description: "Verifies that user credentials are valid."
  resultDescription: "Verifies that user credentials are valid."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "If body does not contain username or password."
- method: "GET"
  path: "/incident/count"
  description: "Queries for the number of incidents that fulfill given parameters.\n\
    Takes the same parameters as the Get Incidents"
  resultDescription: "Queries for the number of incidents that fulfill given parameters.\n\
    Takes the same parameters as the Get Incidents"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Restricts to incidents that belong to a process definition with\
        \ the given id."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Restricts to incidents that belong to a process instance with\
        \ the given id."
    executionId:
      id: "executionId"
      type: null
      description: "Restricts to incidents that belong to an execution with the given\
        \ id."
    activityId:
      id: "activityId"
      type: null
      description: "Restricts to incidents that belong to an activity with the given\
        \ id."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Restricts to incidents that have the given incident message."
    configuration:
      id: "configuration"
      type: null
      description: "Restricts to incidents that have the given parameter set as configuration."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Restricts to incidents that have one of the given comma-separated\
        \ tenant ids."
    jobDefinitionIdIn:
      id: "jobDefinitionIdIn"
      type: null
      description: "Restricts to incidents that have one of the given comma-separated\
        \ job definition ids."
    causeIncidentId:
      id: "causeIncidentId"
      type: null
      description: "Restricts to incidents that have the given incident id as cause\
        \ incident."
    rootCauseIncidentId:
      id: "rootCauseIncidentId"
      type: null
      description: "Restricts to incidents that have the given incident id as root\
        \ cause incident."
    incidentType:
      id: "incidentType"
      type: null
      description: "Restricts to incidents that belong to the given incident type.\
        \ See the User Guide for a list of incident types."
    incidentId:
      id: "incidentId"
      type: null
      description: "Restricts to incidents that have the given id."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/incident"
  description: "Queries for incidents that fulfill given parameters.\nThe size of\
    \ the result set can be retrieved by using the Get Incident Count"
  resultDescription: "Queries for incidents that fulfill given parameters.\nThe size\
    \ of the result set can be retrieved by using the Get Incident Count"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Restricts to incidents that belong to a process definition with\
        \ the given id."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Restricts to incidents that belong to a process instance with\
        \ the given id."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Restricts to incidents that have the given incident message."
    configuration:
      id: "configuration"
      type: null
      description: "Restricts to incidents that have the given parameter set as configuration."
    jobDefinitionIdIn:
      id: "jobDefinitionIdIn"
      type: null
      description: "Restricts to incidents that have one of the given comma-separated\
        \ job definition ids."
    causeIncidentId:
      id: "causeIncidentId"
      type: null
      description: "Restricts to incidents that have the given incident id as cause\
        \ incident."
    incidentType:
      id: "incidentType"
      type: null
      description: "Restricts to incidents that belong to the given incident type.\
        \ See the User Guide for a list of incident types."
    executionId:
      id: "executionId"
      type: null
      description: "Restricts to incidents that belong to an execution with the given\
        \ id."
    activityId:
      id: "activityId"
      type: null
      description: "Restricts to incidents that belong to an activity with the given\
        \ id."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Restricts to incidents that have one of the given comma-separated\
        \ tenant ids."
    rootCauseIncidentId:
      id: "rootCauseIncidentId"
      type: null
      description: "Restricts to incidents that have the given incident id as root\
        \ cause incident."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are incidentId, incidentTimestamp, incidentType, executionId, activityId,\
        \ processInstanceId, processDefinitionId, causeIncidentId, rootCauseIncidentId,\
        \ configuration and tenantId. Must be used in conjunction with the sortOrder\
        \ parameter."
    incidentId:
      id: "incidentId"
      type: null
      description: "Restricts to incidents that have the given id."
- method: "DELETE"
  path: "/job/{id}"
  description: "Deletes a job by id."
  resultDescription: "Deletes a job by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job to be deleted."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The job could not be deleted. See the Introduction for the error\
        \ response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Job with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "GET"
  path: "/job/{id}/stacktrace"
  description: "Retrieves the exception stacktrace corresponding to the passed job\
    \ id."
  resultDescription: "Retrieves the exception stacktrace corresponding to the passed\
    \ job id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job to get the exception stacktrace for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Job with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "GET"
  path: "/job/count"
  description: "Queries for the number of jobs that fulfill given parameters.\nTakes\
    \ the same parameters as the Get Jobs"
  resultDescription: "Queries for the number of jobs that fulfill given parameters.\n\
    Takes the same parameters as the Get Jobs"
  queryParameters:
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Only select jobs which exist for the given process instance."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the id of the process definition the jobs run on."
    jobDefinitionId:
      id: "jobDefinitionId"
      type: null
      description: "Only select jobs which exist for the given job definition."
    timers:
      id: "timers"
      type: null
      description: "Only select jobs that are timers. Cannot be used together with\
        \ messages. Value may only be true, as false is the default behavior."
    withRetriesLeft:
      id: "withRetriesLeft"
      type: null
      description: "Only select jobs which have retries left. Value may only be true,\
        \ as false is the default behavior."
    dueDates:
      id: "dueDates"
      type: null
      description: "Only select jobs where the due date is lower or higher than the\
        \ given date. Due date expressions are comma-separated and are structured\
        \ as follows: A valid condition value has the form operator_value. operator\
        \ is the comparison operator to be used and value the date value as string.\
        \ Valid operator values are: gt - greater than; lt - lower than. value may\
        \ not contain underscore or comma characters."
    active:
      id: "active"
      type: null
      description: "Only include active jobs. Value may only be true, as false is\
        \ the default behavior."
    executable:
      id: "executable"
      type: null
      description: "Only select jobs which are executable, i.e., retries > 0 and due\
        \ date is null or due date is in the past. Value may only be true, as false\
        \ is the default behavior."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended jobs. Value may only be true, as false\
        \ is the default behavior."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by the key of the process definition the jobs run on."
    jobId:
      id: "jobId"
      type: null
      description: "Filter by job id."
    executionId:
      id: "executionId"
      type: null
      description: "Only select jobs which exist for the given execution."
    activityId:
      id: "activityId"
      type: null
      description: "Only select jobs which exist for an activity with the given id."
    priorityLowerThanOrEquals:
      id: "priorityLowerThanOrEquals"
      type: null
      description: "Only include jobs with a priority lower than or equal to the given\
        \ value. Value must be a valid long value."
    withException:
      id: "withException"
      type: null
      description: "Only select jobs that failed due to an exception. Value may only\
        \ be true, as false is the default behavior."
    priorityHigherThanOrEquals:
      id: "priorityHigherThanOrEquals"
      type: null
      description: "Only include jobs with a priority higher than or equal to the\
        \ given value. Value must be a valid long value."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include jobs which belong to one of the passed and comma-separated\
        \ tenant ids."
    includeJobsWithoutTenantId:
      id: "includeJobsWithoutTenantId"
      type: null
      description: "Include jobs which belong to no tenant. Can be used in combination\
        \ with tenantIdIn. Value may only be true, as false is the default behavior."
    messages:
      id: "messages"
      type: null
      description: "Only select jobs that are messages. Cannot be used together with\
        \ timers. Value may only be true, as false is the default behavior."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include jobs which belong to no tenant. Value may only be\
        \ true, as false is the default behavior."
    noRetriesLeft:
      id: "noRetriesLeft"
      type: null
      description: "Only select jobs which have no retries left. Value may only be\
        \ true, as false is the default behavior."
    exceptionMessage:
      id: "exceptionMessage"
      type: null
      description: "Only select jobs that failed due to an exception with the given\
        \ message."
- method: "GET"
  path: "/job"
  description: "Queries for jobs that fulfill given parameters.\nThe size of the result\
    \ set can be retrieved by using the Get Job Count"
  resultDescription: "Queries for jobs that fulfill given parameters.\nThe size of\
    \ the result set can be retrieved by using the Get Job Count"
  queryParameters:
    withRetriesLeft:
      id: "withRetriesLeft"
      type: null
      description: "Only select jobs which have retries left. Value may only be true,\
        \ as false is the default behavior."
    dueDates:
      id: "dueDates"
      type: null
      description: "Only select jobs where the due date is lower or higher than the\
        \ given date. Due date expressions are comma-separated and are structured\
        \ as follows: A valid condition value has the form operator_value. operator\
        \ is the comparison operator to be used and value the date value as string.\
        \ Valid operator values are: gt - greater than; lt - lower than. value may\
        \ not contain underscore or comma characters."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by the key of the process definition the jobs run on."
    activityId:
      id: "activityId"
      type: null
      description: "Only select jobs which exist for an activity with the given id."
    priorityLowerThanOrEquals:
      id: "priorityLowerThanOrEquals"
      type: null
      description: "Only include jobs with a priority lower than or equal to the given\
        \ value. Value must be a valid long value."
    withException:
      id: "withException"
      type: null
      description: "Only select jobs that failed due to an exception. Value may only\
        \ be true, as false is the default behavior."
    priorityHigherThanOrEquals:
      id: "priorityHigherThanOrEquals"
      type: null
      description: "Only include jobs with a priority higher than or equal to the\
        \ given value. Value must be a valid long value."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include jobs which belong to one of the passed and comma-separated\
        \ tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results by a given criterion. Valid values are jobId,\
        \ executionId, processInstanceId, jobPriority, jobRetries, jobDueDate and\
        \ tenantId. Must be used in conjunction with the sortOrder parameter."
    exceptionMessage:
      id: "exceptionMessage"
      type: null
      description: "Only select jobs that failed due to an exception with the given\
        \ message."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Only select jobs which exist for the given process instance."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the id of the process definition the jobs run on."
    jobDefinitionId:
      id: "jobDefinitionId"
      type: null
      description: "Only select jobs which exist for the given job definition."
    timers:
      id: "timers"
      type: null
      description: "Only select jobs that are timers. Cannot be used together with\
        \ messages. Value may only be true, as false is the default behavior."
    active:
      id: "active"
      type: null
      description: "Only include active jobs. Value may only be true, as false is\
        \ the default behavior."
    executable:
      id: "executable"
      type: null
      description: "Only select jobs which are executable, i.e., retries > 0 and due\
        \ date is null or due date is in the past. Value may only be true, as false\
        \ is the default behavior."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended jobs. Value may only be true, as false\
        \ is the default behavior."
    jobId:
      id: "jobId"
      type: null
      description: "Filter by job id."
    executionId:
      id: "executionId"
      type: null
      description: "Only select jobs which exist for the given execution."
    includeJobsWithoutTenantId:
      id: "includeJobsWithoutTenantId"
      type: null
      description: "Include jobs which belong to no tenant. Can be used in combination\
        \ with tenantIdIn. Value may only be true, as false is the default behavior."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    messages:
      id: "messages"
      type: null
      description: "Only select jobs that are messages. Cannot be used together with\
        \ timers. Value may only be true, as false is the default behavior."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include jobs which belong to no tenant. Value may only be\
        \ true, as false is the default behavior."
    noRetriesLeft:
      id: "noRetriesLeft"
      type: null
      description: "Only select jobs which have no retries left. Value may only be\
        \ true, as false is the default behavior."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for due date comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/job/{id}"
  description: "Retrieves a job by id, according to the `Job` interface in the engine."
  resultDescription: "Retrieves a job by id, according to the `Job` interface in the\
    \ engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Job with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "POST"
  path: "/job/{id}/execute"
  description: "Executes a job by id. Note: The execution of the job happens synchronously\
    \ in the same thread."
  resultDescription: "Executes a job by id. Note: The execution of the job happens\
    \ synchronously in the same thread."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job to be executed."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The job could not be executed successfully. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Job with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "POST"
  path: "/job/count"
  description: "Queries for jobs that fulfill given parameters. This method takes\
    \ the same message body as the Get Jobs (POST)Get Job Count"
  resultDescription: "Queries for jobs that fulfill given parameters. This method\
    \ takes the same message body as the Get Jobs (POST)Get Job Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for due date comparison is used. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/job"
  description: "Queries for jobs that fulfill given parameters. This method is slightly\
    \ more powerful than the Get JobsString, Number or Boolean."
  resultDescription: "Queries for jobs that fulfill given parameters. This method\
    \ is slightly more powerful than the Get JobsString, Number or Boolean."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for due date comparison is used. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/job/retries"
  description: "Create a batch to set retries of jobs asynchronously."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if neither processInstanceIds nor processInstanceQuery is present. Or if\
        \ the retry count is not specified. See the Introduction for the error response\
        \ format."
- method: "PUT"
  path: "/job/{id}/suspended"
  description: "Activates or suspends a given job by id."
  resultDescription: "Activates or suspends a given job by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job to activate or suspend."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/job/suspended"
  description: "Activates or suspends jobs with the given job definition id."
  resultDescription: "Activates or suspends jobs with the given job definition id."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the jobDefinitionId parameter is null. See the Introduction for the error\
        \ response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/job/suspended"
  description: "Activates or suspends jobs with the given process definition id."
  resultDescription: "Activates or suspends jobs with the given process definition\
    \ id."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the processDefinitionId parameter is null. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/job/suspended"
  description: "Activates or suspends jobs with the given process definition key."
  resultDescription: "Activates or suspends jobs with the given process definition\
    \ key."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the processDefinitionKey parameter is null. See the Introduction for\
        \ the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/job/suspended"
  description: "Activates or suspends jobs with the given process instance id."
  resultDescription: "Activates or suspends jobs with the given process instance id."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the processInstanceId parameter is null. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/job/{id}/duedate"
  description: "Updates the due date of a job by id."
  resultDescription: "Updates the due date of a job by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job to be updated."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The due date could not be set successfully. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Job with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "PUT"
  path: "/job/{id}/priority"
  description: "Sets the execution priority of a job by id."
  resultDescription: "Sets the execution priority of a job by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job to be updated."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The priority could not be set successfully. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Job with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "PUT"
  path: "/job/{id}/retries"
  description: "Sets the retries of the job to the given number of retries by id."
  resultDescription: "Sets the retries of the job to the given number of retries by\
    \ id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job to be updated."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The retries could not be set successfully. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Job with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "GET"
  path: "/job-definition/count"
  description: "Queries for the number of job definitions that fulfill given parameters.\n\
    Takes the same parameters as the Get Job Definitions"
  resultDescription: "Queries for the number of job definitions that fulfill given\
    \ parameters.\nTakes the same parameters as the Get Job Definitions"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Only include job definitions which exist for the given process\
        \ definition id."
    jobDefinitionId:
      id: "jobDefinitionId"
      type: null
      description: "Filter by job definition id."
    includeJobDefinitionsWithoutTenantId:
      id: "includeJobDefinitionsWithoutTenantId"
      type: null
      description: "Include job definitions which belong to no tenant. Can be used\
        \ in combination with tenantIdIn. Value may only be true, as false is the\
        \ default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include job definitions which belong to one of the passed\
        \ and comma-separated tenant ids."
    withOverridingJobPriority:
      id: "withOverridingJobPriority"
      type: null
      description: "Only include job definitions that have an overriding job priority\
        \ defined. The only effective value is true. If set to false, this filter\
        \ is not applied."
    active:
      id: "active"
      type: null
      description: "Only include active job definitions. Value may only be true, as\
        \ false is the default behavior."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include job definitions which belong to no tenant. Value\
        \ may only be true, as false is the default behavior."
    jobConfiguration:
      id: "jobConfiguration"
      type: null
      description: "Only include job definitions which exist for the given job configuration.\
        \ For example: for timer jobs it is the timer configuration."
    jobType:
      id: "jobType"
      type: null
      description: "Only include job definitions which exist for the given job type.\
        \ See the User Guide for more information about job types."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended job definitions. Value may only be true,\
        \ as false is the default behavior."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Only include job definitions which belong to one of the passed\
        \ and comma-separated activity ids."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Only include job definitions which exist for the given process\
        \ definition key."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/job-definition"
  description: "Queries for job definitions that fulfill given parameters.\nThe size\
    \ of the result set can be retrieved by using the Get Job Definition Count"
  resultDescription: "Queries for job definitions that fulfill given parameters.\n\
    The size of the result set can be retrieved by using the Get Job Definition Count"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Only include job definitions which exist for the given process\
        \ definition id."
    jobDefinitionId:
      id: "jobDefinitionId"
      type: null
      description: "Filter by job definition id."
    withOverridingJobPriority:
      id: "withOverridingJobPriority"
      type: null
      description: "Only include job definitions that have an overriding job priority\
        \ defined. The only effective value is true. If set to false, this filter\
        \ is not applied."
    active:
      id: "active"
      type: null
      description: "Only include active job definitions. Value may only be true, as\
        \ false is the default behavior."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended job definitions. Value may only be true,\
        \ as false is the default behavior."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Only include job definitions which exist for the given process\
        \ definition key."
    includeJobDefinitionsWithoutTenantId:
      id: "includeJobDefinitionsWithoutTenantId"
      type: null
      description: "Include job definitions which belong to no tenant. Can be used\
        \ in combination with tenantIdIn. Value may only be true, as false is the\
        \ default behavior."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include job definitions which belong to one of the passed\
        \ and comma-separated tenant ids."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include job definitions which belong to no tenant. Value\
        \ may only be true, as false is the default behavior."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are jobDefinitionId, activityId, processDefinitionId, processDefinitionKey,\
        \ jobType, jobConfiguration and tenantId. Must be used in conjunction with\
        \ the sortOrder parameter."
    jobConfiguration:
      id: "jobConfiguration"
      type: null
      description: "Only include job definitions which exist for the given job configuration.\
        \ For example: for timer jobs it is the timer configuration."
    jobType:
      id: "jobType"
      type: null
      description: "Only include job definitions which exist for the given job type.\
        \ See the User Guide for more information about job types."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Only include job definitions which belong to one of the passed\
        \ and comma-separated activity ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/job-definition/{id}"
  description: "Retrieves a job definition by id, according to the `JobDefinition`\
    \ interface in the engine."
  resultDescription: "Retrieves a job definition by id, according to the `JobDefinition`\
    \ interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job definition to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Job definition with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/job-definition/count"
  description: "Queries for the number of job definitions that fulfill given parameters.\
    \ This method takes the same message body as the Get Job Definitions (POST)Get\
    \ Job Definition Count"
  resultDescription: "Queries for the number of job definitions that fulfill given\
    \ parameters. This method takes the same message body as the Get Job Definitions\
    \ (POST)Get Job Definition Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/job-definition"
  description: "Queries for job definitions that fulfill given parameters. This method\
    \ is slightly more powerful than the Get Job DefinitionsString, Number or Boolean."
  resultDescription: "Queries for job definitions that fulfill given parameters. This\
    \ method is slightly more powerful than the Get Job DefinitionsString, Number\
    \ or Boolean."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "PUT"
  path: "/job-definition/{id}/suspended"
  description: "Activates or suspends a given job definition by id."
  resultDescription: "Activates or suspends a given job definition by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job definition to activate or suspend."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the provided executionDate parameter doesn't have the expected format.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/job-definition/suspended"
  description: "Activates or suspends job definitions with the given process definition\
    \ id."
  resultDescription: "Activates or suspends job definitions with the given process\
    \ definition id."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the provided executionDate parameter doesn't have the expected format\
        \ or if the processDefinitionId parameter is null. See the Introduction for\
        \ the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/job-definition/suspended"
  description: "Activates or suspends job definitions with the given process definition\
    \ key."
  resultDescription: "Activates or suspends job definitions with the given process\
    \ definition key."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the provided executionDate parameter doesn't have the expected format\
        \ or if the processDefinitionKey parameter is null. See the Introduction for\
        \ the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/job-definition/{id}/jobPriority"
  description: "Sets an overriding execution priority for jobs with the given definition\
    \ id. Optionally, the priorities of all the definition's existing jobs are updated\
    \ accordingly. The priority can be reset by setting it to null, meaning that a\
    \ new job's priority will not be determined based on its definition's priority\
    \ any longer. See the user guide on job prioritization"
  resultDescription: "Sets an overriding execution priority for jobs with the given\
    \ definition id. Optionally, the priorities of all the definition's existing jobs\
    \ are updated accordingly. The priority can be reset by setting it to null, meaning\
    \ that a new job's priority will not be determined based on its definition's priority\
    \ any longer. See the user guide on job prioritization"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job definition to be updated."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The retries could not be set successfully. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Job definition with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "PUT"
  path: "/job-definition/{id}/retries"
  description: "Sets the number of retries of all failed jobs associated with the\
    \ given job definition id."
  resultDescription: "Sets the number of retries of all failed jobs associated with\
    \ the given job definition id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the job definition to be retrieved."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The retries could not be set successfully. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/message"
  description: "Correlates a message to the process engine to either trigger a message\
    \ start event or an intermediate message catching event.\nInternally this maps\
    \ to the engine's message correlation builder methods `MessageCorrelationBuilder#correlateWithResult()`\
    \ and `MessageCorrelationBuilder#correlateAllWithResult()`.\nFor more information\
    \ about the correlation behavior, see the Message EventsBPMN 2.0 Implementation\
    \ Reference"
  resultDescription: "Correlates a message to the process engine to either trigger\
    \ a message start event or an intermediate message catching event.\nInternally\
    \ this maps to the engine's message correlation builder methods `MessageCorrelationBuilder#correlateWithResult()`\
    \ and `MessageCorrelationBuilder#correlateAllWithResult()`.\nFor more information\
    \ about the correlation behavior, see the Message EventsBPMN 2.0 Implementation\
    \ Reference"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful. The property resultEnabled in the request\
        \ body was true."
    400:
      id: "400"
      type: null
      description: "If no messageName was supplied. If both tenantId and withoutTenantId\
        \ are supplied. If the message has not been correlated to exactly one entity\
        \ (execution or process definition), or the variable value or type is invalid,\
        \ for example if the value could not be parsed to an Integer value or the\
        \ passed variable type is not supported. See the Introduction for the error\
        \ response format."
    204:
      id: "204"
      type: null
      description: "Request successful. The property resultEnabled in the request\
        \ body was false (Default)."
- method: "GET"
  path: "/metrics"
  description: "Retrieves a list of metrics, aggregated for a given interval."
  resultDescription: "Retrieves a list of metrics, aggregated for a given interval."
  queryParameters:
    endDate:
      id: "endDate"
      type: null
      description: "The end date (exclusive)."
    maxResults:
      id: "maxResults"
      type: null
      description: "The maximum result size of the list which should be returned.\
        \ The maxResults can't be set larger than 200. Default: 200"
    name:
      id: "name"
      type: null
      description: "The name of the metric. Supported names: activity-instance-start,\
        \ activity-instance-end, job-acquisition-attempt, job-acquired-success, job-acquired-failure,\
        \ job-execution-rejected, job-successful, job-failed, job-locked-exclusive,\
        \ executed-decision-elements"
    firstResult:
      id: "firstResult"
      type: null
      description: "The index of the first result, used for paging."
    reporter:
      id: "reporter"
      type: null
      description: "The name of the reporter (host), on which the metrics was logged."
    interval:
      id: "interval"
      type: null
      description: "The interval for which the metrics should be aggregated. Time\
        \ unit is seconds. Default: The interval is set to 15 minutes (900 seconds)."
    startDate:
      id: "startDate"
      type: null
      description: "The start date (inclusive)."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid."
- method: "GET"
  path: "/metrics/{metrics-name}/sum"
  description: "Retrieves the `sum` (count) for a given metric."
  resultDescription: "Retrieves the `sum` (count) for a given metric."
  pathParameters:
    metrics-name:
      id: "metrics-name"
      type: null
      description: "The name of the metric. Supported names: activity-instance-start,\
        \ activity-instance-end, job-acquisition-attempt, job-acquired-success, job-acquired-failure,\
        \ job-execution-rejected, job-successful, job-failed, job-locked-exclusive,\
        \ executed-decision-elements"
  queryParameters:
    endDate:
      id: "endDate"
      type: null
      description: "The end date"
    startDate:
      id: "startDate"
      type: null
      description: "The start date"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/migration/executeAsync"
  description: "Executes a migration plan asynchronously (batch) for multiple process\
    \ instances.\nTo execute a migration plan synchronously, use the Execute Migration\
    \ Plan"
  resultDescription: "Executes a migration plan asynchronously (batch) for multiple\
    \ process instances.\nTo execute a migration plan synchronously, use the Execute\
    \ Migration Plan"
- method: "POST"
  path: "/migration/execute"
  description: "Executes a migration plan synchronously for multiple process instances.\
    \ To execute a migration plan asynchronously,\nuse the Execute Migration Plan\
    \ Async (Batch)"
  resultDescription: "Executes a migration plan synchronously for multiple process\
    \ instances. To execute a migration plan asynchronously,\nuse the Execute Migration\
    \ Plan Async (Batch)"
- method: "POST"
  path: "/migration/generate"
  description: "Generates a migration plan for two process definitions. The generated\
    \ migration\nplan contains migration instructions which map equal activities between\
    \ the\ntwo process definitions."
  resultDescription: "Generates a migration plan for two process definitions. The\
    \ generated migration\nplan contains migration instructions which map equal activities\
    \ between the\ntwo process definitions."
- method: "POST"
  path: "/migration/validate"
  description: "Validates a migration plan statically without executing it. This\n\
    corresponds to the creation time validation\nguide."
  resultDescription: "Validates a migration plan statically without executing it.\
    \ This\ncorresponds to the creation time validation\nguide."
- method: "POST"
  path: "/modification/executeAsync"
  description: "Executes a modification asynchronously for multiple process instances.\
    \ To execute a modification synchronously,\nuse the Execute Modification"
  resultDescription: "Executes a modification asynchronously for multiple process\
    \ instances. To execute a modification synchronously,\nuse the Execute Modification"
- method: "DELETE"
  path: "/process-definition/{id}"
  description: "Deletes a process definition from a deployment by id."
  resultDescription: "Deletes a process definition from a deployment by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition to be deleted."
  queryParameters:
    cascade:
      id: "cascade"
      type: null
      description: "true, if all process instances, historic process instances and\
        \ jobs for this process definition should be deleted."
    skipCustomListeners:
      id: "skipCustomListeners"
      type: null
      description: "true, if only the built-in ExecutionListeners should be notified\
        \ with the end event."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Process definition with id 'aProcessDefinitionId' does not exist.\
        \ See the Introduction for the error response format."
- method: "GET"
  path: "/process-definition/{id}/statistics"
  description: "Retrieves runtime statistics of a given process definition, grouped\
    \ by activities.\nThese statistics include the number of running activity instances,\
    \ optionally the number of failed jobs and also optionally the number of incidents\
    \ either grouped by incident types or for a specific incident type.\n This does\
    \ not include historic data."
  resultDescription: "Retrieves runtime statistics of a given process definition,\
    \ grouped by activities.\nThese statistics include the number of running activity\
    \ instances, optionally the number of failed jobs and also optionally the number\
    \ of incidents either grouped by incident types or for a specific incident type.\n\
    \ This does not include historic data."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition."
    key:
      id: "key"
      type: null
      description: "The key of the process definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the process definition belongs to."
  queryParameters:
    incidentsForType:
      id: "incidentsForType"
      type: null
      description: "If this property has been set with any incident type (i.e., a\
        \ String value) the result will only include the number of incidents for the\
        \ assigned incident type. See the User Guide for a list of incident types."
    failedJobs:
      id: "failedJobs"
      type: null
      description: "Whether to include the number of failed jobs in the result or\
        \ not. Valid values are true or false."
    incidents:
      id: "incidents"
      type: null
      description: "Valid values for this property are true or false. If this property\
        \ has been set to true the result will include the corresponding number of\
        \ incidents for each occurred incident type. If it is set to false, the incidents\
        \ will not be included in the result."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "If both query parameters incidents and incidentsForType were set.\
        \ See the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Process definition with given key does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/process-definition/{id}/diagram"
  description: "Retrieves the diagram of a process definition."
  resultDescription: "Retrieves the diagram of a process definition."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition."
    key:
      id: "key"
      type: null
      description: "The key of the process definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the process definition belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    204:
      id: "204"
      type: null
      description: "The process definition doesn't have an associated diagram."
    404:
      id: "404"
      type: null
      description: "Process definition with given id or key does not exist. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/process-definition/{id}/form-variables"
  description: "Retrieves the start form variables for a process definition (only\
    \ if they are defined via the Generated Task Form\nThe start form variables take\
    \ form data specified on the start event into account. If form fields are defined,\n\
    the variable types and default values of the form fields are taken into account."
  resultDescription: "Retrieves the start form variables for a process definition\
    \ (only if they are defined via the Generated Task Form\nThe start form variables\
    \ take form data specified on the start event into account. If form fields are\
    \ defined,\nthe variable types and default values of the form fields are taken\
    \ into account."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition to retrieve the variables for."
    key:
      id: "key"
      type: null
      description: "The key of the process definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the process definition belongs to."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
    variableNames:
      id: "variableNames"
      type: null
      description: "A comma-separated list of variable names. Allows restricting the\
        \ list of requested variables to the variable names in the list. It is best\
        \ practice to restrict the list of variables to the variables actually required\
        \ by the form in order to minimize fetching of data. If the query parameter\
        \ is ommitted all variables are fetched. If the query parameter contains non-existent\
        \ variable names, the variable names are ignored."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Process definition with given key does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/process-definition/count"
  description: "Requests the number of process definitions that fulfill the query\
    \ criteria. Takes the same filtering parameters as the\nGet Definitions"
  resultDescription: "Requests the number of process definitions that fulfill the\
    \ query criteria. Takes the same filtering parameters as the\nGet Definitions"
  queryParameters:
    resourceNameLike:
      id: "resourceNameLike"
      type: null
      description: "Filter by names of those process definition resources that the\
        \ parameter is a substring of."
    includeProcessDefinitionsWithoutTenantId:
      id: "includeProcessDefinitionsWithoutTenantId"
      type: null
      description: "Include process definitions which belong to no tenant. Can be\
        \ used in combination with tenantIdIn. Value may only be true, as false is\
        \ the default behavior."
    incidentType:
      id: "incidentType"
      type: null
      description: "Filter by the incident type. See the User Guide for a list of\
        \ incident types."
    categoryLike:
      id: "categoryLike"
      type: null
      description: "Filter by process definition categories that the parameter is\
        \ a substring of."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A process definition\
        \ must have one of the given tenant ids."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    startableBy:
      id: "startableBy"
      type: null
      description: "Filter by a user name who is allowed to start the process."
    key:
      id: "key"
      type: null
      description: "Filter by process definition key, i.e., the id in the BPMN 2.0\
        \ XML. Exact match."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Filter by the incident message. Exact match."
    processDefinitionIdIn:
      id: "processDefinitionIdIn"
      type: null
      description: "Filter by process definition ids."
    active:
      id: "active"
      type: null
      description: "Only include active process definitions. Value may only be true,\
        \ as false is the default behavior."
    resourceName:
      id: "resourceName"
      type: null
      description: "Filter by the name of the process definition resource. Exact match."
    versionTag:
      id: "versionTag"
      type: null
      description: "Filter by the version tag."
    versionTagLike:
      id: "versionTagLike"
      type: null
      description: "Filter by the version tag that the parameter is a substring of."
    version:
      id: "version"
      type: null
      description: "Filter by process definition version."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended process definitions. Value may only be\
        \ true, as false is the default behavior."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by process definition names that the parameter is a substring\
        \ of."
    latestVersion:
      id: "latestVersion"
      type: null
      description: "Only include those process definitions that are latest versions.\
        \ Value may only be true, as false is the default behavior."
    keyLike:
      id: "keyLike"
      type: null
      description: "Filter by process definition keys that the parameter is a substring\
        \ of."
    name:
      id: "name"
      type: null
      description: "Filter by process definition name."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include process definitions which belong to no tenant. Value\
        \ may only be true, as false is the default behavior."
    category:
      id: "category"
      type: null
      description: "Filter by process definition category. Exact match."
    incidentId:
      id: "incidentId"
      type: null
      description: "Filter by the incident id."
    incidentMessageLike:
      id: "incidentMessageLike"
      type: null
      description: "Filter by the incident message that the parameter is a substring\
        \ of."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/process-definition"
  description: "Queries for process definitions that fulfill given parameters. Parameters\
    \ may be the properties of process definitions, such as the name, key or version.\n\
    The size of the result set can be retrieved by using the Get Definition Count"
  resultDescription: "Queries for process definitions that fulfill given parameters.\
    \ Parameters may be the properties of process definitions, such as the name, key\
    \ or version.\nThe size of the result set can be retrieved by using the Get Definition\
    \ Count"
  queryParameters:
    resourceNameLike:
      id: "resourceNameLike"
      type: null
      description: "Filter by names of those process definition resources that the\
        \ parameter is a substring of."
    includeProcessDefinitionsWithoutTenantId:
      id: "includeProcessDefinitionsWithoutTenantId"
      type: null
      description: "Include process definitions which belong to no tenant. Can be\
        \ used in combination with tenantIdIn. Value may only be true, as false is\
        \ the default behavior."
    incidentType:
      id: "incidentType"
      type: null
      description: "Filter by the incident type. See the User Guide for a list of\
        \ incident types."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    categoryLike:
      id: "categoryLike"
      type: null
      description: "Filter by process definition categories that the parameter is\
        \ a substring of."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A process definition\
        \ must have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are category, key, id, name, version, deploymentId, tenantId and\
        \ versionTag. Must be used in conjunction with the sortOrder parameter. Note:\
        \ Sorting by versionTag is string based. The version will not be interpreted.\
        \ As an example, the sorting could return v0.1.0, v0.10.0, v0.2.0."
    startableBy:
      id: "startableBy"
      type: null
      description: "Filter by a user name who is allowed to start the process."
    key:
      id: "key"
      type: null
      description: "Filter by process definition key, i.e., the id in the BPMN 2.0\
        \ XML. Exact match."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by process definition id."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Filter by the incident message. Exact match."
    processDefinitionIdIn:
      id: "processDefinitionIdIn"
      type: null
      description: "Filter by process definition ids."
    active:
      id: "active"
      type: null
      description: "Only include active process definitions. Value may only be true,\
        \ as false is the default behavior."
    resourceName:
      id: "resourceName"
      type: null
      description: "Filter by the name of the process definition resource. Exact match."
    versionTag:
      id: "versionTag"
      type: null
      description: "Filter by the version tag."
    versionTagLike:
      id: "versionTagLike"
      type: null
      description: "Filter by the version tag that the parameter is a substring of."
    version:
      id: "version"
      type: null
      description: "Filter by process definition version."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended process definitions. Value may only be\
        \ true, as false is the default behavior."
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by process definition names that the parameter is a substring\
        \ of."
    latestVersion:
      id: "latestVersion"
      type: null
      description: "Only include those process definitions that are latest versions.\
        \ Value may only be true, as false is the default behavior."
    keyLike:
      id: "keyLike"
      type: null
      description: "Filter by process definition keys that the parameter is a substring\
        \ of."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    name:
      id: "name"
      type: null
      description: "Filter by process definition name."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include process definitions which belong to no tenant. Value\
        \ may only be true, as false is the default behavior."
    category:
      id: "category"
      type: null
      description: "Filter by process definition category. Exact match."
    incidentId:
      id: "incidentId"
      type: null
      description: "Filter by the incident id."
    incidentMessageLike:
      id: "incidentMessageLike"
      type: null
      description: "Filter by the incident message that the parameter is a substring\
        \ of."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/process-definition/{id}/rendered-form"
  description: "Retrieves the rendered form for a process definition. This method\
    \ can be used for getting the HTML rendering of a Generated Task Form"
  resultDescription: "Retrieves the rendered form for a process definition. This method\
    \ can be used for getting the HTML rendering of a Generated Task Form"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition to get the rendered start form\
        \ for."
    key:
      id: "key"
      type: null
      description: "The key of the process definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the process definition belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Process definition has no form field metadata defined. See the\
        \ Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Process definition with given key does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/process-definition/{id}/startForm"
  description: "Retrieves the key of the start form for a process definition. The\
    \ form key corresponds to the `FormData#formKey` property in the engine."
  resultDescription: "Retrieves the key of the start form for a process definition.\
    \ The form key corresponds to the `FormData#formKey` property in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition to get the start form for."
    key:
      id: "key"
      type: null
      description: "The key of the process definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the process definition belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Process definition has no start form defined. See the Introduction\
        \ for the error response format."
    404:
      id: "404"
      type: null
      description: "Process definition with given key does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/process-definition/statistics"
  description: "Retrieves runtime statistics of the process engine, grouped by process\
    \ definitions.\nThese statistics include the number of running process instances,\
    \ optionally the number of failed jobs and also optionally the number of incidents\
    \ either grouped by incident types or for a specific incident type.\n This does\
    \ not include historic data."
  resultDescription: "Retrieves runtime statistics of the process engine, grouped\
    \ by process definitions.\nThese statistics include the number of running process\
    \ instances, optionally the number of failed jobs and also optionally the number\
    \ of incidents either grouped by incident types or for a specific incident type.\n\
    \ This does not include historic data."
  queryParameters:
    incidentsForType:
      id: "incidentsForType"
      type: null
      description: "If this property has been set with any incident type (i.e., a\
        \ string value) the result will only include the number of incidents for the\
        \ assigned incident type. Cannot be used in combination with incidents. See\
        \ the User Guide for a list of incident types."
    failedJobs:
      id: "failedJobs"
      type: null
      description: "Whether to include the number of failed jobs in the result or\
        \ not. Valid values are true or false."
    incidents:
      id: "incidents"
      type: null
      description: "Valid values for this property are true or false. If this property\
        \ has been set to true the result will include the corresponding number of\
        \ incidents for each occurred incident type. If it is set to false, the incidents\
        \ will not be included in the result. Cannot be used in combination with incidentsForType."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "If both query parameters incidents and incidentsForType were set.\
        \ See the Introduction for the error response format."
- method: "GET"
  path: "/process-definition/{id}/xml"
  description: "Retrieves the BPMN 2.0 XML of a process definition."
  resultDescription: "Retrieves the BPMN 2.0 XML of a process definition."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition."
    key:
      id: "key"
      type: null
      description: "The key of the process definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the process definition belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Process definition with given key does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/process-definition/{id}"
  description: "Retrieves a process definition according to the `ProcessDefinition`\
    \ interface in the engine."
  resultDescription: "Retrieves a process definition according to the `ProcessDefinition`\
    \ interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition to be retrieved."
    key:
      id: "key"
      type: null
      description: "The key of the process definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the process definition belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Process definition with given id or key does not exist. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/process-definition/{id}/restart-async"
  description: "Restarts process instances that were canceled or terminated asynchronously.\
    \ To execute the restart synchronously,\nuse the Restart Process Instance"
  resultDescription: "Restarts process instances that were canceled or terminated\
    \ asynchronously. To execute the restart synchronously,\nuse the Restart Process\
    \ Instance"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition of the process instances to restart."
- method: "POST"
  path: "/process-definition/{id}/restart"
  description: "Restarts process instances that were canceled or terminated synchronously.\
    \ To execute the restart asynchronously,\nuse the Restart Process Instance Async"
  resultDescription: "Restarts process instances that were canceled or terminated\
    \ synchronously. To execute the restart asynchronously,\nuse the Restart Process\
    \ Instance Async"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition of the process instances to restart."
- method: "POST"
  path: "/process-definition/{id}/start"
  description: "Instantiates a given process definition. Process variables and business\
    \ key may be supplied in the request body."
  resultDescription: "Instantiates a given process definition. Process variables and\
    \ business key may be supplied in the request body."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition to be retrieved."
    key:
      id: "key"
      type: null
      description: "The key of the process definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the process definition belongs to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "The instance could not be created due to an invalid variable value,\
        \ for example if the value could not be parsed to an Integer value or the\
        \ passed variable type is not supported. See the Introduction for the error\
        \ response format."
    500:
      id: "500"
      type: null
      description: "The instance could not be created successfully. See the Introduction\
        \ for the error response format."
    404:
      id: "404"
      type: null
      description: "The instance could not be created due to a non existing process\
        \ definition key. See the Introduction for the error response format."
- method: "POST"
  path: "/process-definition/{id}/submit-form"
  description: "Starts a process instance using a set of process variables and the\
    \ business key. If the start event has Form Field Metadata defined, the process\
    \ engine will perform backend validation for any form fields which have validators\
    \ defined. See Documentation on Generated Task Forms"
  resultDescription: "Starts a process instance using a set of process variables and\
    \ the business key. If the start event has Form Field Metadata defined, the process\
    \ engine will perform backend validation for any form fields which have validators\
    \ defined. See Documentation on Generated Task Forms"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition to submit the form for."
    key:
      id: "key"
      type: null
      description: "The key of the process definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the process definition belongs to."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "The instance could not be created successfully. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Process definition with given key does not exist. See the Introduction\
        \ for the error response format."
- method: "PUT"
  path: "/process-definition/{id}/suspended"
  description: "Activates or suspends a given process definition by id or by latest\
    \ version of process definition key."
  resultDescription: "Activates or suspends a given process definition by id or by\
    \ latest version of process definition key."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition to activate or suspend."
    key:
      id: "key"
      type: null
      description: "The key of the process definition (the latest version thereof)\
        \ to be retrieved."
    tenant-id:
      id: "tenant-id"
      type: null
      description: "The id of the tenant the process definition belongs to."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the provided executionDate parameter doesn't have the expected format.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Process definition with given key does not exist. See the Introduction\
        \ for the error response format."
- method: "PUT"
  path: "/process-definition/suspended"
  description: "Activates or suspends process definitions with the given process definition\
    \ key."
  resultDescription: "Activates or suspends process definitions with the given process\
    \ definition key."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the provided executionDate parameter doesn't have the expected format\
        \ or if the processDefinitionKey parameter is null. See the Introduction for\
        \ the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/process-definition/{id}/history-time-to-live"
  description: "Updates history time to live for process definition. The field is\
    \ used within History cleanup"
  resultDescription: "Updates history time to live for process definition. The field\
    \ is used within History cleanup"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process definition to change history time to live."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Process definition with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "DELETE"
  path: "/process-instance/{id}"
  description: "Deletes a running process instance by id."
  resultDescription: "Deletes a running process instance by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process instance to be deleted."
  queryParameters:
    skipIoMappings:
      id: "skipIoMappings"
      type: null
      description: "If set to true, the input/output mappings will be skipped."
    skipCustomListeners:
      id: "skipCustomListeners"
      type: null
      description: "If set to true, the custom listeners will be skipped."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Process instance with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/process-instance/{id}/activity-instances"
  description: "Retrieves an Activity Instance (Tree) for a given process instance\
    \ by id."
  resultDescription: "Retrieves an Activity Instance (Tree) for a given process instance\
    \ by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process instance for which the activity instance\
        \ should be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Process instance with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "GET"
  path: "/process-instance/count"
  description: "Queries for the number of process instances that fulfill given parameters.\n\
    Takes the same parameters as the Get Instances"
  resultDescription: "Queries for the number of process instances that fulfill given\
    \ parameters.\nTakes the same parameters as the Get Instances"
  queryParameters:
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the process definition the instances run on."
    variables:
      id: "variables"
      type: null
      description: "Only include process instances that have variables with certain\
        \ values. Variable filtering expressions are comma-separated and are structured\
        \ as follows: A valid parameter value has the form key_operator_value. key\
        \ is the variable name, operator is the comparison operator to be used and\
        \ value the variable value. Note: Values are always treated as String objects\
        \ on server side. Valid operator values are: eq - equal to; neq - not equal\
        \ to; gt - greater than; gteq - greater than or equal to; lt - lower than;\
        \ lteq - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Filter by the incident message. Exact match."
    businessKeyLike:
      id: "businessKeyLike"
      type: null
      description: "Filter by process instance business key that the parameter is\
        \ a substring of."
    subProcessInstance:
      id: "subProcessInstance"
      type: null
      description: "Restrict query to all process instances that have the given process\
        \ instance as a sub process instance. Takes a process instance id."
    superCaseInstance:
      id: "superCaseInstance"
      type: null
      description: "Restrict query to all process instances that are sub process instances\
        \ of the given case instance. Takes a case instance id."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    incidentType:
      id: "incidentType"
      type: null
      description: "Filter by the incident type. See the User Guide for a list of\
        \ incident types."
    active:
      id: "active"
      type: null
      description: "Only include active process instances. Value may only be true,\
        \ as false is the default behavior."
    processInstanceIds:
      id: "processInstanceIds"
      type: null
      description: "Filter by a comma-separated list of process instance ids."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended process instances. Value may only be true,\
        \ as false is the default behavior."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by the key of the process definition the instances run\
        \ on."
    subCaseInstance:
      id: "subCaseInstance"
      type: null
      description: "Restrict query to all process instances that have the given case\
        \ instance as a sub case instance. Takes a case instance id."
    superProcessInstance:
      id: "superProcessInstance"
      type: null
      description: "Restrict query to all process instances that are sub process instances\
        \ of the given process instance. Takes a process instance id."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A process instance\
        \ must have one of the given tenant ids."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    businessKey:
      id: "businessKey"
      type: null
      description: "Filter by process instance business key."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include process instances which belong to no tenant. Value\
        \ may only be true, as false is the default behavior."
    incidentId:
      id: "incidentId"
      type: null
      description: "Filter by the incident id."
    incidentMessageLike:
      id: "incidentMessageLike"
      type: null
      description: "Filter by the incident message that the parameter is a substring\
        \ of."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Filter by a comma-separated list of activity ids. A process instance\
        \ must currently wait in a leaf activity with one of the given activity ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/process-instance"
  description: "Queries for process instances that fulfill given parameters.\nParameters\
    \ may be static as well as dynamic runtime properties of process instances.\n\
    The size of the result set can be retrieved by using the Get Instance Count"
  resultDescription: "Queries for process instances that fulfill given parameters.\n\
    Parameters may be static as well as dynamic runtime properties of process instances.\n\
    The size of the result set can be retrieved by using the Get Instance Count"
  queryParameters:
    subProcessInstance:
      id: "subProcessInstance"
      type: null
      description: "Restrict query to all process instances that have the given process\
        \ instance as a sub process instance. Takes a process instance id."
    incidentType:
      id: "incidentType"
      type: null
      description: "Filter by the incident type. See the User Guide for a list of\
        \ incident types."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Filter by the key of the process definition the instances run\
        \ on."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Filter by a comma-separated list of tenant ids. A process instance\
        \ must have one of the given tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    deploymentId:
      id: "deploymentId"
      type: null
      description: "Filter by the deployment the id belongs to."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are instanceId, definitionKey, definitionId, tenantId and businessKey.\
        \ Must be used in conjunction with the sortOrder parameter."
    activityIdIn:
      id: "activityIdIn"
      type: null
      description: "Filter by a comma-separated list of activity ids. A process instance\
        \ must currently wait in a leaf activity with one of the given activity ids."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Filter by the process definition the instances run on."
    variables:
      id: "variables"
      type: null
      description: "Only include process instances that have variables with certain\
        \ values. Variable filtering expressions are comma-separated and are structured\
        \ as follows: A valid parameter value has the form key_operator_value. key\
        \ is the variable name, operator is the comparison operator to be used and\
        \ value the variable value. Note: Values are always treated as String objects\
        \ on server side. Valid operator values are: eq - equal to; neq - not equal\
        \ to; gt - greater than; gteq - greater than or equal to; lt - lower than;\
        \ lteq - lower than or equal to; like. key and value may not contain underscore\
        \ or comma characters."
    incidentMessage:
      id: "incidentMessage"
      type: null
      description: "Filter by the incident message. Exact match."
    businessKeyLike:
      id: "businessKeyLike"
      type: null
      description: "Filter by process instance business key that the parameter is\
        \ a substring of."
    superCaseInstance:
      id: "superCaseInstance"
      type: null
      description: "Restrict query to all process instances that are sub process instances\
        \ of the given case instance. Takes a case instance id."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Filter by case instance id."
    active:
      id: "active"
      type: null
      description: "Only include active process instances. Value may only be true,\
        \ as false is the default behavior."
    processInstanceIds:
      id: "processInstanceIds"
      type: null
      description: "Filter by a comma-separated list of process instance ids."
    suspended:
      id: "suspended"
      type: null
      description: "Only include suspended process instances. Value may only be true,\
        \ as false is the default behavior."
    subCaseInstance:
      id: "subCaseInstance"
      type: null
      description: "Restrict query to all process instances that have the given case\
        \ instance as a sub case instance. Takes a case instance id."
    superProcessInstance:
      id: "superProcessInstance"
      type: null
      description: "Restrict query to all process instances that are sub process instances\
        \ of the given process instance. Takes a process instance id."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    businessKey:
      id: "businessKey"
      type: null
      description: "Filter by process instance business key."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include process instances which belong to no tenant. Value\
        \ may only be true, as false is the default behavior."
    incidentId:
      id: "incidentId"
      type: null
      description: "Filter by the incident id."
    incidentMessageLike:
      id: "incidentMessageLike"
      type: null
      description: "Filter by the incident message that the parameter is a substring\
        \ of."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/process-instance/{id}"
  description: "Retrieves a process instance by id, according to the `ProcessInstance`\
    \ interface in the engine."
  resultDescription: "Retrieves a process instance by id, according to the `ProcessInstance`\
    \ interface in the engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process instance to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Process instance with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/process-instance/delete-historic-query-based"
  description: "Deletes a set of process instances asynchronously (batch) based on\
    \ a historic process instance query."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, e. g. neither\
        \ processInstanceIds, nor historicProcessInstanceQuery is present. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/process-instance/delete"
  description: "Deletes multiple process instances asynchronously (batch)."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, i.e., neither\
        \ processInstanceIds, nor processInstanceQuery is present. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/process-instance/{id}/modification"
  description: "POST `/process-instance/{id}/modification`"
  resultDescription: "POST `/process-instance/{id}/modification`"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process instance to modify."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "At least one modification instruction misses required parameters."
    500:
      id: "500"
      type: null
      description: "The modification cannot be performed, for example because it starts\
        \ a failing activity."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/process-instance/count"
  description: "Queries for the number of process instances that fulfill the given\
    \ parameters.\nThis method takes the same message body as the Get Instances (POST)\n\
    and therefore it is slightly more powerful than the Get Instance Count"
  resultDescription: "Queries for the number of process instances that fulfill the\
    \ given parameters.\nThis method takes the same message body as the Get Instances\
    \ (POST)\nand therefore it is slightly more powerful than the Get Instance Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/process-instance"
  description: "Queries for process instances that fulfill given parameters through\
    \ a JSON object.\nThis method is slightly more powerful than the Get Instances\n\
    filtering by multiple process variables of types `String`, `Number` or `Boolean`."
  resultDescription: "Queries for process instances that fulfill given parameters\
    \ through a JSON object.\nThis method is slightly more powerful than the Get Instances\n\
    filtering by multiple process variables of types `String`, `Number` or `Boolean`."
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results, if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/process-instance/job-retries-historic-query-based"
  description: "Create a batch to set retries of jobs asynchronously based on a historic\
    \ process instance query."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, e. g. if\
        \ neither processInstances, nor processInstanceQuery is present. Or if the\
        \ retry count is not specified. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/process-instance/job-retries"
  description: "Create a batch to set retries of jobs associated with given processes\
    \ asynchronously."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if neither processInstanceIds, nor processInstanceQuery is present. Or if\
        \ the retry count is not specified. See the Introduction for the error response\
        \ format."
- method: "PUT"
  path: "/process-instance/{id}/suspended"
  description: "Activates or suspends a given process instance by id."
  resultDescription: "Activates or suspends a given process instance by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process instance to activate or suspend."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/process-instance/suspended"
  description: "Activates or suspends process instances with the given process definition\
    \ id."
  resultDescription: "Activates or suspends process instances with the given process\
    \ definition id."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the provided processDefinitionId parameter is null. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/process-instance/suspended"
  description: "Activates or suspends process instances with the given process definition\
    \ key."
  resultDescription: "Activates or suspends process instances with the given process\
    \ definition key."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if some of the request parameters are invalid, for example\
        \ if the provided processDefinitionKey parameter is null. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "DELETE"
  path: "/process-instance/{id}/variables/{varName}"
  description: "Deletes a variable of a process instance by id."
  resultDescription: "Deletes a variable of a process instance by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to delete."
    id:
      id: "id"
      type: null
      description: "The id of the process instance to delete the variable from."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/process-instance/{id}/variables/{varName}/data"
  description: "Sets the serialized value for a binary variable or the binary value\
    \ for a file variable."
  resultDescription: "Sets the serialized value for a binary variable or the binary\
    \ value for a file variable."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the process instance to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. Also, if no filename is set. See the Introduction for the error\
        \ response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/process-instance/{id}/variables/{varName}"
  description: "Retrieves a variable of a given process instance by id."
  resultDescription: "Retrieves a variable of a given process instance by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the process instance to retrieve the variable from."
  queryParameters:
    deserializeValue:
      id: "deserializeValue"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/process-instance/{id}/variables"
  description: "Retrieves all variables of a given process instance by id."
  resultDescription: "Retrieves all variables of a given process instance by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process instance to retrieve the variables from."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "Process instance with given id does not exist. See the Introduction\
        \ for the error response format."
- method: "POST"
  path: "/process-instance/{id}/variables/{varName}/data"
  description: "Sets the serialized value for a binary variable or the binary value\
    \ for a file variable."
  resultDescription: "Sets the serialized value for a binary variable or the binary\
    \ value for a file variable."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if no filename\
        \ is set. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/process-instance/{id}/variables"
  description: "Updates or deletes the variables of a process instance by id.\nUpdates\
    \ precede deletions. So, if a variable is updated AND deleted, the deletion overrides\
    \ the update."
  resultDescription: "Updates or deletes the variables of a process instance by id.\n\
    Updates precede deletions. So, if a variable is updated AND deleted, the deletion\
    \ overrides the update."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the process instance to set variables for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "Update or delete could not be executed, for example because the\
        \ process instance does not exist."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/process-instance/{id}/variables/{varName}"
  description: "Sets a variable of a given process instance by id."
  resultDescription: "Sets a variable of a given process instance by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the process instance to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "DELETE"
  path: "/task/{id}/attachment/{attachmentId}"
  description: "Removes an attachment from a task by id."
  resultDescription: "Removes an attachment from a task by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task."
    attachmentId:
      id: "attachmentId"
      type: null
      description: "The id of the attachment to be removed."
  responseCodes:
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "The history of the engine is disabled. See the Introduction for\
        \ the error response format."
    404:
      id: "404"
      type: null
      description: "Task attachment for given task id and attachment id does not exist.\
        \ See the Introduction for the error response format."
- method: "GET"
  path: "/task/{id}/attachment/{attachmentId}/data"
  description: "Retrieves the binary content of a task attachment by task id and attachment\
    \ id."
  resultDescription: "Retrieves the binary content of a task attachment by task id\
    \ and attachment id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task."
    attachmentId:
      id: "attachmentId"
      type: null
      description: "The id of the attachment to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "The attachment content for given task and attachment id does not\
        \ exist or the history of the engine is disabled. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/task/{id}/attachment/{attachmentId}"
  description: "Retrieves a task attachment by task id and attachment id."
  resultDescription: "Retrieves a task attachment by task id and attachment id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task."
    attachmentId:
      id: "attachmentId"
      type: null
      description: "The id of the attachment to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "The attachment for given task and attachment id does not exist\
        \ or the history of the engine is disabled. See the Introduction for the error\
        \ response format."
- method: "GET"
  path: "/task/{id}/attachment"
  description: "Gets the attachments for a task."
  resultDescription: "Gets the attachments for a task."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the attachments for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "No task exists for the given task id. See the Introduction for\
        \ the error response format."
- method: "POST"
  path: "/task/{id}/attachment/create"
  description: "Creates an attachment for a task."
  resultDescription: "Creates an attachment for a task."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to add the attachment to."
- method: "GET"
  path: "/task/{id}/comment/{commentId}"
  description: "Retrieves a task comment by task id and comment id."
  resultDescription: "Retrieves a task comment by task id and comment id."
  pathParameters:
    commentId:
      id: "commentId"
      type: null
      description: "The id of the comment to be retrieved."
    id:
      id: "id"
      type: null
      description: "The id of the task."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "The task or comment with given task and comment id do not exist,\
        \ or the history of the engine is disabled. See the Introduction for the error\
        \ response format."
- method: "GET"
  path: "/task/{id}/comment"
  description: "Gets the comments for a task by id."
  resultDescription: "Gets the comments for a task by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the comments for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "No task exists for the given task id. See the Introduction for\
        \ the error response format."
- method: "POST"
  path: "/task/{id}/comment/create"
  description: "Creates a comment for a task by id."
  resultDescription: "Creates a comment for a task by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to add the comment to."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "The task does not exist or no comment message was submitted. See\
        \ the Introduction for the error response format."
    403:
      id: "403"
      type: null
      description: "The history of the engine is disabled. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/task/{id}/form"
  description: "Retrieves the form key for a task. The form key corresponds to the\
    \ `FormData#formKey` property in the engine.\nThis key can be used to do task-specific\
    \ form rendering in client applications. Additionally, the context path of the\
    \ containing process application is returned."
  resultDescription: "Retrieves the form key for a task. The form key corresponds\
    \ to the `FormData#formKey` property in the engine.\nThis key can be used to do\
    \ task-specific form rendering in client applications. Additionally, the context\
    \ path of the containing process application is returned."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the form for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Task with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "GET"
  path: "/task/{id}/form-variables"
  description: "Retrieves the form variables for a task (only if they are defined\
    \ via the\nGenerated Task Form\nThe form variables take form data specified on\
    \ the task into\naccount. If form fields are defined, the variable types and\n\
    default values of the form fields are taken into account."
  resultDescription: "Retrieves the form variables for a task (only if they are defined\
    \ via the\nGenerated Task Form\nThe form variables take form data specified on\
    \ the task into\naccount. If form fields are defined, the variable types and\n\
    default values of the form fields are taken into account."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the variables for."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
    variableNames:
      id: "variableNames"
      type: null
      description: "A comma-separated list of variable names. Allows restricting the\
        \ list of requested variables to the variable names in the list. It is best\
        \ practice to restrict the list of variables to the variables actually required\
        \ by the form in order to minimize fetching of data. If the query parameter\
        \ is ommitted all variables are fetched. If the query parameter contains non-existent\
        \ variable names, the variable names are ignored."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Task id is null or does not exist. See the Introduction for the\
        \ error response format."
- method: "GET"
  path: "/task/count"
  description: "Retrieves the number of tasks that fulfill a provided filter.\nCorresponds\
    \ to the size of the result set when using the Get Tasks"
  resultDescription: "Retrieves the number of tasks that fulfill a provided filter.\n\
    Corresponds to the size of the result set when using the Get Tasks"
  queryParameters:
    assigneeExpression:
      id: "assigneeExpression"
      type: null
      description: "Restrict to tasks that the user described by the given expression\
        \ is assigned to. See the user guide for more information on available functions."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Restrict to tasks that belong to a case definition with the given\
        \ key."
    processDefinitionName:
      id: "processDefinitionName"
      type: null
      description: "Restrict to tasks that belong to a process definition with the\
        \ given name."
    involvedUserExpression:
      id: "involvedUserExpression"
      type: null
      description: "Only include tasks that the user described by the given expression\
        \ is involved in. A user is involved in a task if an identity link exists\
        \ between task and user (e.g., the user is the assignee). See the user guide\
        \ for more information on available functions."
    unassigned:
      id: "unassigned"
      type: null
      description: "If set to true, restricts the query to all tasks that are unassigned."
    caseDefinitionName:
      id: "caseDefinitionName"
      type: null
      description: "Restrict to tasks that belong to a case definition with the given\
        \ name."
    candidateUserExpression:
      id: "candidateUserExpression"
      type: null
      description: "Only include tasks that are offered to the user described by the\
        \ given expression. See the user guide for more information on available functions."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Restrict to tasks that belong to a process definition with the\
        \ given key."
    includeAssignedTasks:
      id: "includeAssignedTasks"
      type: null
      description: "Also include tasks that are assigned to users in candidate queries.\
        \ Default is to only include tasks that are not assigned to any user if you\
        \ query by candidate user or group(s)."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include tasks which belong to one of the passed and comma-separated\
        \ tenant ids."
    processInstanceBusinessKey:
      id: "processInstanceBusinessKey"
      type: null
      description: "Restrict to tasks that belong to process instances with the given\
        \ business key."
    caseInstanceBusinessKeyLike:
      id: "caseInstanceBusinessKeyLike"
      type: null
      description: "Restrict to tasks that have a case instance business key that\
        \ has the parameter value as a substring."
    caseDefinitionNameLike:
      id: "caseDefinitionNameLike"
      type: null
      description: "Restrict to tasks that have a case definition name that has the\
        \ parameter value as a substring."
    assigneeLikeExpression:
      id: "assigneeLikeExpression"
      type: null
      description: "Restrict to tasks that have an assignee that has the parameter\
        \ value described by the given expression as a substring. See the user guide\
        \ for more information on available functions."
    owner:
      id: "owner"
      type: null
      description: "Restrict to tasks that the given user owns."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Restrict to tasks that belong to process instances with the given\
        \ id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Restrict to tasks that belong to a process definition with the\
        \ given id."
    processDefinitionNameLike:
      id: "processDefinitionNameLike"
      type: null
      description: "Restrict to tasks that have a process definition name that has\
        \ the parameter value as a substring."
    caseInstanceBusinessKey:
      id: "caseInstanceBusinessKey"
      type: null
      description: "Restrict to tasks that belong to case instances with the given\
        \ business key."
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Restrict to tasks that belong to a case execution with the given\
        \ id."
    candidateGroupExpression:
      id: "candidateGroupExpression"
      type: null
      description: "Only include tasks that are offered to the group described by\
        \ the given expression. See the user guide for more information on available\
        \ functions."
    processDefinitionKeyIn:
      id: "processDefinitionKeyIn"
      type: null
      description: "Restrict to tasks that belong to a process definition with one\
        \ of the given keys. The keys need to be in a comma-separated list."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Restrict to tasks that belong to a case definition with the given\
        \ id."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Restrict to tasks that belong to case instances with the given\
        \ id."
    assigneeLike:
      id: "assigneeLike"
      type: null
      description: "Restrict to tasks that have an assignee that has the parameter\
        \ value as a substring."
    ownerExpression:
      id: "ownerExpression"
      type: null
      description: "Restrict to tasks that the user described by the given expression\
        \ owns. See the user guide for more information on available functions."
    processInstanceBusinessKeyIn:
      id: "processInstanceBusinessKeyIn"
      type: null
      description: "Restrict to tasks that belong to process instances with one of\
        \ the give business keys. The keys need to be in a comma-separated list."
    candidateGroup:
      id: "candidateGroup"
      type: null
      description: "Only include tasks that are offered to the given group."
    executionId:
      id: "executionId"
      type: null
      description: "Restrict to tasks that belong to an execution with the given id."
    candidateUser:
      id: "candidateUser"
      type: null
      description: "Only include tasks that are offered to the given user or to one\
        \ of his groups."
    processInstanceBusinessKeyLike:
      id: "processInstanceBusinessKeyLike"
      type: null
      description: "Restrict to tasks that have a process instance business key that\
        \ has the parameter value as a substring."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include tasks which belong to one of the passed and comma-separated\
        \ activity instance ids."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include tasks which belong to no tenant. Value may only be\
        \ true, as false is the default behavior."
    assigned:
      id: "assigned"
      type: null
      description: "If set to true, restricts the query to all tasks that are assigned."
    assignee:
      id: "assignee"
      type: null
      description: "Restrict to tasks that the given user is assigned to."
    involvedUser:
      id: "involvedUser"
      type: null
      description: "Only include tasks that the given user is involved in. A user\
        \ is involved in a task if an identity link exists between task and user (e.g.,\
        \ the user is the assignee)."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/task"
  description: "Queries for tasks that fulfill a given filter.\nThe size of the result\
    \ set can be retrieved by using the Get Task Count"
  resultDescription: "Queries for tasks that fulfill a given filter.\nThe size of\
    \ the result set can be retrieved by using the Get Task Count"
  queryParameters:
    assigneeExpression:
      id: "assigneeExpression"
      type: null
      description: "Restrict to tasks that the user described by the given expression\
        \ is assigned to. See the user guide for more information on available functions."
    caseDefinitionKey:
      id: "caseDefinitionKey"
      type: null
      description: "Restrict to tasks that belong to a case definition with the given\
        \ key."
    processDefinitionName:
      id: "processDefinitionName"
      type: null
      description: "Restrict to tasks that belong to a process definition with the\
        \ given name."
    involvedUserExpression:
      id: "involvedUserExpression"
      type: null
      description: "Only include tasks that the user described by the given expression\
        \ is involved in. A user is involved in a task if an identity link exists\
        \ between task and user (e.g., the user is the assignee). See the user guide\
        \ for more information on available functions."
    unassigned:
      id: "unassigned"
      type: null
      description: "If set to true, restricts the query to all tasks that are unassigned."
    caseDefinitionName:
      id: "caseDefinitionName"
      type: null
      description: "Restrict to tasks that belong to a case definition with the given\
        \ name."
    candidateUserExpression:
      id: "candidateUserExpression"
      type: null
      description: "Only include tasks that are offered to the user described by the\
        \ given expression. See the user guide for more information on available functions."
    processDefinitionKey:
      id: "processDefinitionKey"
      type: null
      description: "Restrict to tasks that belong to a process definition with the\
        \ given key."
    includeAssignedTasks:
      id: "includeAssignedTasks"
      type: null
      description: "Also include tasks that are assigned to users in candidate queries.\
        \ Default is to only include tasks that are not assigned to any user if you\
        \ query by candidate user or group(s)."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include tasks which belong to one of the passed and comma-separated\
        \ tenant ids."
    processInstanceBusinessKey:
      id: "processInstanceBusinessKey"
      type: null
      description: "Restrict to tasks that belong to process instances with the given\
        \ business key."
    caseInstanceBusinessKeyLike:
      id: "caseInstanceBusinessKeyLike"
      type: null
      description: "Restrict to tasks that have a case instance business key that\
        \ has the parameter value as a substring."
    caseDefinitionNameLike:
      id: "caseDefinitionNameLike"
      type: null
      description: "Restrict to tasks that have a case definition name that has the\
        \ parameter value as a substring."
    assigneeLikeExpression:
      id: "assigneeLikeExpression"
      type: null
      description: "Restrict to tasks that have an assignee that has the parameter\
        \ value described by the given expression as a substring. See the user guide\
        \ for more information on available functions."
    owner:
      id: "owner"
      type: null
      description: "Restrict to tasks that the given user owns."
    processInstanceId:
      id: "processInstanceId"
      type: null
      description: "Restrict to tasks that belong to process instances with the given\
        \ id."
    processDefinitionId:
      id: "processDefinitionId"
      type: null
      description: "Restrict to tasks that belong to a process definition with the\
        \ given id."
    processDefinitionNameLike:
      id: "processDefinitionNameLike"
      type: null
      description: "Restrict to tasks that have a process definition name that has\
        \ the parameter value as a substring."
    caseInstanceBusinessKey:
      id: "caseInstanceBusinessKey"
      type: null
      description: "Restrict to tasks that belong to case instances with the given\
        \ business key."
    caseExecutionId:
      id: "caseExecutionId"
      type: null
      description: "Restrict to tasks that belong to a case execution with the given\
        \ id."
    candidateGroupExpression:
      id: "candidateGroupExpression"
      type: null
      description: "Only include tasks that are offered to the group described by\
        \ the given expression. See the user guide for more information on available\
        \ functions."
    processDefinitionKeyIn:
      id: "processDefinitionKeyIn"
      type: null
      description: "Restrict to tasks that belong to a process definition with one\
        \ of the given keys. The keys need to be in a comma-separated list."
    caseDefinitionId:
      id: "caseDefinitionId"
      type: null
      description: "Restrict to tasks that belong to a case definition with the given\
        \ id."
    caseInstanceId:
      id: "caseInstanceId"
      type: null
      description: "Restrict to tasks that belong to case instances with the given\
        \ id."
    assigneeLike:
      id: "assigneeLike"
      type: null
      description: "Restrict to tasks that have an assignee that has the parameter\
        \ value as a substring."
    ownerExpression:
      id: "ownerExpression"
      type: null
      description: "Restrict to tasks that the user described by the given expression\
        \ owns. See the user guide for more information on available functions."
    processInstanceBusinessKeyIn:
      id: "processInstanceBusinessKeyIn"
      type: null
      description: "Restrict to tasks that belong to process instances with one of\
        \ the give business keys. The keys need to be in a comma-separated list."
    candidateGroup:
      id: "candidateGroup"
      type: null
      description: "Only include tasks that are offered to the given group."
    executionId:
      id: "executionId"
      type: null
      description: "Restrict to tasks that belong to an execution with the given id."
    candidateUser:
      id: "candidateUser"
      type: null
      description: "Only include tasks that are offered to the given user or to one\
        \ of his groups."
    processInstanceBusinessKeyLike:
      id: "processInstanceBusinessKeyLike"
      type: null
      description: "Restrict to tasks that have a process instance business key that\
        \ has the parameter value as a substring."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include tasks which belong to one of the passed and comma-separated\
        \ activity instance ids."
    withoutTenantId:
      id: "withoutTenantId"
      type: null
      description: "Only include tasks which belong to no tenant. Value may only be\
        \ true, as false is the default behavior."
    assigned:
      id: "assigned"
      type: null
      description: "If set to true, restricts the query to all tasks that are assigned."
    assignee:
      id: "assignee"
      type: null
      description: "Restrict to tasks that the given user is assigned to."
    involvedUser:
      id: "involvedUser"
      type: null
      description: "Only include tasks that the given user is involved in. A user\
        \ is involved in a task if an identity link exists between task and user (e.g.,\
        \ the user is the assignee)."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful. In case of an expected HAL response."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/task/{id}/rendered-form"
  description: "Retrieves the rendered form for a task. This method can be used to\
    \ get the HTML rendering of a Generated Task Form"
  resultDescription: "Retrieves the rendered form for a task. This method can be used\
    \ to get the HTML rendering of a Generated Task Form"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to get the rendered form for."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "The task with the given id does not exist or has no form field\
        \ metadata defined for this task. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/task/{id}"
  description: "Retrieves a task by id."
  resultDescription: "Retrieves a task by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful. In case of an expected HAL response."
    404:
      id: "404"
      type: null
      description: "Task with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "GET"
  path: "/task/{id}/identity-links"
  description: "Gets the identity links for a task by id, which are the users and\
    \ groups that are in  relation to it (including assignee and owner)."
  resultDescription: "Gets the identity links for a task by id, which are the users\
    \ and groups that are in  relation to it (including assignee and owner)."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the identity links for."
  queryParameters:
    type:
      id: "type"
      type: null
      description: "Filter by the type of links to include."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Task with given id does not exist. See the Introduction for the\
        \ error response format."
- method: "POST"
  path: "/task/{id}/identity-links/delete"
  description: "Removes an identity link from a task by id."
  resultDescription: "Removes an identity link from a task by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to remove a link from."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Task with given id does not exist. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/task/{id}/identity-links"
  description: "Adds an identity link to a task by id. Can be used to link any user\
    \ or group to a task and specify a relation."
  resultDescription: "Adds an identity link to a task by id. Can be used to link any\
    \ user or group to a task and specify a relation."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to add a link to."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Task with given id does not exist. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "DELETE"
  path: "/task/{id}/localVariables/{varName}"
  description: "Removes a local variable from a task by id."
  resultDescription: "Removes a local variable from a task by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to be removed."
    id:
      id: "id"
      type: null
      description: "The id of the task."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "Task id is null or does not exist. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/task/{id}/localVariables/{varName}/data"
  description: "Retrieves a binary variable from the context of a given task by id.\
    \ Applicable for byte array and file variables."
  resultDescription: "Retrieves a binary variable from the context of a given task\
    \ by id. Applicable for byte array and file variables."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the variable from."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Variable with given id exists but is not a binary variable. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/task/{id}/localVariables/{varName}"
  description: "Retrieves a variable from the context of a given task by id."
  resultDescription: "Retrieves a variable from the context of a given task by id."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the variable from."
  queryParameters:
    deserializeValue:
      id: "deserializeValue"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "Task id is null or does not exist. See the Introduction for the\
        \ error response format."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/task/{id}/localVariables"
  description: "Retrieves all variables of a given task by id."
  resultDescription: "Retrieves all variables of a given task by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the variables from."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "Task id is null or does not exist. See the Introduction for the\
        \ error response format."
- method: "POST"
  path: "/task/{id}/localVariables/{varName}/data"
  description: "Sets the serialized value for a binary variable or the binary value\
    \ for a file variable."
  resultDescription: "Sets the serialized value for a binary variable or the binary\
    \ value for a file variable."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the task to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if no filename\
        \ is set. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "Variable name is null. Task id is null or does not exist. See\
        \ the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/task/{id}/localVariables"
  description: "Updates or deletes the variables in the context of a task.\nUpdates\
    \ precede deletions. So, if a variable is updated AND deleted, the deletion overrides\
    \ the update."
  resultDescription: "Updates or deletes the variables in the context of a task.\n\
    Updates precede deletions. So, if a variable is updated AND deleted, the deletion\
    \ overrides the update."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to set variables for."
- method: "PUT"
  path: "/task/{id}/localVariables/{varName}"
  description: "Sets a variable in the context of a given task."
  resultDescription: "Sets a variable in the context of a given task."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the task to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "The variable name is null. Task id is null or does not exist.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/task/{id}/assignee"
  description: "Changes the assignee of a task to a specific user."
  resultDescription: "Changes the assignee of a task to a specific user."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to set the assignee for."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "Task with given id does not exist or setting the assignee was\
        \ not successful. See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/task/{id}/claim"
  description: "Claims a task for a specific user."
  resultDescription: "Claims a task for a specific user."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to claim."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "Task with given id does not exist or claiming was not successful.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/task/{id}/complete"
  description: "Completes a task and updates process variables."
  resultDescription: "Completes a task and updates process variables."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to complete."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "If the task does not exist or the corresponding process instance\
        \ could not be resumed successfully. See the Introduction for the error response\
        \ format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/task/create"
  description: "Creates a new task."
  resultDescription: "Creates a new task."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if a not valid delegationState is supplied. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/task/{id}/delegate"
  description: "Delegates a task to another user."
  resultDescription: "Delegates a task to another user."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to delegate."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "If the task does not exist or delegation was not successful. See\
        \ the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/task/count"
  description: "Retrieves the number of tasks that fulfill the given filter.\nCorresponds\
    \ to the size of the result set of the Get Tasks (POST)"
  resultDescription: "Retrieves the number of tasks that fulfill the given filter.\n\
    Corresponds to the size of the result set of the Get Tasks (POST)"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "POST"
  path: "/task"
  description: "Queries for tasks that fulfill a given filter.\nThis method is slightly\
    \ more powerful than the Get Tasks\nfiltering by multiple process or task variables\
    \ of types `String`, `Number` or `Boolean`.\nThe size of the result set can be\
    \ retrieved by using the Get Task Count (POST)"
  resultDescription: "Queries for tasks that fulfill a given filter.\nThis method\
    \ is slightly more powerful than the Get Tasks\nfiltering by multiple process\
    \ or task variables of types `String`, `Number` or `Boolean`.\nThe size of the\
    \ result set can be retrieved by using the Get Task Count (POST)"
  queryParameters:
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results, if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/task/{id}/resolve"
  description: "Resolves a task and updates execution variables."
  resultDescription: "Resolves a task and updates execution variables."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to resolve."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "If the task does not exist or the corresponding process instance\
        \ could not be resumed successfully. See the Introduction for the error response\
        \ format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/task/{id}/submit-form"
  description: "Completes a task and updates process variables using a form submit.\
    \ There are two difference between this method and the `complete` method:"
  resultDescription: "Completes a task and updates process variables using a form\
    \ submit. There are two difference between this method and the `complete` method:"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to submit the form for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "If the task does not exist or the corresponding process instance\
        \ could not be resumed successfully. See the Introduction for the error response\
        \ format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/task/{id}/unclaim"
  description: "Resets a task's assignee. If successful, the task is not assigned\
    \ to a user."
  resultDescription: "Resets a task's assignee. If successful, the task is not assigned\
    \ to a user."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to unclaim."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Task with given id does not exist. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/task/{id}/"
  description: "Updates a task."
  resultDescription: "Updates a task."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "Returned if a not valid delegationState is supplied. See the Introduction\
        \ for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "If the corresponding task cannot be found"
- method: "GET"
  path: "/task/report/candidate-group-count"
  description: "Retrieves the number of tasks for each candidate group."
  resultDescription: "Retrieves the number of tasks for each candidate group."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful. In case of an expected application/csv or\
        \ text/csv response to retrieve the result as a csv file."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid or mandatory\
        \ parameters are not supplied. See the Introduction for the error response\
        \ format."
    403:
      id: "403"
      type: null
      description: "If the authenticated user is unauthorized to read the history.\
        \ See the Introduction for the error response format."
- method: "DELETE"
  path: "/task/{id}/variables/{varName}"
  description: "Removes a variable that is visible to a task. A variable is visible\
    \ to a task if it is a local task variable or declared in a parent scope of the\
    \ task. See documentation on visiblity of variables"
  resultDescription: "Removes a variable that is visible to a task. A variable is\
    \ visible to a task if it is a local task variable or declared in a parent scope\
    \ of the task. See documentation on visiblity of variables"
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to be removed."
    id:
      id: "id"
      type: null
      description: "The id of the task."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "Task id is null or does not exist. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "GET"
  path: "/task/{id}/variables/{varName}/data"
  description: "Retrieves a binary variable from the context of a given task. Applicable\
    \ for byte array and file variables.\nThe variable must be visible from the task.\
    \ It is visible from the task if it is a local task variable or declared in a\
    \ parent scope of the task. See documentation on visiblity of variables"
  resultDescription: "Retrieves a binary variable from the context of a given task.\
    \ Applicable for byte array and file variables.\nThe variable must be visible\
    \ from the task. It is visible from the task if it is a local task variable or\
    \ declared in a parent scope of the task. See documentation on visiblity of variables"
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the variable from."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Variable with given id exists but is not a binary variable. See\
        \ the Introduction for the error response format."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/task/{id}/variables/{varName}"
  description: "Retrieves a variable from the context of a given task.\nThe variable\
    \ must be visible from the task. It is visible from the task if it is a local\
    \ task variable or declared in a parent scope of the task. See documentation on\
    \ visiblity of variables"
  resultDescription: "Retrieves a variable from the context of a given task.\nThe\
    \ variable must be visible from the task. It is visible from the task if it is\
    \ a local task variable or declared in a parent scope of the task. See documentation\
    \ on visiblity of variables"
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to get."
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the variable from."
  queryParameters:
    deserializeValue:
      id: "deserializeValue"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "Task id is null or does not exist. See the Introduction for the\
        \ error response format."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "GET"
  path: "/task/{id}/variables"
  description: "Retrieves all variables visible from the task. A variable is visible\
    \ from the task if it is a local task variable or declared in a parent scope of\
    \ the task. See documentation on visiblity of variables"
  resultDescription: "Retrieves all variables visible from the task. A variable is\
    \ visible from the task if it is a local task variable or declared in a parent\
    \ scope of the task. See documentation on visiblity of variables"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to retrieve the variables from."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "Task id is null or does not exist. See the Introduction for the\
        \ error response format."
- method: "POST"
  path: "/task/{id}/variables"
  description: "Updates or deletes the variables visible from the task.\nUpdates precede\
    \ deletions. So, if a variable is updated AND deleted, the deletion overrides\
    \ the update.\nA variable is visible from the task if it is a local task variable\
    \ or declared in a parent scope of the task. See documentation on visiblity of\
    \ variables"
  resultDescription: "Updates or deletes the variables visible from the task.\nUpdates\
    \ precede deletions. So, if a variable is updated AND deleted, the deletion overrides\
    \ the update.\nA variable is visible from the task if it is a local task variable\
    \ or declared in a parent scope of the task. See documentation on visiblity of\
    \ variables"
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the task to set variables for."
- method: "POST"
  path: "/task/{id}/variables/{varName}/data"
  description: "Sets the serialized value for a binary variable or the binary value\
    \ for a file variable visible from the task.\nA variable is visible from the task\
    \ if it is a local task variable or declared in a parent scope of the task. See\
    \ documentation on visiblity of variables"
  resultDescription: "Sets the serialized value for a binary variable or the binary\
    \ value for a file variable visible from the task.\nA variable is visible from\
    \ the task if it is a local task variable or declared in a parent scope of the\
    \ task. See documentation on visiblity of variables"
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the task to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if no filename\
        \ is set. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "Variable name is null. Task id is null or does not exist. See\
        \ the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/task/{id}/variables/{varName}"
  description: "Sets a visible from the task.\nA variable is visible from the task\
    \ if it is a local task variable or declared in a parent scope of the task. See\
    \ documentation on visiblity of variables\nIf a variable visible from the task\
    \ with the given name already exists, it is overwritten. Otherwise, the variable\
    \ is created in the top-most scope visible from the task."
  resultDescription: "Sets a visible from the task.\nA variable is visible from the\
    \ task if it is a local task variable or declared in a parent scope of the task.\
    \ See documentation on visiblity of variables\nIf a variable visible from the\
    \ task with the given name already exists, it is overwritten. Otherwise, the variable\
    \ is created in the top-most scope visible from the task."
  pathParameters:
    varName:
      id: "varName"
      type: null
      description: "The name of the variable to set."
    id:
      id: "id"
      type: null
      description: "The id of the task to set the variable for."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "The variable value or type is invalid, for example if the value\
        \ could not be parsed to an Integer value or the passed variable type is not\
        \ supported. See the Introduction for the error response format."
    500:
      id: "500"
      type: null
      description: "The variable name is null. Task id is null or does not exist.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
- method: "DELETE"
  path: "/tenant/{id}"
  description: "Deletes a tenant by id."
  resultDescription: "Deletes a tenant by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the tenant to be deleted."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only."
    404:
      id: "404"
      type: null
      description: "Tenant cannot be found. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/tenant/count"
  description: "Query for tenants using a list of parameters and retrieves the count."
  resultDescription: "Query for tenants using a list of parameters and retrieves the\
    \ count."
  queryParameters:
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by the name that the parameter is a substring of."
    userMember:
      id: "userMember"
      type: null
      description: "Select only tenants where the given user is a member of."
    groupMember:
      id: "groupMember"
      type: null
      description: "Select only tenants where the given group is a member of."
    name:
      id: "name"
      type: null
      description: "Filter by the name of the tenant."
    id:
      id: "id"
      type: null
      description: "Filter by the id of the tenant."
    includingGroupsOfUser:
      id: "includingGroupsOfUser"
      type: null
      description: "Select only tenants where the user or one of his groups is a member\
        \ of. Can only be used in combination with the userMember parameter. Value\
        \ may only be true, as false is the default behavior."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/tenant"
  description: "Query for a list of tenants using a list of parameters.\nThe size\
    \ of the result set can be retrieved by using the Get Tenant Count"
  resultDescription: "Query for a list of tenants using a list of parameters.\nThe\
    \ size of the result set can be retrieved by using the Get Tenant Count"
  queryParameters:
    nameLike:
      id: "nameLike"
      type: null
      description: "Filter by the name that the parameter is a substring of."
    userMember:
      id: "userMember"
      type: null
      description: "Select only tenants where the given user is a member of."
    groupMember:
      id: "groupMember"
      type: null
      description: "Select only tenants where the given group is a member of."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    name:
      id: "name"
      type: null
      description: "Filter by the name of the tenant."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are id and name. Must be used in conjunction with the sortOrder parameter."
    id:
      id: "id"
      type: null
      description: "Filter by the id of the tenant."
    includingGroupsOfUser:
      id: "includingGroupsOfUser"
      type: null
      description: "Select only tenants where the user or one of his groups is a member\
        \ of. Can only be used in combination with the userMember parameter. Value\
        \ may only be true, as false is the default behavior."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy is specified. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/tenant/{id}"
  description: "Retrieves a tenant."
  resultDescription: "Retrieves a tenant."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the tenant to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Tenant with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "DELETE"
  path: "/tenant/{id}/group-members/{groupId}"
  description: "Deletes a membership between a tenant and a group."
  resultDescription: "Deletes a membership between a tenant and a group."
  pathParameters:
    groupId:
      id: "groupId"
      type: null
      description: "The id of the group."
    id:
      id: "id"
      type: null
      description: "The id of the tenant."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "In case an error occurs. See the Introduction for the error response\
        \ format."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only."
- method: "OPTIONS"
  path: "/tenant/{id}/group-members"
  description: "The OPTIONS request allows checking for the set of available operations\
    \ that the currently authenticated user can perform on the resource. If the user\
    \ can perform an operation or not may depend on various things, including the\
    \ users authorizations to interact with this resource and the internal configuration\
    \ of the process engine."
  resultDescription: "The OPTIONS request allows checking for the set of available\
    \ operations that the currently authenticated user can perform on the resource.\
    \ If the user can perform an operation or not may depend on various things, including\
    \ the users authorizations to interact with this resource and the internal configuration\
    \ of the process engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the tenant"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/tenant/{id}/group-members/{groupId}"
  description: "Creates a membership between a tenant and a group."
  resultDescription: "Creates a membership between a tenant and a group."
  pathParameters:
    groupId:
      id: "groupId"
      type: null
      description: "The id of the group."
    id:
      id: "id"
      type: null
      description: "The id of the tenant."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "In case an internal error occurs. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only."
- method: "OPTIONS"
  path: "/tenant"
  description: "The `/tenant` resource supports two custom OPTIONS requests, one for\
    \ the resource as such and one for individual tenant instances. The OPTIONS request\
    \ allows checking for the set of available operations that the currently authenticated\
    \ user can perform on the `/tenant` resource. If the user can perform an operation\
    \ or not may depend on various things, including the users authorizations to interact\
    \ with this resource and the internal configuration of the process engine."
  resultDescription: "The `/tenant` resource supports two custom OPTIONS requests,\
    \ one for the resource as such and one for individual tenant instances. The OPTIONS\
    \ request allows checking for the set of available operations that the currently\
    \ authenticated user can perform on the `/tenant` resource. If the user can perform\
    \ an operation or not may depend on various things, including the users authorizations\
    \ to interact with this resource and the internal configuration of the process\
    \ engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the tenant"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/tenant/create"
  description: "Create a new tenant."
  resultDescription: "Create a new tenant."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The tenant could not be created due to an internal server error.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only."
- method: "PUT"
  path: "/tenant/{id}"
  description: "Updates a given tenant."
  resultDescription: "Updates a given tenant."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the tenant."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The tenant could not be updated due to an internal server error.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only."
    404:
      id: "404"
      type: null
      description: "If the tenant with the requested Id cannot be found."
- method: "DELETE"
  path: "/tenant/{id}/user-members/{userId}"
  description: "Deletes a membership between a tenant and an user."
  resultDescription: "Deletes a membership between a tenant and an user."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the tenant."
    userId:
      id: "userId"
      type: null
      description: "The id of the user."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    500:
      id: "500"
      type: null
      description: "In case an error occurs. See the Introduction for the error response\
        \ format."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only."
- method: "OPTIONS"
  path: "/tenant/{id}/user-members"
  description: "The OPTIONS request allows checking for the set of available operations\
    \ that the currently authenticated user can perform on the resource. If the user\
    \ can perform an operation or not may depend on various things, including the\
    \ users authorizations to interact with this resource and the internal configuration\
    \ of the process engine."
  resultDescription: "The OPTIONS request allows checking for the set of available\
    \ operations that the currently authenticated user can perform on the resource.\
    \ If the user can perform an operation or not may depend on various things, including\
    \ the users authorizations to interact with this resource and the internal configuration\
    \ of the process engine."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the tenant"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "PUT"
  path: "/tenant/{id}/user-members/{userId}"
  description: "Creates a membership between a tenant and an user."
  resultDescription: "Creates a membership between a tenant and an user."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the tenant."
    userId:
      id: "userId"
      type: null
      description: "The id of the user."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "In case an internal error occurs. See the Introduction for the\
        \ error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only."
- method: "DELETE"
  path: "/user/{id}"
  description: "Deletes a user by id."
  resultDescription: "Deletes a user by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the user to be deleted."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only (Cannot modify users / groups /\
        \ memberships)."
    404:
      id: "404"
      type: null
      description: "User cannot be found. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/user/count"
  description: "Query for users using a list of parameters and retrieves the count."
  resultDescription: "Query for users using a list of parameters and retrieves the\
    \ count."
  queryParameters:
    firstName:
      id: "firstName"
      type: null
      description: "Filter by the first name of the user."
    lastName:
      id: "lastName"
      type: null
      description: "Filter by the last name of the user."
    memberOfGroup:
      id: "memberOfGroup"
      type: null
      description: "Filter for users which are members of the given group."
    firstNameLike:
      id: "firstNameLike"
      type: null
      description: "Filter by the first name that the parameter is a substring of."
    id:
      id: "id"
      type: null
      description: "Filter by the id of the user."
    emailLike:
      id: "emailLike"
      type: null
      description: "Filter by the email that the parameter is a substring of."
    lastNameLike:
      id: "lastNameLike"
      type: null
      description: "Filter by the last name that the parameter is a substring of."
    email:
      id: "email"
      type: null
      description: "Filter by the email of the user."
    memberOfTenant:
      id: "memberOfTenant"
      type: null
      description: "Filter for users which are members of the given tenant."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy is specified. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/user"
  description: "Query for a list of users using a list of parameters.\nThe size of\
    \ the result set can be retrieved by using the Get User Count"
  resultDescription: "Query for a list of users using a list of parameters.\nThe size\
    \ of the result set can be retrieved by using the Get User Count"
  queryParameters:
    lastName:
      id: "lastName"
      type: null
      description: "Filter by the last name of the user."
    firstNameLike:
      id: "firstNameLike"
      type: null
      description: "Filter by the first name that the parameter is a substring of."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    emailLike:
      id: "emailLike"
      type: null
      description: "Filter by the email that the parameter is a substring of."
    memberOfTenant:
      id: "memberOfTenant"
      type: null
      description: "Filter for users which are members of the given tenant."
    firstName:
      id: "firstName"
      type: null
      description: "Filter by the first name of the user."
    memberOfGroup:
      id: "memberOfGroup"
      type: null
      description: "Filter for users which are members of a group."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are userId, firstName, lastName and email. Must be used in conjunction\
        \ with the sortOrder parameter."
    id:
      id: "id"
      type: null
      description: "Filter by the id of the user."
    lastNameLike:
      id: "lastNameLike"
      type: null
      description: "Filter by the last name that the parameter is a substring of."
    email:
      id: "email"
      type: null
      description: "Filter by the email of the user."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy is specified. See the\
        \ Introduction for the error response format."
- method: "GET"
  path: "/user/{id}/profile"
  description: "Retrieves a user's profile."
  resultDescription: "Retrieves a user's profile."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the user to be retrieved."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Execution with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "OPTIONS"
  path: "/user"
  description: "The `/user` resource supports two custom OPTIONS requests, one for\
    \ the resource as such and one for individual user instances. The OPTIONS request\
    \ allows checking for the set of available operations that the currently authenticated\
    \ user can perform on the `/user` resource. If the user can perform an operation\
    \ or not may depend on various things, including the user's authorizations to\
    \ interact with this resource and the internal configuration of the process engine."
  resultDescription: "The `/user` resource supports two custom OPTIONS requests, one\
    \ for the resource as such and one for individual user instances. The OPTIONS\
    \ request allows checking for the set of available operations that the currently\
    \ authenticated user can perform on the `/user` resource. If the user can perform\
    \ an operation or not may depend on various things, including the user's authorizations\
    \ to interact with this resource and the internal configuration of the process\
    \ engine."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
- method: "POST"
  path: "/user/create"
  description: "Create a new user."
  resultDescription: "Create a new user."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The user could not be created due to an internal server error.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only (Cannot modify users / groups /\
        \ memberships)."
- method: "PUT"
  path: "/user/{id}/credentials"
  description: "Updates a user's credentials (password)."
  resultDescription: "Updates a user's credentials (password)."
  responseCodes:
    400:
      id: "400"
      type: null
      description: "If the authenticated user password does not match."
    500:
      id: "500"
      type: null
      description: "The user could not be created due to an internal server error.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only (Cannot modify users / groups /\
        \ memberships)."
    404:
      id: "404"
      type: null
      description: "If the corresponding user cannot be found"
- method: "PUT"
  path: "/user/{id}/profile"
  description: "Updates the profile information of an already existing user."
  resultDescription: "Updates the profile information of an already existing user."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the user."
  responseCodes:
    500:
      id: "500"
      type: null
      description: "The user could not be updated due to an internal server error.\
        \ See the Introduction for the error response format."
    204:
      id: "204"
      type: null
      description: "Request successful."
    403:
      id: "403"
      type: null
      description: "Identity service is read-only (Cannot modify users / groups /\
        \ memberships)."
    404:
      id: "404"
      type: null
      description: "If the user with the requested Id cannot be found."
- method: "GET"
  path: "/variable-instance/{id}/data"
  description: "Retrieves the content of a variable by id. Applicable for byte array\
    \ and file variables."
  resultDescription: "Retrieves the content of a variable by id. Applicable for byte\
    \ array and file variables."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the variable instance."
- method: "GET"
  path: "/variable-instance/count"
  description: "Query for the number of variable instances that fulfill given parameters.\
    \ Takes the same parameters as the Get Variable Instances"
  resultDescription: "Query for the number of variable instances that fulfill given\
    \ parameters. Takes the same parameters as the Get Variable Instances"
  queryParameters:
    variableName:
      id: "variableName"
      type: null
      description: "Filter by variable instance name."
    executionIdIn:
      id: "executionIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ and comma-separated execution ids."
    caseInstanceIdIn:
      id: "caseInstanceIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ case instance ids."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    processInstanceIdIn:
      id: "processInstanceIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ and comma-separated process instance ids."
    taskIdIn:
      id: "taskIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ and comma-separated task ids."
    variableValues:
      id: "variableValues"
      type: null
      description: "Only include variable instances that have the certain values.\
        \ Value filtering expressions are comma-separated and are structured as follows:\
        \ A valid parameter value has the form key_operator_value. key is the variable\
        \ name, operator is the comparison operator to be used and value the variable\
        \ value. Note: Values are always treated as String objects on server side.\
        \ Valid operator values are: eq - equal to; neq - not equal to; gt - greater\
        \ than; gteq - greater than or equal to; lt - lower than; lteq - lower than\
        \ or equal to; like. key and value may not contain underscore or comma characters."
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ and comma-separated tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ and comma-separated activity instance ids."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    variableNameLike:
      id: "variableNameLike"
      type: null
      description: "Filter by the variable instance name. The parameter can include\
        \ the wildcard % to express like-strategy such as: starts with (%name), ends\
        \ with (name%) or contains (%name%)."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are variableName, variableType, activityInstanceId and tenantId.\
        \ Must be used in conjunction with the sortOrder parameter."
    caseExecutionIdIn:
      id: "caseExecutionIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ case execution ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/variable-instance"
  description: "Query for variable instances that fulfill given parameters. Parameters\
    \ may be the properties of variable instances, such as the name or type. The size\
    \ of the result set can be retrieved by using the Get Variable Instance Count"
  resultDescription: "Query for variable instances that fulfill given parameters.\
    \ Parameters may be the properties of variable instances, such as the name or\
    \ type. The size of the result set can be retrieved by using the Get Variable\
    \ Instance Count"
  queryParameters:
    variableName:
      id: "variableName"
      type: null
      description: "Filter by variable instance name."
    executionIdIn:
      id: "executionIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ and comma-separated execution ids."
    caseInstanceIdIn:
      id: "caseInstanceIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ case instance ids."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
    processInstanceIdIn:
      id: "processInstanceIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ and comma-separated process instance ids."
    taskIdIn:
      id: "taskIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ and comma-separated task ids."
    variableValues:
      id: "variableValues"
      type: null
      description: "Only include variable instances that have the certain values.\
        \ Value filtering expressions are comma-separated and are structured as follows:\
        \ A valid parameter value has the form key_operator_value. key is the variable\
        \ name, operator is the comparison operator to be used and value the variable\
        \ value. Note: Values are always treated as String objects on server side.\
        \ Valid operator values are: eq - equal to; neq - not equal to; gt - greater\
        \ than; gteq - greater than or equal to; lt - lower than; lteq - lower than\
        \ or equal to; like. key and value may not contain underscore or comma characters."
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
    tenantIdIn:
      id: "tenantIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ and comma-separated tenant ids."
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    activityInstanceIdIn:
      id: "activityInstanceIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ and comma-separated activity instance ids."
    sortOrder:
      id: "sortOrder"
      type: null
      description: "Sort the results in a given order. Values may be asc for ascending\
        \ order or desc for descending order. Must be used in conjunction with the\
        \ sortBy parameter."
    variableNameLike:
      id: "variableNameLike"
      type: null
      description: "Filter by the variable instance name. The parameter can include\
        \ the wildcard % to express like-strategy such as: starts with (%name), ends\
        \ with (name%) or contains (%name%)."
    sortBy:
      id: "sortBy"
      type: null
      description: "Sort the results lexicographically by a given criterion. Valid\
        \ values are variableName, variableType, activityInstanceId and tenantId.\
        \ Must be used in conjunction with the sortOrder parameter."
    caseExecutionIdIn:
      id: "caseExecutionIdIn"
      type: null
      description: "Only include variable instances which belong to one of the passed\
        \ case execution ids."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "GET"
  path: "/variable-instance/{id}"
  description: "Retrieves a variable by id."
  resultDescription: "Retrieves a variable by id."
  pathParameters:
    id:
      id: "id"
      type: null
      description: "The id of the variable instance."
  queryParameters:
    deserializeValue:
      id: "deserializeValue"
      type: null
      description: ""
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    404:
      id: "404"
      type: null
      description: "Variable with given id does not exist. See the Introduction for\
        \ the error response format."
- method: "POST"
  path: "/variable-instance/count"
  description: "Query for the number of variable instances that fulfill given parameters.\
    \ This method takes the same message body as the\nGet Variable Instances (POST)Get\
    \ Variable Instance Count"
  resultDescription: "Query for the number of variable instances that fulfill given\
    \ parameters. This method takes the same message body as the\nGet Variable Instances\
    \ (POST)Get Variable Instance Count"
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."
- method: "POST"
  path: "/variable-instance"
  description: "Query for variable instances that fulfill given parameters through\
    \ a JSON object. This method is slightly more powerful than the\nGet Variable\
    \ Instances`String`, `Number` or `Boolean`."
  resultDescription: "Query for variable instances that fulfill given parameters through\
    \ a JSON object. This method is slightly more powerful than the\nGet Variable\
    \ Instances`String`, `Number` or `Boolean`."
  queryParameters:
    deserializeValues:
      id: "deserializeValues"
      type: null
      description: ""
    maxResults:
      id: "maxResults"
      type: null
      description: "Pagination of results. Specifies the maximum number of results\
        \ to return. Will return less results if there are no more results left."
    firstResult:
      id: "firstResult"
      type: null
      description: "Pagination of results. Specifies the index of the first result\
        \ to return."
  responseCodes:
    200:
      id: "200"
      type: null
      description: "Request successful."
    400:
      id: "400"
      type: null
      description: "Returned if some of the query parameters are invalid, for example\
        \ if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator\
        \ for variable comparison is used. See the Introduction for the error response\
        \ format."